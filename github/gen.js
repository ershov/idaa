//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class github {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img:not([src^="images/"]):not([src^="//ssl.gstatic.com/ui/"]):not([src^="https://docs.google.com/"]), video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=github_dark_mode_enabled id=github_dark_mode_enabled _site=github _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.github_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.github_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=github_no_animations_enabled id=github_no_animations_enabled _site=github _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.github_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.github_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for underline_links : Underline links
// Split: big
// Params: 

static underline_links = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('underline_links')) settings.underline_links = {};
  let s = settings.underline_links;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('underline_links')) settings.underline_links = {};
  let s = settings.underline_links;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.underline_links._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.underline_links;
  if (!this.IsEnabled(settings)) return "/* Disabled: Underline links */\n\n";
  let {} = s;
  return `
/* Underline links */
a, a.no-underline {
    text-decoration: underline !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.underline_links;
  return `  <li><hr>
  <li>
  <input type=checkbox name=github_underline_links_enabled id=github_underline_links_enabled _site=github _section_id="underline_links" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_underline_links_enabled> Underline links</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('underline_links')) settings.underline_links = {};
  let s = settings.underline_links;
  let e = form.elements;
  s._enabled = e.github_underline_links_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.underline_links;
  let e = form.elements;
  e.github_underline_links_enabled.checked = s._enabled;

}

};  // end of nested class underline_links


///////////////////////////////////////////////////////////
// Functions for wider_menus : Wider menus
// Split: big
// Params: 

static wider_menus = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('wider_menus')) settings.wider_menus = {};
  let s = settings.wider_menus;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('wider_menus')) settings.wider_menus = {};
  let s = settings.wider_menus;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.wider_menus._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.wider_menus;
  if (!this.IsEnabled(settings)) return "/* Disabled: Wider menus */\n\n";
  let {} = s;
  return `
/* Wider menus */
.select-menu-list {
    max-height: 800px !important;
}
.select-menu-modal {
    width: 600px !important;
}
.select-menu-item .css-truncate-overflow {
    max-width: 450px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.wider_menus;
  return `  <li><hr>
  <li>
  <input type=checkbox name=github_wider_menus_enabled id=github_wider_menus_enabled _site=github _section_id="wider_menus" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_wider_menus_enabled> Wider menus</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('wider_menus')) settings.wider_menus = {};
  let s = settings.wider_menus;
  let e = form.elements;
  s._enabled = e.github_wider_menus_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.wider_menus;
  let e = form.elements;
  e.github_wider_menus_enabled.checked = s._enabled;

}

};  // end of nested class wider_menus


///////////////////////////////////////////////////////////
// Functions for ignore_ws : Ignore whitespace in diffs by default
// Split: big
// Params: 

static ignore_ws = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('ignore_ws')) settings.ignore_ws = {};
  let s = settings.ignore_ws;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('ignore_ws')) settings.ignore_ws = {};
  let s = settings.ignore_ws;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.ignore_ws._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.ignore_ws;
  if (!this.IsEnabled(settings)) return "/* Disabled: Ignore whitespace in diffs by default */\n\n";
  let {} = s;
  return `
/* Ignore whitespace in diffs by default */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["always-ignore-whitespace-diff.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
setTimeout(()=>[...document.querySelectorAll('a[href$="/files"], a[href*="/commits/"')].forEach(e => {
  if (e.href.includes("w=1")) return;
  let ch = e.href.includes("?") ? "&" : "?";
  e.setAttribute("href", `${e.getAttribute("href")}${ch}w=1`);
})
, 1000);
  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.ignore_ws;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_ignore_ws_enabled id=github_ignore_ws_enabled _site=github _section_id="ignore_ws" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_ignore_ws_enabled> Ignore whitespace in diffs by default</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('ignore_ws')) settings.ignore_ws = {};
  let s = settings.ignore_ws;
  let e = form.elements;
  s._enabled = e.github_ignore_ws_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.ignore_ws;
  let e = form.elements;
  e.github_ignore_ws_enabled.checked = s._enabled;

}

};  // end of nested class ignore_ws


///////////////////////////////////////////////////////////
// Functions for auto_expand_matches : Auto expand more matches
// Split: big
// Params: 

static auto_expand_matches = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('auto_expand_matches')) settings.auto_expand_matches = {};
  let s = settings.auto_expand_matches;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('auto_expand_matches')) settings.auto_expand_matches = {};
  let s = settings.auto_expand_matches;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.auto_expand_matches._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.auto_expand_matches;
  if (!this.IsEnabled(settings)) return "/* Disabled: Auto expand more matches */\n\n";
  let {} = s;
  return `
/* Auto expand more matches */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["auto-expand-more-matches.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
setTimeout(()=>
[...document.querySelectorAll('a')].filter(e => e.innerText.match(/^Show \d+ more matches$/)).forEach(e => e.click())
, 400);
  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.auto_expand_matches;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_auto_expand_matches_enabled id=github_auto_expand_matches_enabled _site=github _section_id="auto_expand_matches" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_auto_expand_matches_enabled> Auto expand more matches</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('auto_expand_matches')) settings.auto_expand_matches = {};
  let s = settings.auto_expand_matches;
  let e = form.elements;
  s._enabled = e.github_auto_expand_matches_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.auto_expand_matches;
  let e = form.elements;
  e.github_auto_expand_matches_enabled.checked = s._enabled;

}

};  // end of nested class auto_expand_matches


///////////////////////////////////////////////////////////
// Functions for load_diffs : Load all diffs with one button
// Split: big
// Params: 

static load_diffs = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('load_diffs')) settings.load_diffs = {};
  let s = settings.load_diffs;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('load_diffs')) settings.load_diffs = {};
  let s = settings.load_diffs;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.load_diffs._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.load_diffs;
  if (!this.IsEnabled(settings)) return "/* Disabled: Load all diffs with one button */\n\n";
  let {} = s;
  return `
/* Load all diffs with one button */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["load-all-diffs.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
(()=>{
	let fn = ()=>{
		if (document.querySelector('include-fragment.diff-progressive-loader')) {
			setTimeout(fn, 200);
			return;
		}
    let e = document.querySelector('#Load-All-Diffs');
		if (e) return;
		e = document.querySelector('.diffbar .flex-auto [data-pjax="#repo-content-pjax-container"]');
		if (!e) return;
		e.insertAdjacentHTML("beforeEnd", `<button id="Load-All-Diffs" class="btn-sm btn">Load all diffs</button>`);
		e = document.querySelector('#Load-All-Diffs');
		e.addEventListener("click", ()=> {
			[...document.querySelectorAll('button.load-diff-button')].forEach(e => e.click());
			e.remove();
		});
	};
	setTimeout(fn, 300);
	document.head.insertAdjacentHTML('beforeEnd', `<style>
.ellipsis-expander[aria-expanded="false"],
.js-review-hidden-comment-ids *,
.js-review-hidden-comment-ids .color-fg-muted,
.js-review-hidden-comment-ids .ajax-pagination-btn,
.ajax-pagination-form .ajax-pagination-btn,
.js-diff-load-container [data-hide-on-error],
#Load-All-Diffs
{
		background-color: #A00 !important;
}
</style>`);
})();

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.load_diffs;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_load_diffs_enabled id=github_load_diffs_enabled _site=github _section_id="load_diffs" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_load_diffs_enabled> Load all diffs with one button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('load_diffs')) settings.load_diffs = {};
  let s = settings.load_diffs;
  let e = form.elements;
  s._enabled = e.github_load_diffs_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.load_diffs;
  let e = form.elements;
  e.github_load_diffs_enabled.checked = s._enabled;

}

};  // end of nested class load_diffs


///////////////////////////////////////////////////////////
// Functions for comments_nav : Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down}
// Split: big
// Params: 

static comments_nav = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('comments_nav')) settings.comments_nav = {};
  let s = settings.comments_nav;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('comments_nav')) settings.comments_nav = {};
  let s = settings.comments_nav;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.comments_nav._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.comments_nav;
  if (!this.IsEnabled(settings)) return "/* Disabled: Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down} */\n\n";
  let {} = s;
  return `
/* Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down} */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["next-prev-comment-keynav.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let scrollPos = ee => [...(function*(e){do { yield e; } while (e = e.offsetParent);})(ee)].reduce((a, b) => a + b.offsetTop, 0);

let __getPrevNextComments = goprev => {
	let last;
	let winHeight = document.querySelector('html').clientHeight;
	let scrollTop = document.querySelector('html').scrollTop;
	let winSize = document.querySelector('html').clientHeight;
//console.log("================= "+(goprev?"UP":"DOWN"));
//console.log({winHeight, scrollTop, winSize}); let idx=0;
	for (e of document.querySelectorAll('.js-inline-comments-container')) {
		let top = scrollPos(e) - 150 - (winSize-150)/5;
		let bot = top + e.offsetHeight;
//console.log({idx:++idx, pos:top-scrollTop, top, bot, e});
		if (goprev) {
			if (top+30 < scrollTop)
				last = {e, top, bot};
			else
				return last;
		} else {
			if (top-30 > scrollTop) return {e, top, bot};
		}
	}
	return last;
};

let __getPrevNextCommentScroll = goprev => {
	let e = __getPrevNextComments(goprev);
	return e ? e.top : goprev ? 0 : 99999999;
};

document.addEventListener("keydown", ev => {
	if (!(ev.altKey && ev.metaKey && !ev.ctrlKey && !ev.shiftKey)) return;
	if (ev.code != "ArrowDown" && ev.code != "ArrowUp") return;
	ev.preventDefault();
	ev.cancelBubble = true;
	document.querySelector('html').scrollTop = __getPrevNextCommentScroll(ev.code == "ArrowUp");
}, true);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.comments_nav;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_comments_nav_enabled id=github_comments_nav_enabled _site=github _section_id="comments_nav" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_comments_nav_enabled> Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down}</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('comments_nav')) settings.comments_nav = {};
  let s = settings.comments_nav;
  let e = form.elements;
  s._enabled = e.github_comments_nav_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.comments_nav;
  let e = form.elements;
  e.github_comments_nav_enabled.checked = s._enabled;

}

};  // end of nested class comments_nav


///////////////////////////////////////////////////////////
// Functions for comments_hi : Highlight comments by Alt+Click
// Split: minor
// Params: 

static comments_hi = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('comments_hi')) settings.comments_hi = {};
  let s = settings.comments_hi;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('comments_hi')) settings.comments_hi = {};
  let s = settings.comments_hi;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.comments_hi._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.comments_hi;
  if (!this.IsEnabled(settings)) return "/* Disabled: Highlight comments by Alt+Click */\n\n";
  let {} = s;
  return `
/* Highlight comments by Alt+Click */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["comment-highlight.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let marked = {};

document.addEventListener("mousedown", ev => {
	if (!ev.altKey) return;
	let div = ev.target.closest('div.js-inline-comments-container');
	let id = div?.querySelector('div[id^=r]')?.id;
  if (!div || !id) {
	  div = ev.target.closest('[id^="review-thread-or-comment-id-"]');
    id = `${div?.id}`.match(/-(\d+)$/)?.[1];
	}
  if (!div || !id) {
	  div = ev.target.closest('[id^="review-thread-or-comment-id-"]');
    id = `${div?.id}`.match(/-(\d+)$/)?.[1];
	}
	if (!div || !id) {
		id = ev.target.closest('a.select-menu-item')?.href?.match(/#r(\d+)$/)?.[1];
	  div = document.querySelector(`#r${id}`)?.closest("div.js-inline-comments-container");
		if (!id || !div) return;
	}
	ev.preventDefault(); ev.stopPropagation();
	id = id.substr(1);
	let m = marked[id] = !marked[id];
	div.style.backgroundColor = m ? "#034" : "";
	document.querySelector('#marked-style')?.remove();
	document.head.insertAdjacentHTML('beforeEnd', `<style id="marked-style">`+
Object.keys(marked).map(x => `[data-hydro-click*='"comment_id":${x}']`).join(", ")+`
{
  background-color: #034;
}
</style>`);
}, true);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.comments_hi;
  return `  <li style=height:0.5em ><BR>
  <li has_script>
  <input type=checkbox name=github_comments_hi_enabled id=github_comments_hi_enabled _site=github _section_id="comments_hi" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_comments_hi_enabled> Highlight comments by Alt+Click</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('comments_hi')) settings.comments_hi = {};
  let s = settings.comments_hi;
  let e = form.elements;
  s._enabled = e.github_comments_hi_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.comments_hi;
  let e = form.elements;
  e.github_comments_hi_enabled.checked = s._enabled;

}

};  // end of nested class comments_hi


///////////////////////////////////////////////////////////
// Interface functions

static id = "github";
static fields = ["dark_mode", "no_animations", "underline_links", "wider_menus", "ignore_ws", "auto_expand_matches", "load_diffs", "comments_nav", "comments_hi"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module github disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.underline_links.GenStyle(settings) +
  this.wider_menus.GenStyle(settings) +
  this.ignore_ws.GenStyle(settings) +
  this.auto_expand_matches.GenStyle(settings) +
  this.load_diffs.GenStyle(settings) +
  this.comments_nav.GenStyle(settings) +
  this.comments_hi.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.underline_links.GenScriptUrls(settings),
    ...this.wider_menus.GenScriptUrls(settings),
    ...this.ignore_ws.GenScriptUrls(settings),
    ...this.auto_expand_matches.GenScriptUrls(settings),
    ...this.load_diffs.GenScriptUrls(settings),
    ...this.comments_nav.GenScriptUrls(settings),
    ...this.comments_hi.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.underline_links.GetScript(settings),
    this.wider_menus.GetScript(settings),
    this.ignore_ws.GetScript(settings),
    this.auto_expand_matches.GetScript(settings),
    this.load_diffs.GetScript(settings),
    this.comments_nav.GetScript(settings),
    this.comments_hi.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.underline_links.SetDefaults(settings);
  this.wider_menus.SetDefaults(settings);
  this.ignore_ws.SetDefaults(settings);
  this.auto_expand_matches.SetDefaults(settings);
  this.load_diffs.SetDefaults(settings);
  this.comments_nav.SetDefaults(settings);
  this.comments_hi.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.underline_links.GenSettingsUi(settings) +
  this.wider_menus.GenSettingsUi(settings) +
  this.ignore_ws.GenSettingsUi(settings) +
  this.auto_expand_matches.GenSettingsUi(settings) +
  this.load_diffs.GenSettingsUi(settings) +
  this.comments_nav.GenSettingsUi(settings) +
  this.comments_hi.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.underline_links.ImportSettingsFromForm(form, settings);
  this.wider_menus.ImportSettingsFromForm(form, settings);
  this.ignore_ws.ImportSettingsFromForm(form, settings);
  this.auto_expand_matches.ImportSettingsFromForm(form, settings);
  this.load_diffs.ImportSettingsFromForm(form, settings);
  this.comments_nav.ImportSettingsFromForm(form, settings);
  this.comments_hi.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.underline_links.ApplySettingsToForm(settings, form);
  this.wider_menus.ApplySettingsToForm(settings, form);
  this.ignore_ws.ApplySettingsToForm(settings, form);
  this.auto_expand_matches.ApplySettingsToForm(settings, form);
  this.load_diffs.ApplySettingsToForm(settings, form);
  this.comments_nav.ApplySettingsToForm(settings, form);
  this.comments_hi.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://github.com/*"];

} // end of global class github
