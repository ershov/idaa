//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class slack {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"], :fullscreen {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=slack_dark_mode_enabled id=slack_dark_mode_enabled _site=slack _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=slack_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.slack_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.slack_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=slack_no_animations_enabled id=slack_no_animations_enabled _site=slack _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=slack_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.slack_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.slack_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for export_messages : Export thread (top right corner icon)
// Split: big
// Params: 

static export_messages = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('export_messages')) settings.export_messages = {};
  let s = settings.export_messages;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('export_messages')) settings.export_messages = {};
  let s = settings.export_messages;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.export_messages._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.export_messages;
  if (!this.IsEnabled(settings)) return "/* Disabled: Export thread (top right corner icon) */\n\n";
  let {} = s;
  return `
/* Export thread (top right corner icon) */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["export-messages.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
setTimeout(() => {
let observer = null;
let button = null;
let msgmap = {};

function onButtonClick() {
  if (observer) {
    //console.log("*** stop");
    observer.disconnect();
    observer = null;
    button.innerHTML = "ðŸ’¾";

    //let txt = Object.entries(msgmap).map(([k, v]) => [Number(k), v]).sort().map(([k, v]) => v).join("\n\n");
    //console.log("***", txt);

    let html = Object.entries(msgmap).map(([k, v]) => [Number(k), v]).sort().map(([k, v]) => v).join("<hr>");
    let w = window.open("about:blank");
    let display = () => {
      w.document.head.innerHTML = `<style>
.c-emoji__small { width: 16px; height: 16px; }
.c-emoji--inline.c-emoji__medium img { width: 22px; height: 22px; }
button.c-avatar { padding: 0; border: none; }
.c-mrkdwn__br { height: 8px; display: block; }
.c-pillow_file {
 background: #EEE; border: 1px solid #888; border-radius: 12px; padding: 12px; display: flex; flex-direction: column;
}
.c-mrkdwn__broadcast--mention { color: #660; background: #ffA; }
.p-file_thumbnail__container { display: none; }
.c-message_kit__gutter__left { display: contents; }
.c-message_kit__gutter__left * { display: inline-block; }
.c-message_kit__gutter__right { display: contents; }
</style>`;
      w.document.body.innerHTML = html;
      w.document.querySelectorAll('svg, .c-custom_status, .c-message__reply_bar_description, .c-message__reply_bar_arrow, [data-qa="add_reaction_button"], .offscreen').forEach(e => e.remove());
      w.document.querySelectorAll('[data-qa="timestamp_label"]').forEach(e => e.innerText = new Date(parseFloat(e.parentNode.getAttribute("data-ts"))*1000.));
    };
    display();
    w.document.addEventListener("readystatechange", ()=>{
      if (w.document.readyState !== "complete") return;
      display();
    })
    return;
  }

  function onRecord(ee) {
    if (ee.getAttribute("role") !== "listitem" || !ee.hasAttribute("data-item-key")) return;
    let ts = ee.getAttribute("data-item-key");
    if (Number.isNaN(parseFloat(ts))) return;
    //msgmap[ee.hasAttribute("data-item-key")] = ee.textContent;
    //msgmap[ee.hasAttribute("data-item-key")] = ee.innerText;
    msgmap[ts] = ee.outerHTML;
  }
  function updateRecords(records) {
    for (let n of records) onRecord(n);
    button.innerHTML = `${Object.keys(msgmap).length} âœ…`;
  }

  let e =
    document.querySelector('[role].p-view_contents--secondary [role="presentation"].c-scrollbar__child [role="list"]') ||
    document.querySelector('[role].p-view_contents--primary [role="presentation"].c-scrollbar__child [role="list"]');
  if (!e) return;

  observer = new MutationObserver((records, observer) => {
    for (let r of records) updateRecords(r.addedNodes);
  });

  msgmap = {};
  updateRecords(e.childNodes);
  observer.observe(e, {childList: true});
}

function addButton() {
  //if (document.querySelector("#export-button")) return;
  document.querySelector("#export-button")?.remove();
  button = document.createElement("button");
  button.setAttribute("id", "export-button");
  button.style.color = "#fff";
  button.innerHTML = "ðŸ’¾";
  button.addEventListener("click", onButtonClick);
  document.querySelector('[role="toolbar"][data-qa="top-nav"]').appendChild(button);
}

addButton();
}, 3000);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.export_messages;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=slack_export_messages_enabled id=slack_export_messages_enabled _site=slack _section_id="export_messages" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=slack_export_messages_enabled> Export thread (top right corner icon)</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('export_messages')) settings.export_messages = {};
  let s = settings.export_messages;
  let e = form.elements;
  s._enabled = e.slack_export_messages_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.export_messages;
  let e = form.elements;
  e.slack_export_messages_enabled.checked = s._enabled;

}

};  // end of nested class export_messages


///////////////////////////////////////////////////////////
// Interface functions

static id = "slack";
static fields = ["dark_mode", "no_animations", "export_messages"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module slack disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.export_messages.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.export_messages.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.export_messages.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.export_messages.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.export_messages.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.export_messages.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.export_messages.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://app.slack.com/*"];

} // end of global class slack
