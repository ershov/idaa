#!/bin/bash

### Generate styles

autogen() {
cat << _END
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

_END
for i in "$@"; do echo "$i"; done
}

autogen "var modules = [" > gen_modules.js
autogen "var module_names = [" > gen_module_names.js
autogen "var modules_map = {" > gen_modules_map.js

for subdir in *; do
  [[ -d "$subdir" ]] && (
    cd "$subdir" || exit
    [[ -f "style.css" ]] || exit
    echo "Processing $subdir..."
    autogen "LoadModule($subdir);" > gen_content.js
    autogen > gen.js
    ../cvt-style.pl "$subdir" >> gen.js
    echo "  $subdir," >> ../gen_modules.js
    echo "  \"$subdir\"," >> ../gen_module_names.js
    echo "  \"$subdir\": $subdir," >> ../gen_modules_map.js
  )
done

echo "];" >> gen_modules.js
echo "];" >> gen_module_names.js
echo "};" >> gen_modules_map.js

URLS_TXT=$(for f in *; do [[ -f "$f/url.txt" ]] && echo "$f/url.txt"; done) # Properly sorted list of url.txt

### Urls-to-module decoder

echo Urls-to-module decoder...
autogen > gen_urlmap.js

LC_ALL=C perl -MIO::File -MFile::Basename=dirname -E '
@url2mod =
 sort { (($b->[0] =~ tr{/.}{/.}) <=> ($a->[0] =~ tr{/.}{/.})) || ($a->[1] cmp $b->[1]) || ($a->[0] cmp $b->[0]) }
 map {
   $f = $_;
   map {
     chomp;
     [$_, dirname($f)]
   } IO::File->new($f, "r")->getlines()
 } @ARGV;

print "var urlmap = [\n";
print join ",\n",
 map {qq{  ["$_->[0]", "$_->[1]"]}}
 @url2mod;
print "];\n\n";

print << "_E";
function Url2Mod(url) {
  const mods = [@{[join ", ", map {qq{"$_->[1]"}} @url2mod]}];
  const re = new RegExp(`^@{[join "|", map {local $_=$_->[0]; s/([.])/\\$1/g; s/\*/.*?/g; "($_)"} @url2mod]}\$`);
  let match = url.match(re);
  return match ? mods[[...match].splice(1).findIndex(x => !!x)] : null;
}

_E

print << "_E";
function Url2Mods(url) {
  const mods = [@{[join ", ", map {qq{"$_->[1]"}} @url2mod]}];
  const regs = [@{[join ", ", map { local $_=$_->[0]; s/([.])/\\$1/g; s/\*/.*?/g; qq{new RegExp("`$_")} } @url2mod]}];
  let ret = new Set();
  for (let i = 0; i < regs.length; i++) {
    if (url.match(regs[i]))
      ret.add(mods[i]);
  }
  return ret;
}

_E
' $URLS_TXT >> gen_urlmap.js

### Generate manifest

echo Generating manifest...

perl -MIO::File -MFile::Basename=dirname -E '
@modules =
  map {
    [dirname($_), [map { chomp; $_ } IO::File->new($_, "r")->getlines()]]
  } @ARGV;
$preamble = << '"'"'_E'"'"';
sub chompl { chomp($_[0]); $_[0] }
_E
eval << "_E";
$preamble
print << "_END_MANIFEST";
@{[join "", IO::File->new("manifest.tmpl.json", "r")->getlines()]}
_END_MANIFEST
_E
print STDERR $@ if $@;
' $URLS_TXT > manifest.json

### Generate combined js

echo Generating combined js...
cat `find . -name gen.js` gen_modules.js gen_module_names.js gen_modules_map.js gen_urlmap.js > gen_all.js

echo '//for (module of modules) { console.log(module.name, module); }' >> gen_all.js

