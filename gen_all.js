//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class keep {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"] {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=keep_dark_mode_enabled id=keep_dark_mode_enabled _site=keep _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=keep_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.keep_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.keep_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=keep_no_animations_enabled id=keep_no_animations_enabled _site=keep _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=keep_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.keep_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.keep_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for common : Horizontal menu
// Split: big
// Params: 

static common = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.common._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.common;
  if (!this.IsEnabled(settings)) return "/* Disabled: Horizontal menu */\n\n";
  let {} = s;
  return `
/* Horizontal menu */
.RfDI4d-Iu19ad {
    flex-direction: column !important;
    height: auto !important;
    height: auto !important;
}

.h1U9Be-xhiy4 {
    margin: 0 auto 0 auto !important;
}

.PvRhvb-bN97Pc {
    -webkit-flex-direction: row !important;
    flex-direction: row !important;
    height: auto !important;
    min-height: auto !important;
    position: relative !important;
    top: 0 !important;
    width: 100% !important;
}

.PvRhvb-SjW3R-LS81yb {
    display: flex !important;
}

.PvRhvb-ibnC6b {
    border-radius: 0 !important;
    width: auto !important;
}

.PvRhvb-qAWA2 .PvRhvb-bN97Pc:hover .PvRhvb-ibnC6b,
.PvRhvb-ibnC6b {
    padding-right: 24px !important;
}

.PvRhvb-LgbsSe-haAclf {
    display: flex !important;
    flex-direction: row !important;
}

header {
    position: relative !important;
}

.gb_Xd {
    height: auto !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.common;
  return `  <li><hr>
  <li>
  <input type=checkbox name=keep_common_enabled id=keep_common_enabled _site=keep _section_id="common" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=keep_common_enabled> Horizontal menu</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  let e = form.elements;
  s._enabled = e.keep_common_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.common;
  let e = form.elements;
  e.keep_common_enabled.checked = s._enabled;

}

};  // end of nested class common


///////////////////////////////////////////////////////////
// Interface functions

static id = "keep";
static fields = ["dark_mode", "no_animations", "common"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module keep disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.common.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.common.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.common.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.common.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.common.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.common.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.common.ApplySettingsToForm(settings, form);
}


static has_scripts = 0;

static descr = ``;

static urls = ["*://keep.google.com/*"];

} // end of global class keep
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class calendar {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"], :fullscreen {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=calendar_dark_mode_enabled id=calendar_dark_mode_enabled _site=calendar _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.calendar_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.calendar_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=calendar_no_animations_enabled id=calendar_no_animations_enabled _site=calendar _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.calendar_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.calendar_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for no_overflow : Display full strings
// Split: big
// Params: 

static no_overflow = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_overflow._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  if (!this.IsEnabled(settings)) return "/* Disabled: Display full strings */\n\n";
  let {} = s;
  return `
/* Display full strings */
* {
  text-overflow: unset !important;
}
[data-hovercard-owner-id] * {
  max-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  return `  <li><hr>
  <li>
  <input type=checkbox name=calendar_no_overflow_enabled id=calendar_no_overflow_enabled _site=calendar _section_id="no_overflow" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_no_overflow_enabled> Display full strings</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  let e = form.elements;
  s._enabled = e.calendar_no_overflow_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  let e = form.elements;
  e.calendar_no_overflow_enabled.checked = s._enabled;

}

};  // end of nested class no_overflow


///////////////////////////////////////////////////////////
// Functions for menu_hotkey : Show/hide menu hotkey (Backtick or Ctrl-Backtick)
// Split: minor
// Params: 

static menu_hotkey = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('menu_hotkey')) settings.menu_hotkey = {};
  let s = settings.menu_hotkey;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('menu_hotkey')) settings.menu_hotkey = {};
  let s = settings.menu_hotkey;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.menu_hotkey._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.menu_hotkey;
  if (!this.IsEnabled(settings)) return "/* Disabled: Show/hide menu hotkey (Backtick or Ctrl-Backtick) */\n\n";
  let {} = s;
  return `
/* Show/hide menu hotkey (Backtick or Ctrl-Backtick) */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["show-menu-hotkey.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
document.addEventListener("keydown", ev =>
  ev.key==="`" &&
  (ev.ctrlKey || !["INPUT","TEXTAREA","SELECT", "OPTION"].includes(document.activeElement.tagName)) &&
  (ev.preventDefault(), document.querySelector(`[aria-label="Main drawer"]`)?.click()));

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.menu_hotkey;
  return `  <li style=height:0.5em ><BR>
  <li has_script>
  <input type=checkbox name=calendar_menu_hotkey_enabled id=calendar_menu_hotkey_enabled _site=calendar _section_id="menu_hotkey" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_menu_hotkey_enabled> Show/hide menu hotkey (Backtick or Ctrl-Backtick)</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('menu_hotkey')) settings.menu_hotkey = {};
  let s = settings.menu_hotkey;
  let e = form.elements;
  s._enabled = e.calendar_menu_hotkey_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.menu_hotkey;
  let e = form.elements;
  e.calendar_menu_hotkey_enabled.checked = s._enabled;

}

};  // end of nested class menu_hotkey


///////////////////////////////////////////////////////////
// Interface functions

static id = "calendar";
static fields = ["dark_mode", "no_animations", "no_overflow", "menu_hotkey"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module calendar disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.no_overflow.GenStyle(settings) +
  this.menu_hotkey.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.no_overflow.GenScriptUrls(settings),
    ...this.menu_hotkey.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.no_overflow.GetScript(settings),
    this.menu_hotkey.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.no_overflow.SetDefaults(settings);
  this.menu_hotkey.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.no_overflow.GenSettingsUi(settings) +
  this.menu_hotkey.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.no_overflow.ImportSettingsFromForm(form, settings);
  this.menu_hotkey.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.no_overflow.ApplySettingsToForm(settings, form);
  this.menu_hotkey.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://calendar.google.com/*"];

} // end of global class calendar
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class chat {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
  -webkit-filter: invert(100%) hue-rotate(180deg) !important;
}
img, video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_dark_mode_enabled id=chat_dark_mode_enabled _site=chat _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.chat_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.chat_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}


/*- 'Close chat' button is always visible */
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=chat_no_animations_enabled id=chat_no_animations_enabled _site=chat _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.chat_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.chat_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for popup : Always open chats in popup <img src=chat/popout.svg>
// Split: big
// Params: 

static popup = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popup')) settings.popup = {};
  let s = settings.popup;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popup')) settings.popup = {};
  let s = settings.popup;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.popup._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popup;
  if (!this.IsEnabled(settings)) return "/* Disabled: Always open chats in popup <img src=chat/popout.svg> */\n\n";
  let {} = s;
  return `
/* Always open chats in popup <img src=chat/popout.svg> */
:root {
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["all-popup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

function IsInRosterIframe() {
  return location.href.indexOf("roster-iframe") != -1 &&
         document.querySelector(`[role=list][aria-label^="List of "] [role=list] > [role=listitem]`);
}

function ClickHandler(ev) {
  //console.log("popup: click?");
  if (WantToStop()) return;
  let e = ev.target, listitem = e.closest("[role=listitem]"), isButton = e.closest("[role=button]");
  if (!listitem || isButton) return;
  //console.log("popup: click");
  let popOutButton = listitem.querySelector(`[role=button][aria-label="Open in a pop-up"]`)
  if (!popOutButton) return;
  ev.stopPropagation();
  popOutButton.click();
}

function InstallClickHandler() {
  if (WantToStop()) return;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    if (e.has_click_handler) return;
    e.addEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = true;
  });
}

function WantToStop() {
  if (top == window) return false;
  if (window.modsettings.popup_embedded_only._enabled && IsEmbeddedInChat()) {
    //console.log("STOP", window);
    UninstallAll();
    return true;
  }
  return false;
}

function UninstallAll() {
  observer_timer && clearTimeout(observer_timer);
  observer_timer = 0;
  observer?.disconnect();
  observer = null;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    e.removeEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = false;
  });
}

// Can give false negative during loading time
function IsEmbeddedInChat() {
  // Not an iframe?
  //if (!top || top === window) return false;

  let ex;
  // Can read location directly?
  try {
    return top.location.href.indexOf("/mail.google.com/chat/") != -1;
  } catch (ex) {}

  return location.hash.indexOf("embed=chat") != -1;
}

var observer_timer = 0;
var observer;

function AddIframeMarkers() {
  [...document.querySelectorAll(`iframe[src*="roster-iframe"]:not([src*="embed=chat"])`)].forEach(frame => {
    let hash = frame.src.match(/#.*$/)?.[0];
    if (hash) {
      frame.src = frame.src.replace(/#.*$/, hash + "&embed=chat")
    } else {
      frame.src += "#embed=chat";
    }
  });
}

function OnChange() {
  observer_timer = 0;
  //console.log(top == window, "OnChange");
  if (top == window) {
    AddIframeMarkers();
  } else {
    InstallClickHandler();
  }
}

function InstallObserver() {
  if (window.popup_observer_installed) return;
  window.popup_observer_installed = true;
  //console.log(top == window, "InstallObserver", window);

  OnChange();
  observer = new MutationObserver(()=>{
    observer.takeRecords();
    if (WantToStop()) return;
    if (!observer_timer) observer_timer = setTimeout(OnChange, 300);
  });
  observer.observe(document.body, {attributes: false, subtree: true, childList: true, characterData: false});
}

function Run() {
  if (!window.all_popup_installed && window.modsettings.popup._enabled) {
    window.all_popup_installed = true;

    // Always load in top window
    if (top == window) {
      InstallObserver();
      return;
    }

    // Load only in roster iframes
    if (!IsInRosterIframe()) {
      //console.log("Not loading (1)", window);
      return;
    }

    // If using pop-out everywhere
    if (!window.modsettings.popup_embedded_only._enabled) {
      InstallObserver();
      return;
    }

    // Using pop-out in embedded chats only
    if (!IsEmbeddedInChat()) {
      InstallObserver();
      return;
    }
  } else {
    //console.log("popup: not loading", window);
  }
}

setTimeout(Run, 2000);


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popup;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=chat_popup_enabled id=chat_popup_enabled _site=chat _section_id="popup" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popup_enabled> Always open chats in popup <img src=chat/popout.svg></label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popup')) settings.popup = {};
  let s = settings.popup;
  let e = form.elements;
  s._enabled = e.chat_popup_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popup;
  let e = form.elements;
  e.chat_popup_enabled.checked = s._enabled;

}

};  // end of nested class popup


///////////////////////////////////////////////////////////
// Functions for popup_embedded_only : ... only if embedded in another site (e.g. in gmail)
// Split: no
// Params: 

static popup_embedded_only = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popup_embedded_only')) settings.popup_embedded_only = {};
  let s = settings.popup_embedded_only;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popup_embedded_only')) settings.popup_embedded_only = {};
  let s = settings.popup_embedded_only;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.popup_embedded_only._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popup_embedded_only;
  if (!this.IsEnabled(settings)) return "/* Disabled: ... only if embedded in another site (e.g. in gmail) */\n\n";
  let {} = s;
  return `
/* ... only if embedded in another site (e.g. in gmail) */
:root {
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["all-popup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

function IsInRosterIframe() {
  return location.href.indexOf("roster-iframe") != -1 &&
         document.querySelector(`[role=list][aria-label^="List of "] [role=list] > [role=listitem]`);
}

function ClickHandler(ev) {
  //console.log("popup: click?");
  if (WantToStop()) return;
  let e = ev.target, listitem = e.closest("[role=listitem]"), isButton = e.closest("[role=button]");
  if (!listitem || isButton) return;
  //console.log("popup: click");
  let popOutButton = listitem.querySelector(`[role=button][aria-label="Open in a pop-up"]`)
  if (!popOutButton) return;
  ev.stopPropagation();
  popOutButton.click();
}

function InstallClickHandler() {
  if (WantToStop()) return;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    if (e.has_click_handler) return;
    e.addEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = true;
  });
}

function WantToStop() {
  if (top == window) return false;
  if (window.modsettings.popup_embedded_only._enabled && IsEmbeddedInChat()) {
    //console.log("STOP", window);
    UninstallAll();
    return true;
  }
  return false;
}

function UninstallAll() {
  observer_timer && clearTimeout(observer_timer);
  observer_timer = 0;
  observer?.disconnect();
  observer = null;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    e.removeEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = false;
  });
}

// Can give false negative during loading time
function IsEmbeddedInChat() {
  // Not an iframe?
  //if (!top || top === window) return false;

  let ex;
  // Can read location directly?
  try {
    return top.location.href.indexOf("/mail.google.com/chat/") != -1;
  } catch (ex) {}

  return location.hash.indexOf("embed=chat") != -1;
}

var observer_timer = 0;
var observer;

function AddIframeMarkers() {
  [...document.querySelectorAll(`iframe[src*="roster-iframe"]:not([src*="embed=chat"])`)].forEach(frame => {
    let hash = frame.src.match(/#.*$/)?.[0];
    if (hash) {
      frame.src = frame.src.replace(/#.*$/, hash + "&embed=chat")
    } else {
      frame.src += "#embed=chat";
    }
  });
}

function OnChange() {
  observer_timer = 0;
  //console.log(top == window, "OnChange");
  if (top == window) {
    AddIframeMarkers();
  } else {
    InstallClickHandler();
  }
}

function InstallObserver() {
  if (window.popup_observer_installed) return;
  window.popup_observer_installed = true;
  //console.log(top == window, "InstallObserver", window);

  OnChange();
  observer = new MutationObserver(()=>{
    observer.takeRecords();
    if (WantToStop()) return;
    if (!observer_timer) observer_timer = setTimeout(OnChange, 300);
  });
  observer.observe(document.body, {attributes: false, subtree: true, childList: true, characterData: false});
}

function Run() {
  if (!window.all_popup_installed && window.modsettings.popup._enabled) {
    window.all_popup_installed = true;

    // Always load in top window
    if (top == window) {
      InstallObserver();
      return;
    }

    // Load only in roster iframes
    if (!IsInRosterIframe()) {
      //console.log("Not loading (1)", window);
      return;
    }

    // If using pop-out everywhere
    if (!window.modsettings.popup_embedded_only._enabled) {
      InstallObserver();
      return;
    }

    // Using pop-out in embedded chats only
    if (!IsEmbeddedInChat()) {
      InstallObserver();
      return;
    }
  } else {
    //console.log("popup: not loading", window);
  }
}

setTimeout(Run, 2000);


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popup_embedded_only;
  return `
  <li has_script>
  <input type=checkbox name=chat_popup_embedded_only_enabled id=chat_popup_embedded_only_enabled _site=chat _section_id="popup_embedded_only" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popup_embedded_only_enabled> ... only if embedded in another site (e.g. in gmail)</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popup_embedded_only')) settings.popup_embedded_only = {};
  let s = settings.popup_embedded_only;
  let e = form.elements;
  s._enabled = e.chat_popup_embedded_only_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popup_embedded_only;
  let e = form.elements;
  e.chat_popup_embedded_only_enabled.checked = s._enabled;

}

};  // end of nested class popup_embedded_only


///////////////////////////////////////////////////////////
// Functions for links_new_tab : Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg>
// Split: big
// Params: 

static links_new_tab = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('links_new_tab')) settings.links_new_tab = {};
  let s = settings.links_new_tab;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('links_new_tab')) settings.links_new_tab = {};
  let s = settings.links_new_tab;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.links_new_tab._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.links_new_tab;
  if (!this.IsEnabled(settings)) return "/* Disabled: Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg> */\n\n";
  let {} = s;
  return `
/* Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg> */
:root {
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["links-new-tab.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

function ClickHandler(ev) {
  //console.log("link: click 1");
  let e = ev.target;
  let a = e?.closest(`a[href]`);
  if (!a) return;  // not a link
  //console.log("link: click 2");
  let is_open_in_chat = e.tagName === "SPAN" && e.innerHTML === "Open in chat";
  if (is_open_in_chat) return;  // specifically clicked on "Open in chat" button
  //console.log("link: click 3");
  let new_tab_button = a.querySelector(`[role=application][aria-label="Open in new tab"]`);
  if (!new_tab_button) return;  // this "a" doesn't have a "New tab" button
  //console.log("link: click 4");
  ev.stopPropagation();
  new_tab_button.click();
}

function InstallClickHandler() {
  if (document.has_links_click_handler) return;
  document.addEventListener("mousedown", ClickHandler, true);
  document.has_links_click_handler = true;
}

InstallClickHandler();


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.links_new_tab;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=chat_links_new_tab_enabled id=chat_links_new_tab_enabled _site=chat _section_id="links_new_tab" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_links_new_tab_enabled> Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg></label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('links_new_tab')) settings.links_new_tab = {};
  let s = settings.links_new_tab;
  let e = form.elements;
  s._enabled = e.chat_links_new_tab_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.links_new_tab;
  let e = form.elements;
  e.chat_links_new_tab_enabled.checked = s._enabled;

}

};  // end of nested class links_new_tab


///////////////////////////////////////////////////////////
// Functions for popout_title_height : Pop-out window title height
// Split: big
// Params: [height 1 24 Height]

static popout_title_height = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popout_title_height')) settings.popout_title_height = {};
  let s = settings.popout_title_height;
  s._enabled = true;
  s.height = 24;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popout_title_height')) settings.popout_title_height = {};
  let s = settings.popout_title_height;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 24;
}

static IsEnabled(settings) {
  return settings.popout_title_height._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popout_title_height;
  if (!this.IsEnabled(settings)) return "/* Disabled: Pop-out window title height */\n\n";
  let {height} = s;
  return `
/* Pop-out window title height */
.tRuV8b .HrE5Tb {
  height: ${height}px !important;  /* @1 */
}
.tRuV8b .pS5UB, .vIO7af {
  height: 24px !important; /*-Subtitle height and "..." menu */
}
.tRuV8b .YtEe7c, .tRuV8b .UQqRMd {
  margin-left: 5px !important;  /*-Margin of the chat title */
}
.jO3HBb {     /*-Chat dialog position */
  top: ${height+24}px;  /* @1=height+24 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popout_title_height;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_popout_title_height_enabled id=chat_popout_title_height_enabled _site=chat _section_id="popout_title_height" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popout_title_height_enabled> Pop-out window title height</label>
  <ul>
    <li><input
      name=chat_popout_title_height_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=chat
      _section_id="popout_title_height"
      _setting_id="height"
      _default="24"
      ><input
      name=chat_popout_title_height_height_val
      size=3
      value=${s.height}
      _site=chat
      _section_id="popout_title_height"
      _setting_id="height"
      _default="24"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popout_title_height')) settings.popout_title_height = {};
  let s = settings.popout_title_height;
  let e = form.elements;
  s._enabled = e.chat_popout_title_height_enabled.checked;
  if (isNaN(s.height = parseInt(e.chat_popout_title_height_height_val.value))) s.height = 24;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popout_title_height;
  let e = form.elements;
  e.chat_popout_title_height_enabled.checked = s._enabled;
  e.chat_popout_title_height_height_range.value = e.chat_popout_title_height_height_val.value = s.height;
}

};  // end of nested class popout_title_height


///////////////////////////////////////////////////////////
// Functions for popout_button_size : Pop-out window control buttons height match the title bar size
// Split: no
// Params: 

static popout_button_size = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popout_button_size')) settings.popout_button_size = {};
  let s = settings.popout_button_size;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popout_button_size')) settings.popout_button_size = {};
  let s = settings.popout_button_size;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.popout_button_size._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popout_button_size;
  if (!this.IsEnabled(settings)) return "/* Disabled: Pop-out window control buttons height match the title bar size */\n\n";
  let {} = s;
  return `
/* Pop-out window control buttons height match the title bar size */
.VcYsBe, .hA9Mmb .Yfed6d, .C0SIVb .Yfed6d {
  height: 100% !important;
  width: ${settings.popout_title_height.height}px !important;  /* @1=settings.popout_title_height.height */
  margin: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popout_button_size;
  return `
  <li>
  <input type=checkbox name=chat_popout_button_size_enabled id=chat_popout_button_size_enabled _site=chat _section_id="popout_button_size" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popout_button_size_enabled> Pop-out window control buttons height match the title bar size</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popout_button_size')) settings.popout_button_size = {};
  let s = settings.popout_button_size;
  let e = form.elements;
  s._enabled = e.chat_popout_button_size_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popout_button_size;
  let e = form.elements;
  e.chat_popout_button_size_enabled.checked = s._enabled;

}

};  // end of nested class popout_button_size


///////////////////////////////////////////////////////////
// Functions for mini_window_buttons_stick_to_the_right_border : Mini-window buttons stick to the right border
// Split: no
// Params: 

static mini_window_buttons_stick_to_the_right_border = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('mini_window_buttons_stick_to_the_right_border')) settings.mini_window_buttons_stick_to_the_right_border = {};
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('mini_window_buttons_stick_to_the_right_border')) settings.mini_window_buttons_stick_to_the_right_border = {};
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.mini_window_buttons_stick_to_the_right_border._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  if (!this.IsEnabled(settings)) return "/* Disabled: Mini-window buttons stick to the right border */\n\n";
  let {} = s;
  return `
/* Mini-window buttons stick to the right border */
.tRuV8b .wYx9me {
  margin-right: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  return `
  <li>
  <input type=checkbox name=chat_mini_window_buttons_stick_to_the_right_border_enabled id=chat_mini_window_buttons_stick_to_the_right_border_enabled _site=chat _section_id="mini_window_buttons_stick_to_the_right_border" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_mini_window_buttons_stick_to_the_right_border_enabled> Mini-window buttons stick to the right border</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('mini_window_buttons_stick_to_the_right_border')) settings.mini_window_buttons_stick_to_the_right_border = {};
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  let e = form.elements;
  s._enabled = e.chat_mini_window_buttons_stick_to_the_right_border_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  let e = form.elements;
  e.chat_mini_window_buttons_stick_to_the_right_border_enabled.checked = s._enabled;

}

};  // end of nested class mini_window_buttons_stick_to_the_right_border


///////////////////////////////////////////////////////////
// Functions for timestamps_in_contact_list_are_always_visible : Timestamps in contact list are always visible
// Split: big
// Params: 

static timestamps_in_contact_list_are_always_visible = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('timestamps_in_contact_list_are_always_visible')) settings.timestamps_in_contact_list_are_always_visible = {};
  let s = settings.timestamps_in_contact_list_are_always_visible;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('timestamps_in_contact_list_are_always_visible')) settings.timestamps_in_contact_list_are_always_visible = {};
  let s = settings.timestamps_in_contact_list_are_always_visible;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.timestamps_in_contact_list_are_always_visible._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.timestamps_in_contact_list_are_always_visible;
  if (!this.IsEnabled(settings)) return "/* Disabled: Timestamps in contact list are always visible */\n\n";
  let {} = s;
  return `
/* Timestamps in contact list are always visible */
.sFuxxd {
  display: flex !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.timestamps_in_contact_list_are_always_visible;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_timestamps_in_contact_list_are_always_visible_enabled id=chat_timestamps_in_contact_list_are_always_visible_enabled _site=chat _section_id="timestamps_in_contact_list_are_always_visible" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_timestamps_in_contact_list_are_always_visible_enabled> Timestamps in contact list are always visible</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('timestamps_in_contact_list_are_always_visible')) settings.timestamps_in_contact_list_are_always_visible = {};
  let s = settings.timestamps_in_contact_list_are_always_visible;
  let e = form.elements;
  s._enabled = e.chat_timestamps_in_contact_list_are_always_visible_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.timestamps_in_contact_list_are_always_visible;
  let e = form.elements;
  e.chat_timestamps_in_contact_list_are_always_visible_enabled.checked = s._enabled;

}

};  // end of nested class timestamps_in_contact_list_are_always_visible


///////////////////////////////////////////////////////////
// Functions for contact_list_spaces : Contact list spaces
// Split: minor
// Params: 

static contact_list_spaces = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('contact_list_spaces')) settings.contact_list_spaces = {};
  let s = settings.contact_list_spaces;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('contact_list_spaces')) settings.contact_list_spaces = {};
  let s = settings.contact_list_spaces;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.contact_list_spaces._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.contact_list_spaces;
  if (!this.IsEnabled(settings)) return "/* Disabled: Contact list spaces */\n\n";
  let {} = s;
  return `
/* Contact list spaces */
.n5yyEc {
  margin-right: 0 !important;
}
.Eb3cg {
    padding: 0 !important;
}
[role=listitem], [role=listitem] > * {
  padding: 0 !important;
}
.JwR1Pc,
.yDIlKc .JwR1Pc, .yDIlKc .wR3Nid, .W0hon .JwR1Pc, .W0hon .wR3Nid {
  padding-left: 4px !important;
}
.t5F5nf {
  margin-right: 0 !important;
}
.sFuxxd, .aBtxmc {
  margin-left: 0 !important;
}
.LoYJxb {
  height: 32px !important;
}
.kjWKTd {
    font-size: .65rem !important;
}
.PL5Wwe, .JRtysb {
  border-radius: 0 !important;
}
.V6.CL { /*--contact list headings--*/
  height: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.contact_list_spaces;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_contact_list_spaces_enabled id=chat_contact_list_spaces_enabled _site=chat _section_id="contact_list_spaces" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_contact_list_spaces_enabled> Contact list spaces</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('contact_list_spaces')) settings.contact_list_spaces = {};
  let s = settings.contact_list_spaces;
  let e = form.elements;
  s._enabled = e.chat_contact_list_spaces_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.contact_list_spaces;
  let e = form.elements;
  e.chat_contact_list_spaces_enabled.checked = s._enabled;

}

};  // end of nested class contact_list_spaces


///////////////////////////////////////////////////////////
// Functions for clearer_contact_list_sections_separator : Clearer contact list sections separator
// Split: no
// Params: 

static clearer_contact_list_sections_separator = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('clearer_contact_list_sections_separator')) settings.clearer_contact_list_sections_separator = {};
  let s = settings.clearer_contact_list_sections_separator;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('clearer_contact_list_sections_separator')) settings.clearer_contact_list_sections_separator = {};
  let s = settings.clearer_contact_list_sections_separator;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.clearer_contact_list_sections_separator._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_contact_list_sections_separator;
  if (!this.IsEnabled(settings)) return "/* Disabled: Clearer contact list sections separator */\n\n";
  let {} = s;
  return `
/* Clearer contact list sections separator */
.WR .Xa .X9 {
  background: linear-gradient(180deg, #E0E0E0 0, #FFF 1rem) !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_contact_list_sections_separator;
  return `
  <li>
  <input type=checkbox name=chat_clearer_contact_list_sections_separator_enabled id=chat_clearer_contact_list_sections_separator_enabled _site=chat _section_id="clearer_contact_list_sections_separator" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_clearer_contact_list_sections_separator_enabled> Clearer contact list sections separator</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('clearer_contact_list_sections_separator')) settings.clearer_contact_list_sections_separator = {};
  let s = settings.clearer_contact_list_sections_separator;
  let e = form.elements;
  s._enabled = e.chat_clearer_contact_list_sections_separator_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.clearer_contact_list_sections_separator;
  let e = form.elements;
  e.chat_clearer_contact_list_sections_separator_enabled.checked = s._enabled;

}

};  // end of nested class clearer_contact_list_sections_separator


///////////////////////////////////////////////////////////
// Functions for compact_layout : Compact layout
// Split: minor
// Params: 

static compact_layout = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_layout')) settings.compact_layout = {};
  let s = settings.compact_layout;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_layout')) settings.compact_layout = {};
  let s = settings.compact_layout;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compact_layout._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_layout;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact layout */\n\n";
  let {} = s;
  return `
/* Compact layout */
@media (max-width: 400px) {
.fh7VDd, .LoYJxb { height: 24px !important; }
.kjWKTd { display: none; }
}
@media (min-width: 680px) {
.fh7VDd, .LoYJxb { height: 24px !important; }
.kjWKTd { display: none; }
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_layout;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_compact_layout_enabled id=chat_compact_layout_enabled _site=chat _section_id="compact_layout" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_compact_layout_enabled> Compact layout</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_layout')) settings.compact_layout = {};
  let s = settings.compact_layout;
  let e = form.elements;
  s._enabled = e.chat_compact_layout_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_layout;
  let e = form.elements;
  e.chat_compact_layout_enabled.checked = s._enabled;

}

};  // end of nested class compact_layout


///////////////////////////////////////////////////////////
// Functions for use_full_page_width : Use full page width
// Split: minor
// Params: 

static use_full_page_width = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('use_full_page_width')) settings.use_full_page_width = {};
  let s = settings.use_full_page_width;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('use_full_page_width')) settings.use_full_page_width = {};
  let s = settings.use_full_page_width;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.use_full_page_width._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.use_full_page_width;
  if (!this.IsEnabled(settings)) return "/* Disabled: Use full page width */\n\n";
  let {} = s;
  return `
/* Use full page width */
.bzJiD .jGyvbd .QIJiHb, .bzJiD .jGyvbd .zX644e {
  max-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.use_full_page_width;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_use_full_page_width_enabled id=chat_use_full_page_width_enabled _site=chat _section_id="use_full_page_width" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_use_full_page_width_enabled> Use full page width</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('use_full_page_width')) settings.use_full_page_width = {};
  let s = settings.use_full_page_width;
  let e = form.elements;
  s._enabled = e.chat_use_full_page_width_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.use_full_page_width;
  let e = form.elements;
  e.chat_use_full_page_width_enabled.checked = s._enabled;

}

};  // end of nested class use_full_page_width


///////////////////////////////////////////////////////////
// Functions for thinner_top_bar : Thinner top bar
// Split: minor
// Params: 

static thinner_top_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('thinner_top_bar')) settings.thinner_top_bar = {};
  let s = settings.thinner_top_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('thinner_top_bar')) settings.thinner_top_bar = {};
  let s = settings.thinner_top_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.thinner_top_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_top_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Thinner top bar */\n\n";
  let {} = s;
  return `
/* Thinner top bar */
[role=banner] {
  height: 48px !important;
}
[role=banner] > * {
  padding: 0 !important;
}
.bn iframe.bl {
  height: calc(100vh - 48px) !important;
}
div.Tm#\:3 {
  height: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_top_bar;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_thinner_top_bar_enabled id=chat_thinner_top_bar_enabled _site=chat _section_id="thinner_top_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_thinner_top_bar_enabled> Thinner top bar</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('thinner_top_bar')) settings.thinner_top_bar = {};
  let s = settings.thinner_top_bar;
  let e = form.elements;
  s._enabled = e.chat_thinner_top_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.thinner_top_bar;
  let e = form.elements;
  e.chat_thinner_top_bar_enabled.checked = s._enabled;

}

};  // end of nested class thinner_top_bar


///////////////////////////////////////////////////////////
// Functions for smaller_paddings_in_chat_dialog : Smaller paddings in chat dialog
// Split: minor
// Params: [padding_top 1 5 Padding Top], [padding_bottom 1 0 Padding Bottom]

static smaller_paddings_in_chat_dialog = class {

static params = ["padding_top", "padding_bottom"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('smaller_paddings_in_chat_dialog')) settings.smaller_paddings_in_chat_dialog = {};
  let s = settings.smaller_paddings_in_chat_dialog;
  s._enabled = true;
  s.padding_top = 5;
  s.padding_bottom = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('smaller_paddings_in_chat_dialog')) settings.smaller_paddings_in_chat_dialog = {};
  let s = settings.smaller_paddings_in_chat_dialog;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 5;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
}

static IsEnabled(settings) {
  return settings.smaller_paddings_in_chat_dialog._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_paddings_in_chat_dialog;
  if (!this.IsEnabled(settings)) return "/* Disabled: Smaller paddings in chat dialog */\n\n";
  let {padding_top, padding_bottom} = s;
  return `
/* Smaller paddings in chat dialog */
c-wiz c-wiz [role=heading] + * {
  padding: 0;
  padding-top: ${padding_top}px;     /* @1 */
  padding-bottom: ${padding_bottom}px;  /* @1 */
}
/*-Follow button sticks to the edge */
.yg4pvb {
  right: 0px;
  top: 0px;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_paddings_in_chat_dialog;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_smaller_paddings_in_chat_dialog_enabled id=chat_smaller_paddings_in_chat_dialog_enabled _site=chat _section_id="smaller_paddings_in_chat_dialog" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_smaller_paddings_in_chat_dialog_enabled> Smaller paddings in chat dialog</label>
  <ul>
    <li><input
      name=chat_smaller_paddings_in_chat_dialog_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_top"
      _default="5"
      ><input
      name=chat_smaller_paddings_in_chat_dialog_padding_top_val
      size=3
      value=${s.padding_top}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_top"
      _default="5"
      > Padding Top
    <li><input
      name=chat_smaller_paddings_in_chat_dialog_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=chat_smaller_paddings_in_chat_dialog_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('smaller_paddings_in_chat_dialog')) settings.smaller_paddings_in_chat_dialog = {};
  let s = settings.smaller_paddings_in_chat_dialog;
  let e = form.elements;
  s._enabled = e.chat_smaller_paddings_in_chat_dialog_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.chat_smaller_paddings_in_chat_dialog_padding_top_val.value))) s.padding_top = 5;
  if (isNaN(s.padding_bottom = parseInt(e.chat_smaller_paddings_in_chat_dialog_padding_bottom_val.value))) s.padding_bottom = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.smaller_paddings_in_chat_dialog;
  let e = form.elements;
  e.chat_smaller_paddings_in_chat_dialog_enabled.checked = s._enabled;
  e.chat_smaller_paddings_in_chat_dialog_padding_top_range.value = e.chat_smaller_paddings_in_chat_dialog_padding_top_val.value = s.padding_top;
  e.chat_smaller_paddings_in_chat_dialog_padding_bottom_range.value = e.chat_smaller_paddings_in_chat_dialog_padding_bottom_val.value = s.padding_bottom;
}

};  // end of nested class smaller_paddings_in_chat_dialog


///////////////////////////////////////////////////////////
// Functions for thinner_reply_bar : Thinner reply bar
// Split: minor
// Params: 

static thinner_reply_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('thinner_reply_bar')) settings.thinner_reply_bar = {};
  let s = settings.thinner_reply_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('thinner_reply_bar')) settings.thinner_reply_bar = {};
  let s = settings.thinner_reply_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.thinner_reply_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_reply_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Thinner reply bar */\n\n";
  let {} = s;
  return `
/* Thinner reply bar */
[aria-label=Reply],
[aria-label=Reply] *,
[aria-label=Reply] + *,
[aria-label=Reply] + * *,
[aria-label="Jump to messages"] + * *  /*- this one for personal chats. another option: [aria-label^="In conversation"]... */
{
    min-height: 0px !important;
    margin: auto 0 !important;
    padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_reply_bar;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_thinner_reply_bar_enabled id=chat_thinner_reply_bar_enabled _site=chat _section_id="thinner_reply_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_thinner_reply_bar_enabled> Thinner reply bar</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('thinner_reply_bar')) settings.thinner_reply_bar = {};
  let s = settings.thinner_reply_bar;
  let e = form.elements;
  s._enabled = e.chat_thinner_reply_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.thinner_reply_bar;
  let e = form.elements;
  e.chat_thinner_reply_bar_enabled.checked = s._enabled;

}

};  // end of nested class thinner_reply_bar


///////////////////////////////////////////////////////////
// Functions for chat_spaces : Chat spaces
// Split: minor
// Params: 

static chat_spaces = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('chat_spaces')) settings.chat_spaces = {};
  let s = settings.chat_spaces;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('chat_spaces')) settings.chat_spaces = {};
  let s = settings.chat_spaces;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.chat_spaces._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.chat_spaces;
  if (!this.IsEnabled(settings)) return "/* Disabled: Chat spaces */\n\n";
  let {} = s;
  return `
/* Chat spaces */
.Bl2pUd, .jGyvbd, .YJxKBc, .NGoCob, .Hj5Fxb,
.byY7Yb, .XganBc {
    padding: 0 !important;
    margin: 0 !important;
}
.WQKmIb .auHzcc, .WQKmIb .RPExGf, .WQKmIb .IEIJqd,
.cFc9ae, .MiRdyc, .zX644e {
    max-width: unset !important;
}
.dJ9vNe, .I0LFzc {
    border-radius: 0 !important;
}
@media (max-width: 679px)
.auHzcc, .RPExGf, .BEjUKc .cFc9ae {
    padding: 0 !important;
    margin: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.chat_spaces;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_chat_spaces_enabled id=chat_chat_spaces_enabled _site=chat _section_id="chat_spaces" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_chat_spaces_enabled> Chat spaces</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('chat_spaces')) settings.chat_spaces = {};
  let s = settings.chat_spaces;
  let e = form.elements;
  s._enabled = e.chat_chat_spaces_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.chat_spaces;
  let e = form.elements;
  e.chat_chat_spaces_enabled.checked = s._enabled;

}

};  // end of nested class chat_spaces


///////////////////////////////////////////////////////////
// Functions for hide_meaningless_image_for_video_chat_invitation : Hide meaningless image for video chat invitation
// Split: minor
// Params: 

static hide_meaningless_image_for_video_chat_invitation = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('hide_meaningless_image_for_video_chat_invitation')) settings.hide_meaningless_image_for_video_chat_invitation = {};
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('hide_meaningless_image_for_video_chat_invitation')) settings.hide_meaningless_image_for_video_chat_invitation = {};
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.hide_meaningless_image_for_video_chat_invitation._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  if (!this.IsEnabled(settings)) return "/* Disabled: Hide meaningless image for video chat invitation */\n\n";
  let {} = s;
  return `
/* Hide meaningless image for video chat invitation */
a[aria-label="Join video meeting, Video Call."] > :first-child {
    display: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_hide_meaningless_image_for_video_chat_invitation_enabled id=chat_hide_meaningless_image_for_video_chat_invitation_enabled _site=chat _section_id="hide_meaningless_image_for_video_chat_invitation" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_hide_meaningless_image_for_video_chat_invitation_enabled> Hide meaningless image for video chat invitation</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('hide_meaningless_image_for_video_chat_invitation')) settings.hide_meaningless_image_for_video_chat_invitation = {};
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  let e = form.elements;
  s._enabled = e.chat_hide_meaningless_image_for_video_chat_invitation_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  let e = form.elements;
  e.chat_hide_meaningless_image_for_video_chat_invitation_enabled.checked = s._enabled;

}

};  // end of nested class hide_meaningless_image_for_video_chat_invitation


///////////////////////////////////////////////////////////
// Functions for reactions_are_in_a_convenient_spot : Reactions are in a convenient spot
// Split: big
// Params: [left 3 200 Left]

static reactions_are_in_a_convenient_spot = class {

static params = ["left"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reactions_are_in_a_convenient_spot')) settings.reactions_are_in_a_convenient_spot = {};
  let s = settings.reactions_are_in_a_convenient_spot;
  s._enabled = true;
  s.left = 200;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reactions_are_in_a_convenient_spot')) settings.reactions_are_in_a_convenient_spot = {};
  let s = settings.reactions_are_in_a_convenient_spot;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('left')) s.left = 200;
}

static IsEnabled(settings) {
  return settings.reactions_are_in_a_convenient_spot._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reactions_are_in_a_convenient_spot;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reactions are in a convenient spot */\n\n";
  let {left} = s;
  return `
/* Reactions are in a convenient spot */
.SFMExc {
    flex-direction: row-reverse;
    justify-content: flex-end;
    x-start;
}

.HO0hcf {
  right: unset !important;
  top: -28px !important;
  left: min(calc(100vw - 138px), ${left}px);  /* @3 */
}
div.HO0hcf::before {
  width: 0 !important;
}

.cmEq8b .xHWT7d {
  opacity: 1 !important;
}

/*-script.js */

/*-TODO: Add "Automatic history ON" capability */
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reactions_are_in_a_convenient_spot;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_reactions_are_in_a_convenient_spot_enabled id=chat_reactions_are_in_a_convenient_spot_enabled _site=chat _section_id="reactions_are_in_a_convenient_spot" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_reactions_are_in_a_convenient_spot_enabled> Reactions are in a convenient spot</label>
  <ul>
    <li><input
      name=chat_reactions_are_in_a_convenient_spot_left_range
      type=range
      min=0
      max=1000
      value=${s.left}
      _site=chat
      _section_id="reactions_are_in_a_convenient_spot"
      _setting_id="left"
      _default="200"
      ><input
      name=chat_reactions_are_in_a_convenient_spot_left_val
      size=3
      value=${s.left}
      _site=chat
      _section_id="reactions_are_in_a_convenient_spot"
      _setting_id="left"
      _default="200"
      > Left
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reactions_are_in_a_convenient_spot')) settings.reactions_are_in_a_convenient_spot = {};
  let s = settings.reactions_are_in_a_convenient_spot;
  let e = form.elements;
  s._enabled = e.chat_reactions_are_in_a_convenient_spot_enabled.checked;
  if (isNaN(s.left = parseInt(e.chat_reactions_are_in_a_convenient_spot_left_val.value))) s.left = 200;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reactions_are_in_a_convenient_spot;
  let e = form.elements;
  e.chat_reactions_are_in_a_convenient_spot_enabled.checked = s._enabled;
  e.chat_reactions_are_in_a_convenient_spot_left_range.value = e.chat_reactions_are_in_a_convenient_spot_left_val.value = s.left;
}

};  // end of nested class reactions_are_in_a_convenient_spot


///////////////////////////////////////////////////////////
// Interface functions

static id = "chat";
static fields = ["dark_mode", "no_animations", "popup", "popup_embedded_only", "links_new_tab", "popout_title_height", "popout_button_size", "mini_window_buttons_stick_to_the_right_border", "timestamps_in_contact_list_are_always_visible", "contact_list_spaces", "clearer_contact_list_sections_separator", "compact_layout", "use_full_page_width", "thinner_top_bar", "smaller_paddings_in_chat_dialog", "thinner_reply_bar", "chat_spaces", "hide_meaningless_image_for_video_chat_invitation", "reactions_are_in_a_convenient_spot"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module chat disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.popup.GenStyle(settings) +
  this.popup_embedded_only.GenStyle(settings) +
  this.links_new_tab.GenStyle(settings) +
  this.popout_title_height.GenStyle(settings) +
  this.popout_button_size.GenStyle(settings) +
  this.mini_window_buttons_stick_to_the_right_border.GenStyle(settings) +
  this.timestamps_in_contact_list_are_always_visible.GenStyle(settings) +
  this.contact_list_spaces.GenStyle(settings) +
  this.clearer_contact_list_sections_separator.GenStyle(settings) +
  this.compact_layout.GenStyle(settings) +
  this.use_full_page_width.GenStyle(settings) +
  this.thinner_top_bar.GenStyle(settings) +
  this.smaller_paddings_in_chat_dialog.GenStyle(settings) +
  this.thinner_reply_bar.GenStyle(settings) +
  this.chat_spaces.GenStyle(settings) +
  this.hide_meaningless_image_for_video_chat_invitation.GenStyle(settings) +
  this.reactions_are_in_a_convenient_spot.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.popup.GenScriptUrls(settings),
    ...this.popup_embedded_only.GenScriptUrls(settings),
    ...this.links_new_tab.GenScriptUrls(settings),
    ...this.popout_title_height.GenScriptUrls(settings),
    ...this.popout_button_size.GenScriptUrls(settings),
    ...this.mini_window_buttons_stick_to_the_right_border.GenScriptUrls(settings),
    ...this.timestamps_in_contact_list_are_always_visible.GenScriptUrls(settings),
    ...this.contact_list_spaces.GenScriptUrls(settings),
    ...this.clearer_contact_list_sections_separator.GenScriptUrls(settings),
    ...this.compact_layout.GenScriptUrls(settings),
    ...this.use_full_page_width.GenScriptUrls(settings),
    ...this.thinner_top_bar.GenScriptUrls(settings),
    ...this.smaller_paddings_in_chat_dialog.GenScriptUrls(settings),
    ...this.thinner_reply_bar.GenScriptUrls(settings),
    ...this.chat_spaces.GenScriptUrls(settings),
    ...this.hide_meaningless_image_for_video_chat_invitation.GenScriptUrls(settings),
    ...this.reactions_are_in_a_convenient_spot.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.popup.GetScript(settings),
    this.popup_embedded_only.GetScript(settings),
    this.links_new_tab.GetScript(settings),
    this.popout_title_height.GetScript(settings),
    this.popout_button_size.GetScript(settings),
    this.mini_window_buttons_stick_to_the_right_border.GetScript(settings),
    this.timestamps_in_contact_list_are_always_visible.GetScript(settings),
    this.contact_list_spaces.GetScript(settings),
    this.clearer_contact_list_sections_separator.GetScript(settings),
    this.compact_layout.GetScript(settings),
    this.use_full_page_width.GetScript(settings),
    this.thinner_top_bar.GetScript(settings),
    this.smaller_paddings_in_chat_dialog.GetScript(settings),
    this.thinner_reply_bar.GetScript(settings),
    this.chat_spaces.GetScript(settings),
    this.hide_meaningless_image_for_video_chat_invitation.GetScript(settings),
    this.reactions_are_in_a_convenient_spot.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.popup.SetDefaults(settings);
  this.popup_embedded_only.SetDefaults(settings);
  this.links_new_tab.SetDefaults(settings);
  this.popout_title_height.SetDefaults(settings);
  this.popout_button_size.SetDefaults(settings);
  this.mini_window_buttons_stick_to_the_right_border.SetDefaults(settings);
  this.timestamps_in_contact_list_are_always_visible.SetDefaults(settings);
  this.contact_list_spaces.SetDefaults(settings);
  this.clearer_contact_list_sections_separator.SetDefaults(settings);
  this.compact_layout.SetDefaults(settings);
  this.use_full_page_width.SetDefaults(settings);
  this.thinner_top_bar.SetDefaults(settings);
  this.smaller_paddings_in_chat_dialog.SetDefaults(settings);
  this.thinner_reply_bar.SetDefaults(settings);
  this.chat_spaces.SetDefaults(settings);
  this.hide_meaningless_image_for_video_chat_invitation.SetDefaults(settings);
  this.reactions_are_in_a_convenient_spot.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.popup.GenSettingsUi(settings) +
  this.popup_embedded_only.GenSettingsUi(settings) +
  this.links_new_tab.GenSettingsUi(settings) +
  this.popout_title_height.GenSettingsUi(settings) +
  this.popout_button_size.GenSettingsUi(settings) +
  this.mini_window_buttons_stick_to_the_right_border.GenSettingsUi(settings) +
  this.timestamps_in_contact_list_are_always_visible.GenSettingsUi(settings) +
  this.contact_list_spaces.GenSettingsUi(settings) +
  this.clearer_contact_list_sections_separator.GenSettingsUi(settings) +
  this.compact_layout.GenSettingsUi(settings) +
  this.use_full_page_width.GenSettingsUi(settings) +
  this.thinner_top_bar.GenSettingsUi(settings) +
  this.smaller_paddings_in_chat_dialog.GenSettingsUi(settings) +
  this.thinner_reply_bar.GenSettingsUi(settings) +
  this.chat_spaces.GenSettingsUi(settings) +
  this.hide_meaningless_image_for_video_chat_invitation.GenSettingsUi(settings) +
  this.reactions_are_in_a_convenient_spot.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.popup.ImportSettingsFromForm(form, settings);
  this.popup_embedded_only.ImportSettingsFromForm(form, settings);
  this.links_new_tab.ImportSettingsFromForm(form, settings);
  this.popout_title_height.ImportSettingsFromForm(form, settings);
  this.popout_button_size.ImportSettingsFromForm(form, settings);
  this.mini_window_buttons_stick_to_the_right_border.ImportSettingsFromForm(form, settings);
  this.timestamps_in_contact_list_are_always_visible.ImportSettingsFromForm(form, settings);
  this.contact_list_spaces.ImportSettingsFromForm(form, settings);
  this.clearer_contact_list_sections_separator.ImportSettingsFromForm(form, settings);
  this.compact_layout.ImportSettingsFromForm(form, settings);
  this.use_full_page_width.ImportSettingsFromForm(form, settings);
  this.thinner_top_bar.ImportSettingsFromForm(form, settings);
  this.smaller_paddings_in_chat_dialog.ImportSettingsFromForm(form, settings);
  this.thinner_reply_bar.ImportSettingsFromForm(form, settings);
  this.chat_spaces.ImportSettingsFromForm(form, settings);
  this.hide_meaningless_image_for_video_chat_invitation.ImportSettingsFromForm(form, settings);
  this.reactions_are_in_a_convenient_spot.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.popup.ApplySettingsToForm(settings, form);
  this.popup_embedded_only.ApplySettingsToForm(settings, form);
  this.links_new_tab.ApplySettingsToForm(settings, form);
  this.popout_title_height.ApplySettingsToForm(settings, form);
  this.popout_button_size.ApplySettingsToForm(settings, form);
  this.mini_window_buttons_stick_to_the_right_border.ApplySettingsToForm(settings, form);
  this.timestamps_in_contact_list_are_always_visible.ApplySettingsToForm(settings, form);
  this.contact_list_spaces.ApplySettingsToForm(settings, form);
  this.clearer_contact_list_sections_separator.ApplySettingsToForm(settings, form);
  this.compact_layout.ApplySettingsToForm(settings, form);
  this.use_full_page_width.ApplySettingsToForm(settings, form);
  this.thinner_top_bar.ApplySettingsToForm(settings, form);
  this.smaller_paddings_in_chat_dialog.ApplySettingsToForm(settings, form);
  this.thinner_reply_bar.ApplySettingsToForm(settings, form);
  this.chat_spaces.ApplySettingsToForm(settings, form);
  this.hide_meaningless_image_for_video_chat_invitation.ApplySettingsToForm(settings, form);
  this.reactions_are_in_a_convenient_spot.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://mail.google.com/chat/*", "*://chat.google.com/*", "*://mail.google.com/sharing/*"];

} // end of global class chat
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class contacts {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: no
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
body {
  background: #FFF;
}
img, video, [style*="background-image:"] {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `
  <li>
  <input type=checkbox name=contacts_dark_mode_enabled id=contacts_dark_mode_enabled _site=contacts _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=contacts_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.contacts_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.contacts_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=contacts_no_animations_enabled id=contacts_no_animations_enabled _site=contacts _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=contacts_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.contacts_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.contacts_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for no_overflow : Display full strings
// Split: big
// Params: 

static no_overflow = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_overflow._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  if (!this.IsEnabled(settings)) return "/* Disabled: Display full strings */\n\n";
  let {} = s;
  return `
/* Display full strings */
* {
  text-overflow: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  return `  <li><hr>
  <li>
  <input type=checkbox name=contacts_no_overflow_enabled id=contacts_no_overflow_enabled _site=contacts _section_id="no_overflow" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=contacts_no_overflow_enabled> Display full strings</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  let e = form.elements;
  s._enabled = e.contacts_no_overflow_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  let e = form.elements;
  e.contacts_no_overflow_enabled.checked = s._enabled;

}

};  // end of nested class no_overflow


///////////////////////////////////////////////////////////
// Interface functions

static id = "contacts";
static fields = ["dark_mode", "no_animations", "no_overflow"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module contacts disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.no_overflow.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.no_overflow.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.no_overflow.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.no_overflow.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.no_overflow.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.no_overflow.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.no_overflow.ApplySettingsToForm(settings, form);
}


static has_scripts = 0;

static descr = `Contacts hover cards for various internal sites.`;

static urls = ["*://contacts.google.com/*"];

} // end of global class contacts
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class jamboard {
///////////////////////////////////////////////////////////
// Functions for script : Add hotkeys
// Split: no
// Params: 

static script = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('script')) settings.script = {};
  let s = settings.script;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('script')) settings.script = {};
  let s = settings.script;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.script._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.script;
  if (!this.IsEnabled(settings)) return "/* Disabled: Add hotkeys */\n\n";
  let {} = s;
  return `
/* Add hotkeys */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["script.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
// @script Add hotkeys

function MouseEv(type, element) {
  let ev = new MouseEvent(type, {
    altKey: false,
    bubbles: true,
    button: 0,
    buttons: 0,
    cancelBubble: false,
    cancelable: true,
    clientX: 595,
    clientY: 264,
    composed: true,
    ctrlKey: false,
    currentTarget: null,
    defaultPrevented: true,
    detail: 1,
    eventPhase: 0,
    fromElement: null,
    isTrusted: true,
    kI: 0,
    layerX: 250,
    layerY: 19,
    metaKey: false,
    movementX: 0,
    movementY: 0,
    now: 4190267.433,
    offsetX: 251,
    offsetY: 20,
    pageX: 595,
    pageY: 264,
    path: [...(function*(e){do { yield e; } while (e = e.parentNode);})(element)],
    relatedTarget: null,
    returnValue: false,
    screenX: 595,
    screenY: 399,
    shiftKey: false,
    srcElement: element,
    target: element,
    timeStamp: 4190250.480000017,
    toElement: element,
    type: type,
    view: window,
    which: 1,
    x: 595,
    y: 264,
  });
  Object.defineProperty(ev, 'target', {value: element, enumerable: true});
  Object.defineProperty(ev, 'currentTarget', {value: element, enumerable: true});
  Object.defineProperty(ev, 'relatedTarget', {value: element, enumerable: true});
  Object.defineProperty(ev, 'toElement', {value: element, enumerable: true});
  Object.defineProperty(ev, 'fromElement', {value: element, enumerable: true});
  Object.defineProperty(ev, 'srcElement', {value: element, enumerable: true});
  Object.defineProperty(ev, 'path', {value: [...(function*(e){do { yield e; } while (e = e.parentNode);})(element)], enumerable: true});
  return ev;
}

function click(e) {
  ["mousedown", "click", "mouseup"].forEach(t => e.dispatchEvent(MouseEv(t, e)));
}

var keys = {
  Digit1: "drawingButton",
  Digit2: "eraserButton",
  Digit3: "selectorButton",
  Digit4: "stickyNoteButton",
  Digit5: "imageButton",
  Digit6: "shapeButton",
  Digit7: "textBoxButton",
  Digit8: "laserButton",

  KeyP: "drawingButton",
  KeyB: "drawingButton",
  KeyE: "eraserButton",
  KeyH: "selectorButton",
  KeyN: "stickyNoteButton",
  KeyI: "imageButton",
  KeyS: "shapeButton",
  KeyT: "textBoxButton",
  KeyL: "laserButton",
};

var rkeys = Object.entries(keys)
  .map(([k,v]) => [k.replace(/^Key|Digit/, "").toLowerCase(),v])
  .reduce((a, [k,v]) => ((a[v]=a[v] ? [...a[v], k] : [k]), a), {});



/* Add keybord handlers */
[document, document.querySelector(`iframe.docs-texteventtarget-iframe`).contentWindow.document].forEach(d => {
  d.addEventListener("keypress", ev => {
    if (["INPUT", "LABEL", "SELECT", "TEXTAREA", "BUTTON", "FIELDSET", "LEGEND", "DATALIST", "OUTPUT", "OPTION", "OPTGROUP", ].includes(document.activeElement.tagName)) return;
    let id = keys[ev.code];
    if (!id) return;
    click(document.getElementById(id));
    ev.preventDefault();
  });
});

/* Add shortcut notes */
document.head.insertAdjacentHTML("beforeEnd", `<style id="hotkey">
.hotkey {
  position: absolute;
  left: -2px;
  top: -3px;
  color: #0008;
  z-index: 1000;
  text-shadow:
     0.5px  0.5px 1px white,
    -0.5px  0.5px 1px white,
     0.5px -0.5px 1px white,
    -0.5px -0.5px 1px white;
  font-size: 90%;
}
div[aria-pressed="true"] .hotkey {
  color: #000;
}
</style>`);
Object.entries(rkeys).forEach(mapping => {
  let [id, keys] = mapping;
  keys = keys.join("&nbsp; ");
  document.getElementById(id).insertAdjacentHTML("afterBegin",
    `<div class=hotkey title="${id.replace(/Button$/, "")} shortcuts: ${keys}">${keys}</div>`);
});

/* Hotkey autohide */
//document.head.insertAdjacentHTML("beforeEnd", `<style id="hotkeyautohide">
//.hotkey {
//  display: none;
//}
//.jam-vertical-toolbar:hover .hotkey {
//  display: block;
//}
//</style>`);

/* Hotkeys in tooltips */
document.head.insertAdjacentHTML("beforeEnd", `<style id="tooltip-hotkey">
.tooltip-hotkey {
  font-size: 85%;
  opacity: 60%;
}
</style>`);
var tooltip_t = 0;
var toolbar = document.getElementById("jam-vertical-toolbar");
var observer = new MutationObserver(()=>{
  observer.takeRecords();
  clearTimeout(tooltip_t);
  tooltip_t = setTimeout(OnTooltipDisplay, 800);
});
observer.observe(toolbar, {attributes: true});
var observer2;
function OnTooltipDisplay() {
  if (!toolbar.hasAttribute("aria-activedescendant")) return;
  let id = toolbar.getAttribute("aria-activedescendant");
  let keys = rkeys[id];
  if (!keys) return;
  let tooltip = document.querySelector(".jam-vertical-toolbar-tooltip[role=tooltip]:not(.jfk-tooltip-hide) > .jfk-tooltip-contentId");
  if (!tooltip) return;
  tooltip.insertAdjacentHTML("beforeEnd", "<BR><span class=tooltip-hotkey>Hotkeys: "+keys.map(k => `"${k}"`).join(" or ")+"</span>");
  if (!observer2) {
    observer2 = new MutationObserver(()=>{
      OnTooltipDisplay();
      observer2.takeRecords();
    });
    observer2.observe(tooltip, {attributes: true, subtree: true, childList: true, characterData: true});

    observer.disconnect();
    observer = undefined;
  }
}
[...document.querySelectorAll(".jam-vertical-toolbar .hotkey")].forEach(e => e.removeAttribute("title"));



  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.script;
  return `
  <li has_script>
  <input type=checkbox name=jamboard_script_enabled id=jamboard_script_enabled _site=jamboard _section_id="script" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=jamboard_script_enabled> Add hotkeys</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('script')) settings.script = {};
  let s = settings.script;
  let e = form.elements;
  s._enabled = e.jamboard_script_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.script;
  let e = form.elements;
  e.jamboard_script_enabled.checked = s._enabled;

}

};  // end of nested class script


///////////////////////////////////////////////////////////
// Interface functions

static id = "jamboard";
static fields = ["script"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module jamboard disabled */";
  return ""+
  this.script.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.script.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.script.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.script.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.script.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.script.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.script.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://jamboard.google.com/*"];

} // end of global class jamboard
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class groups {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
  -webkit-filter: invert(100%) hue-rotate(180deg) !important;
  background-color: white;
}
video {
  -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=groups_dark_mode_enabled id=groups_dark_mode_enabled _site=groups _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.groups_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.groups_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for dark_mode_img : ... but keep images uninverted
// Split: no
// Params: 

static dark_mode_img = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode_img')) settings.dark_mode_img = {};
  let s = settings.dark_mode_img;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode_img')) settings.dark_mode_img = {};
  let s = settings.dark_mode_img;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  // Dependant on Dark Mode
  if (!settings.dark_mode_img._enabled) return false;
  if (settings.dark_mode && !settings.dark_mode._enabled) return false;
  return true;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode_img;
  if (!this.IsEnabled(settings)) return "/* Disabled: ... but keep images uninverted */\n\n";
  let {} = s;
  return `
/* ... but keep images uninverted */
@media screen {
img:not([src^="https://fonts.gstatic.com/"]), [style*="background-image:"] {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode_img;
  return `
  <li>
  <input type=checkbox name=groups_dark_mode_img_enabled id=groups_dark_mode_img_enabled _site=groups _section_id="dark_mode_img" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_dark_mode_img_enabled> ... but keep images uninverted</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode_img')) settings.dark_mode_img = {};
  let s = settings.dark_mode_img;
  let e = form.elements;
  s._enabled = e.groups_dark_mode_img_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode_img;
  let e = form.elements;
  e.groups_dark_mode_img_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode_img


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: minor
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=groups_no_animations_enabled id=groups_no_animations_enabled _site=groups _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.groups_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.groups_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for compact_conversations_list : Compact conversations list
// Split: big
// Params: [height 1 22 Line height]

static compact_conversations_list = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_conversations_list')) settings.compact_conversations_list = {};
  let s = settings.compact_conversations_list;
  s._enabled = true;
  s.height = 22;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_conversations_list')) settings.compact_conversations_list = {};
  let s = settings.compact_conversations_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 22;
}

static IsEnabled(settings) {
  return settings.compact_conversations_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_conversations_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact conversations list */\n\n";
  let {height} = s;
  return `
/* Compact conversations list */
[aria-label="Conversations List"] [jsshadow] [jsslot] [data-rowid] {
  min-height: 0 !important;
  height: ${height}px;  /* @1 Line height */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_conversations_list;
  return `  <li><hr>
  <li>
  <input type=checkbox name=groups_compact_conversations_list_enabled id=groups_compact_conversations_list_enabled _site=groups _section_id="compact_conversations_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_compact_conversations_list_enabled> Compact conversations list</label>
  <ul>
    <li><input
      name=groups_compact_conversations_list_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=groups
      _section_id="compact_conversations_list"
      _setting_id="height"
      _default="22"
      ><input
      name=groups_compact_conversations_list_height_val
      size=3
      value=${s.height}
      _site=groups
      _section_id="compact_conversations_list"
      _setting_id="height"
      _default="22"
      > Line height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_conversations_list')) settings.compact_conversations_list = {};
  let s = settings.compact_conversations_list;
  let e = form.elements;
  s._enabled = e.groups_compact_conversations_list_enabled.checked;
  if (isNaN(s.height = parseInt(e.groups_compact_conversations_list_height_val.value))) s.height = 22;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_conversations_list;
  let e = form.elements;
  e.groups_compact_conversations_list_enabled.checked = s._enabled;
  e.groups_compact_conversations_list_height_range.value = e.groups_compact_conversations_list_height_val.value = s.height;
}

};  // end of nested class compact_conversations_list


///////////////////////////////////////////////////////////
// Functions for print_layout : Print / Conversaion layout button <img src=groups/print-24px.svg width=20>
// Split: big
// Params: [font_size 1 14 Print view font size]

static print_layout = class {

static params = ["font_size"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('print_layout')) settings.print_layout = {};
  let s = settings.print_layout;
  s._enabled = true;
  s.font_size = 14;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('print_layout')) settings.print_layout = {};
  let s = settings.print_layout;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('font_size')) s.font_size = 14;
}

static IsEnabled(settings) {
  return settings.print_layout._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.print_layout;
  if (!this.IsEnabled(settings)) return "/* Disabled: Print / Conversaion layout button <img src=groups/print-24px.svg width=20> */\n\n";
  let {font_size} = s;
  return `
/* Print / Conversaion layout button <img src=groups/print-24px.svg width=20> */
:root {
  --print-font-size: ${font_size}px;  /* @1 @font_size Print view font size */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["script.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
function AddPrintPutton() {
  let e = document.querySelector(`[aria-label="Settings"]`).parentElement.parentElement;
  let e2 = e.cloneNode();
  let button = document.createElement("button");
  button.style.border = "none";
  button.setAttribute("print-layout", "");
  button.setAttribute("title", "Conversation view / Print layout");
  let img = document.createElement("img"); img.src = "https://fonts.gstatic.com/s/i/googlematerialicons/print/v11/24px.svg";
  e2.appendChild(button);
  button.appendChild(img);
  e.insertAdjacentElement("beforeBegin", e2);
  button.onclick = () => {
    ExpandConversation();
    Print();
  };
}

function ExpandConversation() {
  document.querySelector(`div[aria-label="Expand all"]`)?.click();
}

function Print() {
  if (!document.querySelector(`c-wiz:not([style*="display: none"]) > c-wiz [role=list] > section`)) {
    alert("Go to a conversation view for a print view");
    return;
  }

  var myPolicy = trustedTypes.createPolicy('myPolicy', {createHTML: (string, sink) => string});
  function HTML(txt) { return myPolicy.createHTML(txt); }

  let w = window.open("about:blank", "_blank", "toolbar=no,scrollbars=yes,menubar=no");

  let list = document.querySelector(`c-wiz:not([style*="display: none"]) > c-wiz [role=list]`);
  let heading = list.parentElement.parentElement.querySelector("h1");

  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<base href="${location.href}">`));
  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<title>${heading.innerText}</title>`));
  window.modsettings.dark_mode._enabled && w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<style>
@media screen {
html {
  filter: invert(100%) hue-rotate(180deg) !important;
  background-color: white;
}
img {
  filter: hue-rotate(-180deg) invert(100%) !important;
}
}
</style>`));
  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<style>
* {
  overscroll-behavior: none;
}
body {
  font-family: Roboto, sans-serif;
  font-size: ${window?.modsettings?.print_layout?.font_size || 14}px;
}
</style>`));

  w.document.body.insertAdjacentHTML("beforeEnd", HTML(`<a href="${location.href}">${location.href}</a>`));
  w.document.body.append(heading.cloneNode(true));

  let e = list.cloneNode(true);
  // Remove "to"
  [...e.querySelectorAll("section[role=listitem] > div > div > div > div > div > span")].forEach(e => e.remove());
  // Remove per-message buttons
  [...e.querySelectorAll(`div[role=button][aria-label="Reply all"]`)].forEach(e => { e.previousSibling.remove(); e.nextSibling.remove(); e.remove(); });
  // Remove replies and signatures
  [...e.querySelectorAll("section[role=listitem] > * > * > * > * > html-blob:first-of-type")].forEach(e => {while (e.nextSibling) e.nextSibling.remove();});
  [...e.querySelectorAll("[data-smartmail=gmail_signature]")].forEach(e => {
    // Avoid removing all of it in case there is nothing else. Don't leave empty message.
    let blob = e.closest("html-blob");
    blob && blob.innerText.replace(/[\r\n\t ]/g, "") !== e.innerText.replace(/[\r\n\t ]/g, "") && e.remove();
  });

  let style = `
/* Author avatar on the left */
.${e.querySelector("section > div > div").classList[0]} {
  display: flex;
}
/* Author name inline */
.${e.querySelector("section h3").classList[0]} {
  display: inline;
}
/* Name and date in line */
.${e.querySelector("section h3").parentElement.parentElement.classList[0]} {
  display: flex;
  justify-content: space-between;  /* Date sticks to the right */
}
/* Date sticks to the right */
.${e.querySelector("section > div > div").children[1].classList[0]} {
  flex-grow: 1;
}
/* Hide "short date" */
.${e.querySelector("section h3").parentElement.nextElementSibling.children[1].classList[0]} {
  display: none;
}
/* Space before date */
.${e.querySelector("section h3").parentElement.nextElementSibling.children[0].classList[0]} {
  margin-left: 1em;
}
/* Messages separator */
section {
  border-bottom: 1px solid #e8eaed;
  padding: 0.5em 0.3em;
}
`;

  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<style>${style}</style>`));

  w.document.body.append(e);
}

AddPrintPutton();


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.print_layout;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=groups_print_layout_enabled id=groups_print_layout_enabled _site=groups _section_id="print_layout" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_print_layout_enabled> Print / Conversaion layout button <img src=groups/print-24px.svg width=20></label>
  <ul>
    <li><input
      name=groups_print_layout_font_size_range
      type=range
      min=0
      max=50
      value=${s.font_size}
      _site=groups
      _section_id="print_layout"
      _setting_id="font_size"
      _default="14"
      ><input
      name=groups_print_layout_font_size_val
      size=3
      value=${s.font_size}
      _site=groups
      _section_id="print_layout"
      _setting_id="font_size"
      _default="14"
      > Print view font size
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('print_layout')) settings.print_layout = {};
  let s = settings.print_layout;
  let e = form.elements;
  s._enabled = e.groups_print_layout_enabled.checked;
  if (isNaN(s.font_size = parseInt(e.groups_print_layout_font_size_val.value))) s.font_size = 14;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.print_layout;
  let e = form.elements;
  e.groups_print_layout_enabled.checked = s._enabled;
  e.groups_print_layout_font_size_range.value = e.groups_print_layout_font_size_val.value = s.font_size;
}

};  // end of nested class print_layout


///////////////////////////////////////////////////////////
// Interface functions

static id = "groups";
static fields = ["dark_mode", "dark_mode_img", "no_animations", "compact_conversations_list", "print_layout"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module groups disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.dark_mode_img.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.compact_conversations_list.GenStyle(settings) +
  this.print_layout.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.dark_mode_img.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.compact_conversations_list.GenScriptUrls(settings),
    ...this.print_layout.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.dark_mode_img.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.compact_conversations_list.GetScript(settings),
    this.print_layout.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.dark_mode_img.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.compact_conversations_list.SetDefaults(settings);
  this.print_layout.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.dark_mode_img.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.compact_conversations_list.GenSettingsUi(settings) +
  this.print_layout.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.dark_mode_img.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.compact_conversations_list.ImportSettingsFromForm(form, settings);
  this.print_layout.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.dark_mode_img.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.compact_conversations_list.ApplySettingsToForm(settings, form);
  this.print_layout.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://groups.google.com/*"];

} // end of global class groups
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class github {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img:not([src^="images/"]):not([src^="//ssl.gstatic.com/ui/"]):not([src^="https://docs.google.com/"]), video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=github_dark_mode_enabled id=github_dark_mode_enabled _site=github _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.github_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.github_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=github_no_animations_enabled id=github_no_animations_enabled _site=github _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.github_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.github_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for underline_links : Underline links
// Split: big
// Params: 

static underline_links = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('underline_links')) settings.underline_links = {};
  let s = settings.underline_links;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('underline_links')) settings.underline_links = {};
  let s = settings.underline_links;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.underline_links._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.underline_links;
  if (!this.IsEnabled(settings)) return "/* Disabled: Underline links */\n\n";
  let {} = s;
  return `
/* Underline links */
a, a.no-underline {
    text-decoration: underline !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.underline_links;
  return `  <li><hr>
  <li>
  <input type=checkbox name=github_underline_links_enabled id=github_underline_links_enabled _site=github _section_id="underline_links" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_underline_links_enabled> Underline links</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('underline_links')) settings.underline_links = {};
  let s = settings.underline_links;
  let e = form.elements;
  s._enabled = e.github_underline_links_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.underline_links;
  let e = form.elements;
  e.github_underline_links_enabled.checked = s._enabled;

}

};  // end of nested class underline_links


///////////////////////////////////////////////////////////
// Functions for wider_menus : Wider menus
// Split: big
// Params: 

static wider_menus = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('wider_menus')) settings.wider_menus = {};
  let s = settings.wider_menus;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('wider_menus')) settings.wider_menus = {};
  let s = settings.wider_menus;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.wider_menus._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.wider_menus;
  if (!this.IsEnabled(settings)) return "/* Disabled: Wider menus */\n\n";
  let {} = s;
  return `
/* Wider menus */
.select-menu-list {
    max-height: 800px !important;
}
.select-menu-modal {
    width: 600px !important;
}
.select-menu-item .css-truncate-overflow {
    max-width: 450px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.wider_menus;
  return `  <li><hr>
  <li>
  <input type=checkbox name=github_wider_menus_enabled id=github_wider_menus_enabled _site=github _section_id="wider_menus" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_wider_menus_enabled> Wider menus</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('wider_menus')) settings.wider_menus = {};
  let s = settings.wider_menus;
  let e = form.elements;
  s._enabled = e.github_wider_menus_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.wider_menus;
  let e = form.elements;
  e.github_wider_menus_enabled.checked = s._enabled;

}

};  // end of nested class wider_menus


///////////////////////////////////////////////////////////
// Functions for ignore_ws : Ignore whitespace in diffs by default
// Split: big
// Params: 

static ignore_ws = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('ignore_ws')) settings.ignore_ws = {};
  let s = settings.ignore_ws;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('ignore_ws')) settings.ignore_ws = {};
  let s = settings.ignore_ws;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.ignore_ws._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.ignore_ws;
  if (!this.IsEnabled(settings)) return "/* Disabled: Ignore whitespace in diffs by default */\n\n";
  let {} = s;
  return `
/* Ignore whitespace in diffs by default */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["always-ignore-whitespace-diff.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
setTimeout(()=>[...document.querySelectorAll('a[href$="/files"], a[href*="/commits/"')].forEach(e => {
  if (e.href.includes("w=1")) return;
  let ch = e.href.includes("?") ? "&" : "?";
  e.setAttribute("href", `${e.getAttribute("href")}${ch}w=1`);
})
, 1000);
  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.ignore_ws;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_ignore_ws_enabled id=github_ignore_ws_enabled _site=github _section_id="ignore_ws" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_ignore_ws_enabled> Ignore whitespace in diffs by default</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('ignore_ws')) settings.ignore_ws = {};
  let s = settings.ignore_ws;
  let e = form.elements;
  s._enabled = e.github_ignore_ws_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.ignore_ws;
  let e = form.elements;
  e.github_ignore_ws_enabled.checked = s._enabled;

}

};  // end of nested class ignore_ws


///////////////////////////////////////////////////////////
// Functions for auto_expand_matches : Auto expand more matches
// Split: big
// Params: 

static auto_expand_matches = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('auto_expand_matches')) settings.auto_expand_matches = {};
  let s = settings.auto_expand_matches;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('auto_expand_matches')) settings.auto_expand_matches = {};
  let s = settings.auto_expand_matches;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.auto_expand_matches._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.auto_expand_matches;
  if (!this.IsEnabled(settings)) return "/* Disabled: Auto expand more matches */\n\n";
  let {} = s;
  return `
/* Auto expand more matches */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["auto-expand-more-matches.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
setTimeout(()=>
[...document.querySelectorAll('a')].filter(e => e.innerText.match(/^Show \d+ more matches$/)).forEach(e => e.click())
, 400);
  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.auto_expand_matches;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_auto_expand_matches_enabled id=github_auto_expand_matches_enabled _site=github _section_id="auto_expand_matches" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_auto_expand_matches_enabled> Auto expand more matches</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('auto_expand_matches')) settings.auto_expand_matches = {};
  let s = settings.auto_expand_matches;
  let e = form.elements;
  s._enabled = e.github_auto_expand_matches_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.auto_expand_matches;
  let e = form.elements;
  e.github_auto_expand_matches_enabled.checked = s._enabled;

}

};  // end of nested class auto_expand_matches


///////////////////////////////////////////////////////////
// Functions for load_diffs : Load all diffs with one button
// Split: big
// Params: 

static load_diffs = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('load_diffs')) settings.load_diffs = {};
  let s = settings.load_diffs;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('load_diffs')) settings.load_diffs = {};
  let s = settings.load_diffs;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.load_diffs._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.load_diffs;
  if (!this.IsEnabled(settings)) return "/* Disabled: Load all diffs with one button */\n\n";
  let {} = s;
  return `
/* Load all diffs with one button */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["load-all-diffs.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
(()=>{
	let fn = ()=>{
		if (document.querySelector('include-fragment.diff-progressive-loader')) {
			setTimeout(fn, 200);
			return;
		}
    let e = document.querySelector('#Load-All-Diffs');
		if (e) return;
		e = document.querySelector('.diffbar .flex-auto [data-pjax="#repo-content-pjax-container"]');
		if (!e) return;
		e.insertAdjacentHTML("beforeEnd", `<button id="Load-All-Diffs" class="btn-sm btn">Load all diffs</button>`);
		e = document.querySelector('#Load-All-Diffs');
		e.addEventListener("click", ()=> {
			[...document.querySelectorAll('button.load-diff-button')].forEach(e => e.click());
			e.remove();
		});
	};
	setTimeout(fn, 300);
	document.head.insertAdjacentHTML('beforeEnd', `<style>
.ellipsis-expander[aria-expanded="false"],
.js-review-hidden-comment-ids *,
.js-review-hidden-comment-ids .color-fg-muted,
.js-review-hidden-comment-ids .ajax-pagination-btn,
.ajax-pagination-form .ajax-pagination-btn,
.js-diff-load-container [data-hide-on-error],
#Load-All-Diffs
{
		background-color: #A00 !important;
}
</style>`);
})();

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.load_diffs;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_load_diffs_enabled id=github_load_diffs_enabled _site=github _section_id="load_diffs" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_load_diffs_enabled> Load all diffs with one button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('load_diffs')) settings.load_diffs = {};
  let s = settings.load_diffs;
  let e = form.elements;
  s._enabled = e.github_load_diffs_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.load_diffs;
  let e = form.elements;
  e.github_load_diffs_enabled.checked = s._enabled;

}

};  // end of nested class load_diffs


///////////////////////////////////////////////////////////
// Functions for comments_nav : Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down}
// Split: big
// Params: 

static comments_nav = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('comments_nav')) settings.comments_nav = {};
  let s = settings.comments_nav;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('comments_nav')) settings.comments_nav = {};
  let s = settings.comments_nav;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.comments_nav._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.comments_nav;
  if (!this.IsEnabled(settings)) return "/* Disabled: Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down} */\n\n";
  let {} = s;
  return `
/* Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down} */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["next-prev-comment-keynav.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let scrollPos = ee => [...(function*(e){do { yield e; } while (e = e.offsetParent);})(ee)].reduce((a, b) => a + b.offsetTop, 0);

let __getPrevNextComments = goprev => {
	let last;
	let winHeight = document.querySelector('html').clientHeight;
	let scrollTop = document.querySelector('html').scrollTop;
	let winSize = document.querySelector('html').clientHeight;
//console.log("================= "+(goprev?"UP":"DOWN"));
//console.log({winHeight, scrollTop, winSize}); let idx=0;
	for (e of document.querySelectorAll('.js-inline-comments-container')) {
		let top = scrollPos(e) - 150 - (winSize-150)/5;
		let bot = top + e.offsetHeight;
//console.log({idx:++idx, pos:top-scrollTop, top, bot, e});
		if (goprev) {
			if (top+30 < scrollTop)
				last = {e, top, bot};
			else
				return last;
		} else {
			if (top-30 > scrollTop) return {e, top, bot};
		}
	}
	return last;
};

let __getPrevNextCommentScroll = goprev => {
	let e = __getPrevNextComments(goprev);
	return e ? e.top : goprev ? 0 : 99999999;
};

document.addEventListener("keydown", ev => {
	if (!(ev.altKey && ev.metaKey && !ev.ctrlKey && !ev.shiftKey)) return;
	if (ev.code != "ArrowDown" && ev.code != "ArrowUp") return;
	ev.preventDefault();
	ev.cancelBubble = true;
	document.querySelector('html').scrollTop = __getPrevNextCommentScroll(ev.code == "ArrowUp");
}, true);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.comments_nav;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=github_comments_nav_enabled id=github_comments_nav_enabled _site=github _section_id="comments_nav" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_comments_nav_enabled> Keyboard navigation to next/prev comment: Alt+Meta+{Up/Down}</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('comments_nav')) settings.comments_nav = {};
  let s = settings.comments_nav;
  let e = form.elements;
  s._enabled = e.github_comments_nav_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.comments_nav;
  let e = form.elements;
  e.github_comments_nav_enabled.checked = s._enabled;

}

};  // end of nested class comments_nav


///////////////////////////////////////////////////////////
// Functions for comments_hi : Highlight comments by Alt+Click
// Split: minor
// Params: 

static comments_hi = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('comments_hi')) settings.comments_hi = {};
  let s = settings.comments_hi;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('comments_hi')) settings.comments_hi = {};
  let s = settings.comments_hi;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.comments_hi._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.comments_hi;
  if (!this.IsEnabled(settings)) return "/* Disabled: Highlight comments by Alt+Click */\n\n";
  let {} = s;
  return `
/* Highlight comments by Alt+Click */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["comment-highlight.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let marked = {};

document.addEventListener("mousedown", ev => {
	if (!ev.altKey) return;
	let div = ev.target.closest('div.js-inline-comments-container');
	let id = div?.querySelector('div[id^=r]')?.id;
  if (!div || !id) {
	  div = ev.target.closest('[id^="review-thread-or-comment-id-"]');
    id = `${div?.id}`.match(/-(\d+)$/)?.[1];
	}
  if (!div || !id) {
	  div = ev.target.closest('[id^="review-thread-or-comment-id-"]');
    id = `${div?.id}`.match(/-(\d+)$/)?.[1];
	}
	if (!div || !id) {
		id = ev.target.closest('a.select-menu-item')?.href?.match(/#r(\d+)$/)?.[1];
	  div = document.querySelector(`#r${id}`)?.closest("div.js-inline-comments-container");
		if (!id || !div) return;
	}
	ev.preventDefault(); ev.stopPropagation();
	id = id.substr(1);
	let m = marked[id] = !marked[id];
	div.style.backgroundColor = m ? "#034" : "";
	document.querySelector('#marked-style')?.remove();
	document.head.insertAdjacentHTML('beforeEnd', `<style id="marked-style">`+
Object.keys(marked).map(x => `[data-hydro-click*='"comment_id":${x}']`).join(", ")+`
{
  background-color: #034;
}
</style>`);
}, true);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.comments_hi;
  return `  <li style=height:0.5em ><BR>
  <li has_script>
  <input type=checkbox name=github_comments_hi_enabled id=github_comments_hi_enabled _site=github _section_id="comments_hi" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=github_comments_hi_enabled> Highlight comments by Alt+Click</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('comments_hi')) settings.comments_hi = {};
  let s = settings.comments_hi;
  let e = form.elements;
  s._enabled = e.github_comments_hi_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.comments_hi;
  let e = form.elements;
  e.github_comments_hi_enabled.checked = s._enabled;

}

};  // end of nested class comments_hi


///////////////////////////////////////////////////////////
// Interface functions

static id = "github";
static fields = ["dark_mode", "no_animations", "underline_links", "wider_menus", "ignore_ws", "auto_expand_matches", "load_diffs", "comments_nav", "comments_hi"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module github disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.underline_links.GenStyle(settings) +
  this.wider_menus.GenStyle(settings) +
  this.ignore_ws.GenStyle(settings) +
  this.auto_expand_matches.GenStyle(settings) +
  this.load_diffs.GenStyle(settings) +
  this.comments_nav.GenStyle(settings) +
  this.comments_hi.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.underline_links.GenScriptUrls(settings),
    ...this.wider_menus.GenScriptUrls(settings),
    ...this.ignore_ws.GenScriptUrls(settings),
    ...this.auto_expand_matches.GenScriptUrls(settings),
    ...this.load_diffs.GenScriptUrls(settings),
    ...this.comments_nav.GenScriptUrls(settings),
    ...this.comments_hi.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.underline_links.GetScript(settings),
    this.wider_menus.GetScript(settings),
    this.ignore_ws.GetScript(settings),
    this.auto_expand_matches.GetScript(settings),
    this.load_diffs.GetScript(settings),
    this.comments_nav.GetScript(settings),
    this.comments_hi.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.underline_links.SetDefaults(settings);
  this.wider_menus.SetDefaults(settings);
  this.ignore_ws.SetDefaults(settings);
  this.auto_expand_matches.SetDefaults(settings);
  this.load_diffs.SetDefaults(settings);
  this.comments_nav.SetDefaults(settings);
  this.comments_hi.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.underline_links.GenSettingsUi(settings) +
  this.wider_menus.GenSettingsUi(settings) +
  this.ignore_ws.GenSettingsUi(settings) +
  this.auto_expand_matches.GenSettingsUi(settings) +
  this.load_diffs.GenSettingsUi(settings) +
  this.comments_nav.GenSettingsUi(settings) +
  this.comments_hi.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.underline_links.ImportSettingsFromForm(form, settings);
  this.wider_menus.ImportSettingsFromForm(form, settings);
  this.ignore_ws.ImportSettingsFromForm(form, settings);
  this.auto_expand_matches.ImportSettingsFromForm(form, settings);
  this.load_diffs.ImportSettingsFromForm(form, settings);
  this.comments_nav.ImportSettingsFromForm(form, settings);
  this.comments_hi.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.underline_links.ApplySettingsToForm(settings, form);
  this.wider_menus.ApplySettingsToForm(settings, form);
  this.ignore_ws.ApplySettingsToForm(settings, form);
  this.auto_expand_matches.ApplySettingsToForm(settings, form);
  this.load_diffs.ApplySettingsToForm(settings, form);
  this.comments_nav.ApplySettingsToForm(settings, form);
  this.comments_hi.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["https://github.com/*"];

} // end of global class github
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class telegram {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"] {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=telegram_dark_mode_enabled id=telegram_dark_mode_enabled _site=telegram _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=telegram_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.telegram_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.telegram_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=telegram_no_animations_enabled id=telegram_no_animations_enabled _site=telegram _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=telegram_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.telegram_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.telegram_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for common : Use full page width.
// Split: big
// Params: 

static common = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.common._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.common;
  if (!this.IsEnabled(settings)) return "/* Disabled: Use full page width. */\n\n";
  let {} = s;
  return `
/* Use full page width. */
.tg_head_split,
.im_page_wrap,
.im_message_wrap,
.im_send_form, .im_send_panel_wrap {
  max-width: unset !important;
  margin: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.common;
  return `  <li><hr>
  <li>
  <input type=checkbox name=telegram_common_enabled id=telegram_common_enabled _site=telegram _section_id="common" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=telegram_common_enabled> Use full page width.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  let e = form.elements;
  s._enabled = e.telegram_common_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.common;
  let e = form.elements;
  e.telegram_common_enabled.checked = s._enabled;

}

};  // end of nested class common


///////////////////////////////////////////////////////////
// Interface functions

static id = "telegram";
static fields = ["dark_mode", "no_animations", "common"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module telegram disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.common.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.common.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.common.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.common.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.common.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.common.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.common.ApplySettingsToForm(settings, form);
}


static has_scripts = 0;

static descr = ``;

static urls = ["*://web.telegram.org/*"];

} // end of global class telegram
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class slack {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"], :fullscreen {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=slack_dark_mode_enabled id=slack_dark_mode_enabled _site=slack _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=slack_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.slack_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.slack_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=slack_no_animations_enabled id=slack_no_animations_enabled _site=slack _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=slack_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.slack_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.slack_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for export_messages : Export thread (top right corner icon)
// Split: big
// Params: 

static export_messages = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('export_messages')) settings.export_messages = {};
  let s = settings.export_messages;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('export_messages')) settings.export_messages = {};
  let s = settings.export_messages;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.export_messages._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.export_messages;
  if (!this.IsEnabled(settings)) return "/* Disabled: Export thread (top right corner icon) */\n\n";
  let {} = s;
  return `
/* Export thread (top right corner icon) */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["export-messages.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
setTimeout(() => {
let observer = null;
let button = null;
let msgmap = {};

function onButtonClick() {
  if (observer) {
    //console.log("*** stop");
    observer.disconnect();
    observer = null;
    button.innerHTML = "💾";

    //let txt = Object.entries(msgmap).map(([k, v]) => [Number(k), v]).sort().map(([k, v]) => v).join("\n\n");
    //console.log("***", txt);

    let html = Object.entries(msgmap).map(([k, v]) => [Number(k), v]).sort().map(([k, v]) => v).join("<hr>");
    let w = window.open("about:blank");
    let display = () => {
      w.document.head.innerHTML = `<style>
.c-emoji__small { width: 16px; height: 16px; }
.c-emoji--inline.c-emoji__medium img { width: 22px; height: 22px; }
button.c-avatar { padding: 0; border: none; }
.c-mrkdwn__br { height: 8px; display: block; }
.c-pillow_file {
 background: #EEE; border: 1px solid #888; border-radius: 12px; padding: 12px; display: flex; flex-direction: column;
}
.c-mrkdwn__broadcast--mention { color: #660; background: #ffA; }
.p-file_thumbnail__container { display: none; }
.c-message_kit__gutter__left { display: contents; }
.c-message_kit__gutter__left * { display: inline-block; }
.c-message_kit__gutter__right { display: contents; }
</style>`;
      w.document.body.innerHTML = html;
      w.document.querySelectorAll('svg, .c-custom_status, .c-message__reply_bar_description, .c-message__reply_bar_arrow, [data-qa="add_reaction_button"], .offscreen').forEach(e => e.remove());
      w.document.querySelectorAll('[data-qa="timestamp_label"]').forEach(e => e.innerText = new Date(parseFloat(e.parentNode.getAttribute("data-ts"))*1000.));
    };
    display();
    w.document.addEventListener("readystatechange", ()=>{
      if (w.document.readyState !== "complete") return;
      display();
    })
    return;
  }

  function onRecord(ee) {
    if (ee.getAttribute("role") !== "listitem" || !ee.hasAttribute("data-item-key")) return;
    let ts = ee.getAttribute("data-item-key");
    if (Number.isNaN(parseFloat(ts))) return;
    //msgmap[ee.hasAttribute("data-item-key")] = ee.textContent;
    //msgmap[ee.hasAttribute("data-item-key")] = ee.innerText;
    msgmap[ts] = ee.outerHTML;
  }
  function updateRecords(records) {
    for (let n of records) onRecord(n);
    button.innerHTML = `${Object.keys(msgmap).length} ✅`;
  }

  let e =
    document.querySelector('[role].p-view_contents--secondary [role="presentation"].c-scrollbar__child [role="list"]') ||
    document.querySelector('[role].p-view_contents--primary [role="presentation"].c-scrollbar__child [role="list"]');
  if (!e) return;

  observer = new MutationObserver((records, observer) => {
    for (let r of records) updateRecords(r.addedNodes);
  });

  msgmap = {};
  updateRecords(e.childNodes);
  observer.observe(e, {childList: true});
}

function addButton() {
  //if (document.querySelector("#export-button")) return;
  document.querySelector("#export-button")?.remove();
  button = document.createElement("button");
  button.setAttribute("id", "export-button");
  button.style.color = "#fff";
  button.innerHTML = "💾";
  button.addEventListener("click", onButtonClick);
  document.querySelector('[role="toolbar"][data-qa="top-nav"]').appendChild(button);
}

addButton();
}, 3000);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.export_messages;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=slack_export_messages_enabled id=slack_export_messages_enabled _site=slack _section_id="export_messages" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=slack_export_messages_enabled> Export thread (top right corner icon)</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('export_messages')) settings.export_messages = {};
  let s = settings.export_messages;
  let e = form.elements;
  s._enabled = e.slack_export_messages_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.export_messages;
  let e = form.elements;
  e.slack_export_messages_enabled.checked = s._enabled;

}

};  // end of nested class export_messages


///////////////////////////////////////////////////////////
// Interface functions

static id = "slack";
static fields = ["dark_mode", "no_animations", "export_messages"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module slack disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.export_messages.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.export_messages.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.export_messages.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.export_messages.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.export_messages.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.export_messages.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.export_messages.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://app.slack.com/*"];

} // end of global class slack
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class instagram {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"], :fullscreen {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=instagram_dark_mode_enabled id=instagram_dark_mode_enabled _site=instagram _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=instagram_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.instagram_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.instagram_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=instagram_no_animations_enabled id=instagram_no_animations_enabled _site=instagram _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=instagram_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.instagram_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.instagram_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for script : Scroll snaps to the post beginning. Hotkey navigation. Video Speed.
// Split: big
// Params: 

static script = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('script')) settings.script = {};
  let s = settings.script;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('script')) settings.script = {};
  let s = settings.script;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.script._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.script;
  if (!this.IsEnabled(settings)) return "/* Disabled: Scroll snaps to the post beginning. Hotkey navigation. Video Speed. */\n\n";
  let {} = s;
  return `
/* Scroll snaps to the post beginning. Hotkey navigation. Video Speed. */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["script.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
//// @script Scroll snaps to the post beginning. Hotkey navigation. Video Speed.

let QS = (sel, e = null) => (e === undefined) ? undefined : (e || document).querySelector(sel);
let QA = (sel, e = null) => (e === undefined) ? undefined : (e || document).querySelectorAll(sel);
let PageOffset = e => [...(function*(e){ yield e; while (e.offsetParent) { yield e = e.offsetParent; }})(e)].reduce((a,v) => a + v.offsetTop, 0);
let WindowOffset = e => PageOffset(e) - window.scrollY;
let NextOne = () => [...QA("article")].find(e => WindowOffset(e) > 53);
let PrevOne = () => [...QA("article")].find(e => WindowOffset(e) > -50).previousElementSibling;
let CurrOne = () => [...QA("article")].find(e => {let off = WindowOffset(e); return off > -300 && off < 150 });
let ScrollTo = e => window.scroll(0, PageOffset(e) - 53);
let ClickInCurr = sel => { let e = QS(sel, CurrOne()); e?.click(); return e; };

let Cleanup = () => [...QS("article")?.parentElement.children].filter(e => e.nodeName != "ARTICLE").forEach(e => e.style.display="none");

let Fixed = (n, prec) => n.toFixed(prec).replace(/\.([1-9]*)(0+)$/, ".$1").replace(/\.$/, "");
let Fill = (n, width) => (new Array(width).fill('0').join("") + n).substr(-width);
let AlignRateUp = n => Math.round(n*4)/4;
let AlignRateDown = n => Math.round(n*100)/100;
let AlignRate = n => (n > 1 ? AlignRateUp : AlignRateDown)(n);

function Badge(html) {
  let template = document.createElement("div");
  template.style = `position: fixed; z-index: 1000; background-color: #202040; color: #fff; top: 30%; left: 30%;`;
  let Close = ev=>{ev.preventDefault(); ev.cancelBubble=true; template.remove();};
  window.addEventListener("keydown", Close, {once: true, capture: true});
  template.innerHTML = html.trim();
  document.body.insertAdjacentElement("afterBegin", template);
}
function VideoStatus(container, video) {
  if (!container || !video) return;
  window?.video_status?.remove();
  let template = document.createElement("template");
  template.innerHTML =
    `<div id=video_status style="position:fixed;z-index:1000;left:0;bottom:0;width:100%;color:black;padding:0;text-shadow:0 0 3px #fff,0 0 3px #fff,0 0 3px #fff,0 0 3px #fff;font-weight:bold;">`+
      `<div style="position:absolute;bottom:-2px;width:100%;height:1em;background-color:#AAA;white-space: pre;"></div>`+
      `<div style="position:absolute;bottom:-2px;width:${video.currentTime*100/video.duration}%;height:1em;background-color:#F66;"></div>`+
      `<div style="potision:absolute;text-align: center;white-space: pre;">${SecToTime(video.currentTime)} / ${SecToTime(video.duration)}      speed: ${video.playbackRate}x</div>`+
    `</div>`;
  let div = template.content.children[0];
  setTimeout(()=>div.remove(), 2500);
  container.append(div);
}
let GetVideo = () => {
  let [container, video] = [CurrOne(), QS('video', CurrOne())];
  if (!container || !video) [container, video] = [QS("[role=dialog]"), QS("[role=dialog] video")];
  return !container || !video ? [] : [container, video];
};
let VideoPlaybackRate = cb => {
  let [container, video] = GetVideo();
  if (!container || !video) return;
  let rate = video.playbackRate;
  rate = AlignRate(cb(rate));
  console.log('video rate', video.playbackRate = rate);
  VideoStatus(container, video);
};
let SecToTime = sec =>
  "" + Math.floor(sec / 3600) +
  ":" + ("0"+Math.floor((sec % 3600) / 60)).substr(-2) +
  ":" + ("0"+Math.floor(sec % 60)).substr(-2);
let VideoPlayPos = cb => {
  let [container, video] = GetVideo();
  if (!container || !video) return;
  let pos = cb(video.currentTime, video.duration);
  pos = Math.min(Math.max(pos, 0), video.duration);
  console.log('video time', video.currentTime, video.duration, '->', pos);
  video.currentTime = pos;
  VideoStatus(container, video);
};

document.addEventListener("keydown", ev => {
  if (["INPUT", "LABEL", "SELECT", "TEXTAREA", "BUTTON", "FIELDSET", "LEGEND", "DATALIST", "OUTPUT", "OPTION", "OPTGROUP", ].includes(document.activeElement.tagName)) return;
  if (ev.code === "PageDown" || (ev.code === "Space" && !ev.shiftKey)) {
    // Scroll to the next post and align it to the top of the page
    ScrollTo(NextOne());
    ev.preventDefault();
		[...QA("article button")].forEach(e => e.innerHTML === "more" && e.click());
    document.body.focus();
  } else if (ev.code === "PageUp" || ev.code === "KeyB" || (ev.shiftKey && ev.code === "Space")) {
    // Scroll to the prev post and align it to the top of the page
    ScrollTo(PrevOne());
    ev.preventDefault();
    document.body.focus();
  } else if (ev.code === "ArrowLeft") {
    // Scroll right to the next image in the post
    ClickInCurr(".coreSpriteLeftChevron");
    document.body.focus();
  } else if (ev.code === "ArrowRight") {
    // Scroll left to the prev image in the post
    ClickInCurr(".coreSpriteRightChevron");
    document.body.focus();
  } else if (ev.code === "KeyZ") {
    // Like/Unlike
    QS(ev.shiftKey ? "[aria-label=Unlike]" : "[aria-label=Like]", CurrOne())?.closest("button")?.click();
    document.body.focus();
  } else if (ev.code === "Enter" || ev.code === "KeyV" || ev.code === "KeyK") {
    // Focus and play video
    let [container, video] = GetVideo();
    if (ClickInCurr("[aria-label=Control][role=button]")) {
      VideoStatus(container, video);
      return;
    }
    if (!container || !video) return;
    video.paused ? (video.play(), video.muted=false) : (video.muted ? video.muted = false : video.pause());
    VideoStatus(container, video);
    document.body.focus();
  } else if (ev.code === 'Period' && ev.shiftKey) {
    // Increase playback speed
    VideoPlaybackRate(rate => rate * 1.25);
    document.body.focus();
  } else if (ev.code === 'Comma' && ev.shiftKey) {
    // Decrease playback speed
    VideoPlaybackRate(rate => rate / 1.25);
    document.body.focus();
  } else if (ev.code === 'Period' && !ev.shiftKey) {
    // Set speed to 1
    VideoPlaybackRate(rate => 1);
    document.body.focus();
  } else if (ev.code === 'BracketRight' || ev.code === "KeyL") {
    // Forward 10 sec or 60 sec with Shift
    VideoPlayPos((pos, len) => pos + 10 + 50*ev.shiftKey);
    document.body.focus();
  } else if (ev.code === 'BracketLeft' || ev.code === "KeyJ") {
    // Backwards 10 sec or 60 sec with Shift
    VideoPlayPos((pos, len) => pos - 10 - 50*ev.shiftKey);
    document.body.focus();
  } else if (ev.code === 'Slash' && ev.shiftKey) {
    // Display help
    Badge(`
<table style="text-align: center;">
<tr><td>Space | PgDown</td><td>Next post</td></tr>
<tr><td>Shift-Space | PgUp | B</td><td>Previous post</td></tr>
<tr><td>Right</td><td>Scroll right to the next image</td></tr>
<tr><td>Left</td><td>Scroll left to the previous image</td></tr>
<tr><td>z, Z</td><td>Like. Unlike</td></tr>
<tr><td>Enter | V | K</td><td>Play/Pause video</td></tr>
<tr><td>] | L</td><td>Skip 10 seconds (+Shift: 1 minute)</td></tr>
<tr><td>[ | J</td><td>Rewind 10 seconds (+Shift: 1 minute)</td></tr>
<tr><td>&gt;</td><td>Increase video speed</td></tr>
<tr><td>&lt;</td><td>Decrease video speed</td></tr>
<tr><td>.</td><td>Reset playback speed to 1</td></tr>
<tr><td>?</td><td>Help</td></tr>
<table>
<BR>
<center>Press any key to close</center>`);
    document.body.focus();
  }
  Cleanup();
});
  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.script;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=instagram_script_enabled id=instagram_script_enabled _site=instagram _section_id="script" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=instagram_script_enabled> Scroll snaps to the post beginning. Hotkey navigation. Video Speed.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('script')) settings.script = {};
  let s = settings.script;
  let e = form.elements;
  s._enabled = e.instagram_script_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.script;
  let e = form.elements;
  e.instagram_script_enabled.checked = s._enabled;

}

};  // end of nested class script


///////////////////////////////////////////////////////////
// Interface functions

static id = "instagram";
static fields = ["dark_mode", "no_animations", "script"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module instagram disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.script.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.script.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.script.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.script.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.script.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.script.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.script.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://instagram.com/*", "*://www.instagram.com/*"];

} // end of global class instagram
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class gmail {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img:not([src^="images/"]):not([src^="//ssl.gstatic.com/ui/"]):not([src^="https://docs.google.com/"]), video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_dark_mode_enabled id=gmail_dark_mode_enabled _site=gmail _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.gmail_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.gmail_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=gmail_no_animations_enabled id=gmail_no_animations_enabled _site=gmail _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.gmail_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.gmail_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for list_of_emails : List of emails
// Split: big
// Params: [padding_top 1 0 Padding Top], [padding_bottom 1 0 Padding Bottom]

static list_of_emails = class {

static params = ["padding_top", "padding_bottom"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  s._enabled = true;
  s.padding_top = 0;
  s.padding_bottom = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 0;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
}

static IsEnabled(settings) {
  return settings.list_of_emails._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  if (!this.IsEnabled(settings)) return "/* Disabled: List of emails */\n\n";
  let {padding_top, padding_bottom} = s;
  return `
/* List of emails */
.zA {
    padding-top: ${padding_top}px !important;      /* @1 */
    padding-bottom: ${padding_bottom}px !important;   /* @1 */
    overflow: hidden;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_list_of_emails_enabled id=gmail_list_of_emails_enabled _site=gmail _section_id="list_of_emails" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_list_of_emails_enabled> List of emails</label>
  <ul>
    <li><input
      name=gmail_list_of_emails_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_top"
      _default="0"
      ><input
      name=gmail_list_of_emails_padding_top_val
      size=3
      value=${s.padding_top}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_top"
      _default="0"
      > Padding Top
    <li><input
      name=gmail_list_of_emails_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=gmail_list_of_emails_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  let e = form.elements;
  s._enabled = e.gmail_list_of_emails_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.gmail_list_of_emails_padding_top_val.value))) s.padding_top = 0;
  if (isNaN(s.padding_bottom = parseInt(e.gmail_list_of_emails_padding_bottom_val.value))) s.padding_bottom = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  let e = form.elements;
  e.gmail_list_of_emails_enabled.checked = s._enabled;
  e.gmail_list_of_emails_padding_top_range.value = e.gmail_list_of_emails_padding_top_val.value = s.padding_top;
  e.gmail_list_of_emails_padding_bottom_range.value = e.gmail_list_of_emails_padding_bottom_val.value = s.padding_bottom;
}

};  // end of nested class list_of_emails


///////////////////////////////////////////////////////////
// Functions for horizontal_cell_paddings_in_grid_cells : Horizontal cell paddings in grid cells
// Split: no
// Params: 

static horizontal_cell_paddings_in_grid_cells = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.horizontal_cell_paddings_in_grid_cells._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  if (!this.IsEnabled(settings)) return "/* Disabled: Horizontal cell paddings in grid cells */\n\n";
  let {} = s;
  return `
/* Horizontal cell paddings in grid cells */
table[role=grid] td {
    padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  return `
  <li>
  <input type=checkbox name=gmail_horizontal_cell_paddings_in_grid_cells_enabled id=gmail_horizontal_cell_paddings_in_grid_cells_enabled _site=gmail _section_id="horizontal_cell_paddings_in_grid_cells" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_horizontal_cell_paddings_in_grid_cells_enabled> Horizontal cell paddings in grid cells</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  let e = form.elements;
  s._enabled = e.gmail_horizontal_cell_paddings_in_grid_cells_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  let e = form.elements;
  e.gmail_horizontal_cell_paddings_in_grid_cells_enabled.checked = s._enabled;

}

};  // end of nested class horizontal_cell_paddings_in_grid_cells


///////////////////////////////////////////////////////////
// Functions for spacing_between_emails_in_thread_view : Spacing between emails in thread view
// Split: minor
// Params: [pBot 3 10 Padding After], [h 1 44 Height], [pTop 1 5 Padding Before]

static spacing_between_emails_in_thread_view = class {

static params = ["pBot", "h", "pTop"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  s._enabled = true;
  s.pBot = 10;
  s.h = 44;
  s.pTop = 5;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('pBot')) s.pBot = 10;
  if (!s.hasOwnProperty('h')) s.h = 44;
  if (!s.hasOwnProperty('pTop')) s.pTop = 5;
}

static IsEnabled(settings) {
  return settings.spacing_between_emails_in_thread_view._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  if (!this.IsEnabled(settings)) return "/* Disabled: Spacing between emails in thread view */\n\n";
  let {pBot, h, pTop} = s;
  return `
/* Spacing between emails in thread view */
.hx .gs {
    padding: 0 0 ${pBot}px 0 !important;   /* @3 @pBot Padding After */
}
.aju {
    height: ${h}px !important;          /* @1 @h */
    padding: 0 6px 0 0 !important;    /* Padding after the user icon */
}
.gE {
    padding: ${pTop}px 0 0 0 !important;    /* @1 @pTop Padding Before */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_spacing_between_emails_in_thread_view_enabled id=gmail_spacing_between_emails_in_thread_view_enabled _site=gmail _section_id="spacing_between_emails_in_thread_view" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_spacing_between_emails_in_thread_view_enabled> Spacing between emails in thread view</label>
  <ul>
    <li><input
      name=gmail_spacing_between_emails_in_thread_view_pBot_range
      type=range
      min=0
      max=50
      value=${s.pBot}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pBot"
      _default="10"
      ><input
      name=gmail_spacing_between_emails_in_thread_view_pBot_val
      size=3
      value=${s.pBot}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pBot"
      _default="10"
      > Padding After
    <li><input
      name=gmail_spacing_between_emails_in_thread_view_h_range
      type=range
      min=0
      max=200
      value=${s.h}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="h"
      _default="44"
      ><input
      name=gmail_spacing_between_emails_in_thread_view_h_val
      size=3
      value=${s.h}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="h"
      _default="44"
      > Height
    <li><input
      name=gmail_spacing_between_emails_in_thread_view_pTop_range
      type=range
      min=0
      max=50
      value=${s.pTop}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pTop"
      _default="5"
      ><input
      name=gmail_spacing_between_emails_in_thread_view_pTop_val
      size=3
      value=${s.pTop}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pTop"
      _default="5"
      > Padding Before
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  let e = form.elements;
  s._enabled = e.gmail_spacing_between_emails_in_thread_view_enabled.checked;
  if (isNaN(s.pBot = parseInt(e.gmail_spacing_between_emails_in_thread_view_pBot_val.value))) s.pBot = 10;
  if (isNaN(s.h = parseInt(e.gmail_spacing_between_emails_in_thread_view_h_val.value))) s.h = 44;
  if (isNaN(s.pTop = parseInt(e.gmail_spacing_between_emails_in_thread_view_pTop_val.value))) s.pTop = 5;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  let e = form.elements;
  e.gmail_spacing_between_emails_in_thread_view_enabled.checked = s._enabled;
  e.gmail_spacing_between_emails_in_thread_view_pBot_range.value = e.gmail_spacing_between_emails_in_thread_view_pBot_val.value = s.pBot;
  e.gmail_spacing_between_emails_in_thread_view_h_range.value = e.gmail_spacing_between_emails_in_thread_view_h_val.value = s.h;
  e.gmail_spacing_between_emails_in_thread_view_pTop_range.value = e.gmail_spacing_between_emails_in_thread_view_pTop_val.value = s.pTop;
}

};  // end of nested class spacing_between_emails_in_thread_view


///////////////////////////////////////////////////////////
// Functions for labels_in_emails_list : Labels in emails list
// Split: big
// Params: [margin_right 1 1 Horizontal spacing]

static labels_in_emails_list = class {

static params = ["margin_right"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  s._enabled = true;
  s.margin_right = 1;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('margin_right')) s.margin_right = 1;
}

static IsEnabled(settings) {
  return settings.labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels in emails list */\n\n";
  let {margin_right} = s;
  return `
/* Labels in emails list */
.ar {
    margin-right: ${margin_right}px !important;     /* @1 Horizontal spacing */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_labels_in_emails_list_enabled id=gmail_labels_in_emails_list_enabled _site=gmail _section_id="labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_labels_in_emails_list_enabled> Labels in emails list</label>
  <ul>
    <li><input
      name=gmail_labels_in_emails_list_margin_right_range
      type=range
      min=0
      max=50
      value=${s.margin_right}
      _site=gmail
      _section_id="labels_in_emails_list"
      _setting_id="margin_right"
      _default="1"
      ><input
      name=gmail_labels_in_emails_list_margin_right_val
      size=3
      value=${s.margin_right}
      _site=gmail
      _section_id="labels_in_emails_list"
      _setting_id="margin_right"
      _default="1"
      > Horizontal spacing
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_labels_in_emails_list_enabled.checked;
  if (isNaN(s.margin_right = parseInt(e.gmail_labels_in_emails_list_margin_right_val.value))) s.margin_right = 1;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  let e = form.elements;
  e.gmail_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_labels_in_emails_list_margin_right_range.value = e.gmail_labels_in_emails_list_margin_right_val.value = s.margin_right;
}

};  // end of nested class labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for smaller_font_for_labels_in_emails_list : Smaller font for labels in emails list
// Split: no
// Params: [font_size 1 70 Font size %]

static smaller_font_for_labels_in_emails_list = class {

static params = ["font_size"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  s._enabled = true;
  s.font_size = 70;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('font_size')) s.font_size = 70;
}

static IsEnabled(settings) {
  return settings.smaller_font_for_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Smaller font for labels in emails list */\n\n";
  let {font_size} = s;
  return `
/* Smaller font for labels in emails list */
.ar {
    font-size: ${font_size}% !important;       /* @1 Font size % */
    height: 16px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_smaller_font_for_labels_in_emails_list_enabled id=gmail_smaller_font_for_labels_in_emails_list_enabled _site=gmail _section_id="smaller_font_for_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_smaller_font_for_labels_in_emails_list_enabled> Smaller font for labels in emails list</label>
  <ul>
    <li><input
      name=gmail_smaller_font_for_labels_in_emails_list_font_size_range
      type=range
      min=0
      max=200
      value=${s.font_size}
      _site=gmail
      _section_id="smaller_font_for_labels_in_emails_list"
      _setting_id="font_size"
      _default="70"
      ><input
      name=gmail_smaller_font_for_labels_in_emails_list_font_size_val
      size=3
      value=${s.font_size}
      _site=gmail
      _section_id="smaller_font_for_labels_in_emails_list"
      _setting_id="font_size"
      _default="70"
      > Font size %
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_smaller_font_for_labels_in_emails_list_enabled.checked;
  if (isNaN(s.font_size = parseInt(e.gmail_smaller_font_for_labels_in_emails_list_font_size_val.value))) s.font_size = 70;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  let e = form.elements;
  e.gmail_smaller_font_for_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_smaller_font_for_labels_in_emails_list_font_size_range.value = e.gmail_smaller_font_for_labels_in_emails_list_font_size_val.value = s.font_size;
}

};  // end of nested class smaller_font_for_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for limit_the_width_of_labels_in_emails_list : Limit the width of labels in emails list
// Split: no
// Params: [max_width 1 70 Max Width], [padding 2 3 Padding]

static limit_the_width_of_labels_in_emails_list = class {

static params = ["max_width", "padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  s._enabled = true;
  s.max_width = 70;
  s.padding = 3;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('max_width')) s.max_width = 70;
  if (!s.hasOwnProperty('padding')) s.padding = 3;
}

static IsEnabled(settings) {
  return settings.limit_the_width_of_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Limit the width of labels in emails list */\n\n";
  let {max_width, padding} = s;
  return `
/* Limit the width of labels in emails list */
tr:not(:hover) td div.ar > div.at > .au > .av
{
    max-width: ${max_width}px !important;       /* @1 */
}
div.ar > div.at > .au > .av
{
    padding: 0 ${padding}px !important;        /* @2 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_limit_the_width_of_labels_in_emails_list_enabled id=gmail_limit_the_width_of_labels_in_emails_list_enabled _site=gmail _section_id="limit_the_width_of_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_limit_the_width_of_labels_in_emails_list_enabled> Limit the width of labels in emails list</label>
  <ul>
    <li><input
      name=gmail_limit_the_width_of_labels_in_emails_list_max_width_range
      type=range
      min=0
      max=200
      value=${s.max_width}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="max_width"
      _default="70"
      ><input
      name=gmail_limit_the_width_of_labels_in_emails_list_max_width_val
      size=3
      value=${s.max_width}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="max_width"
      _default="70"
      > Max Width
    <li><input
      name=gmail_limit_the_width_of_labels_in_emails_list_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="padding"
      _default="3"
      ><input
      name=gmail_limit_the_width_of_labels_in_emails_list_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="padding"
      _default="3"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_limit_the_width_of_labels_in_emails_list_enabled.checked;
  if (isNaN(s.max_width = parseInt(e.gmail_limit_the_width_of_labels_in_emails_list_max_width_val.value))) s.max_width = 70;
  if (isNaN(s.padding = parseInt(e.gmail_limit_the_width_of_labels_in_emails_list_padding_val.value))) s.padding = 3;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  let e = form.elements;
  e.gmail_limit_the_width_of_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_limit_the_width_of_labels_in_emails_list_max_width_range.value = e.gmail_limit_the_width_of_labels_in_emails_list_max_width_val.value = s.max_width;
  e.gmail_limit_the_width_of_labels_in_emails_list_padding_range.value = e.gmail_limit_the_width_of_labels_in_emails_list_padding_val.value = s.padding;
}

};  // end of nested class limit_the_width_of_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for extra_width_for_special_labels_in_emails_list : Extra width for special labels in emails list
// Split: no
// Params: 

static extra_width_for_special_labels_in_emails_list = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.extra_width_for_special_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Extra width for special labels in emails list */\n\n";
  let {} = s;
  return `
/* Extra width for special labels in emails list */
.aRK:before {
    content: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_extra_width_for_special_labels_in_emails_list_enabled id=gmail_extra_width_for_special_labels_in_emails_list_enabled _site=gmail _section_id="extra_width_for_special_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_extra_width_for_special_labels_in_emails_list_enabled> Extra width for special labels in emails list</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_extra_width_for_special_labels_in_emails_list_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  let e = form.elements;
  e.gmail_extra_width_for_special_labels_in_emails_list_enabled.checked = s._enabled;

}

};  // end of nested class extra_width_for_special_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for shrink_general_labels_in_emails_list__like_inbox : Shrink general labels in emails list, like Inbox
// Split: no
// Params: [max_width 1 21 Max Width], [padding 2 1 Padding]

static shrink_general_labels_in_emails_list__like_inbox = class {

static params = ["max_width", "padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  s._enabled = true;
  s.max_width = 21;
  s.padding = 1;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('max_width')) s.max_width = 21;
  if (!s.hasOwnProperty('padding')) s.padding = 1;
}

static IsEnabled(settings) {
  return settings.shrink_general_labels_in_emails_list__like_inbox._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  if (!this.IsEnabled(settings)) return "/* Disabled: Shrink general labels in emails list, like Inbox */\n\n";
  let {max_width, padding} = s;
  return `
/* Shrink general labels in emails list, like Inbox */
tr:not(:hover) td div.ar > div.at[title='Vault "Indef"'] > .au > .av,
tr:not(:hover) td div.ar > div.at[title='Inbox'] > .au > .av,
tr:not(:hover) td div.ar > div.at[title='automatically-processed'] > .au > .av
{
    max-width: ${max_width}px !important;       /* @1 */
    padding: 0 ${padding}px !important;        /* @2 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  return `
  <li>
  <input type=checkbox name=gmail_shrink_general_labels_in_emails_list__like_inbox_enabled id=gmail_shrink_general_labels_in_emails_list__like_inbox_enabled _site=gmail _section_id="shrink_general_labels_in_emails_list__like_inbox" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_shrink_general_labels_in_emails_list__like_inbox_enabled> Shrink general labels in emails list, like Inbox</label>
  <ul>
    <li><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_range
      type=range
      min=0
      max=200
      value=${s.max_width}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="max_width"
      _default="21"
      ><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_val
      size=3
      value=${s.max_width}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="max_width"
      _default="21"
      > Max Width
    <li><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="padding"
      _default="1"
      ><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="padding"
      _default="1"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  let e = form.elements;
  s._enabled = e.gmail_shrink_general_labels_in_emails_list__like_inbox_enabled.checked;
  if (isNaN(s.max_width = parseInt(e.gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_val.value))) s.max_width = 21;
  if (isNaN(s.padding = parseInt(e.gmail_shrink_general_labels_in_emails_list__like_inbox_padding_val.value))) s.padding = 1;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  let e = form.elements;
  e.gmail_shrink_general_labels_in_emails_list__like_inbox_enabled.checked = s._enabled;
  e.gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_range.value = e.gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_val.value = s.max_width;
  e.gmail_shrink_general_labels_in_emails_list__like_inbox_padding_range.value = e.gmail_shrink_general_labels_in_emails_list__like_inbox_padding_val.value = s.padding;
}

};  // end of nested class shrink_general_labels_in_emails_list__like_inbox


///////////////////////////////////////////////////////////
// Functions for sections_splitter : Sections splitter
// Split: big
// Params: [height 1 26 Height]

static sections_splitter = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  s._enabled = true;
  s.height = 26;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 26;
}

static IsEnabled(settings) {
  return settings.sections_splitter._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  if (!this.IsEnabled(settings)) return "/* Disabled: Sections splitter */\n\n";
  let {height} = s;
  return `
/* Sections splitter */
.Wg {
    height: ${height}px !important;          /* @1 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_sections_splitter_enabled id=gmail_sections_splitter_enabled _site=gmail _section_id="sections_splitter" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_sections_splitter_enabled> Sections splitter</label>
  <ul>
    <li><input
      name=gmail_sections_splitter_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=gmail
      _section_id="sections_splitter"
      _setting_id="height"
      _default="26"
      ><input
      name=gmail_sections_splitter_height_val
      size=3
      value=${s.height}
      _site=gmail
      _section_id="sections_splitter"
      _setting_id="height"
      _default="26"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  let e = form.elements;
  s._enabled = e.gmail_sections_splitter_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_sections_splitter_height_val.value))) s.height = 26;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  let e = form.elements;
  e.gmail_sections_splitter_enabled.checked = s._enabled;
  e.gmail_sections_splitter_height_range.value = e.gmail_sections_splitter_height_val.value = s.height;
}

};  // end of nested class sections_splitter


///////////////////////////////////////////////////////////
// Functions for multiple_inbox_sections : Multiple inbox sections
// Split: no
// Params: [row_height 1 29 row: Height], [title_padding_bottom 1 4 title: Padding Bottom], [title_padding_top 1 4 title: Padding Top], [title_height 1 16 title: Height], [title_padding_left 1 80 title: Label shift towards the middle], [right_button_padding_bottom 1 2 right button: Padding Bottom], [right_button_padding_top 1 2 right button: Padding Top], [right_button_height 1 15 right button: Height], [right_button_line_height 1 15 right button: Line Height]

static multiple_inbox_sections = class {

static params = ["row_height", "title_padding_bottom", "title_padding_top", "title_height", "title_padding_left", "right_button_padding_bottom", "right_button_padding_top", "right_button_height", "right_button_line_height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  s._enabled = true;
  s.row_height = 29;
  s.title_padding_bottom = 4;
  s.title_padding_top = 4;
  s.title_height = 16;
  s.title_padding_left = 80;
  s.right_button_padding_bottom = 2;
  s.right_button_padding_top = 2;
  s.right_button_height = 15;
  s.right_button_line_height = 15;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('row_height')) s.row_height = 29;
  if (!s.hasOwnProperty('title_padding_bottom')) s.title_padding_bottom = 4;
  if (!s.hasOwnProperty('title_padding_top')) s.title_padding_top = 4;
  if (!s.hasOwnProperty('title_height')) s.title_height = 16;
  if (!s.hasOwnProperty('title_padding_left')) s.title_padding_left = 80;
  if (!s.hasOwnProperty('right_button_padding_bottom')) s.right_button_padding_bottom = 2;
  if (!s.hasOwnProperty('right_button_padding_top')) s.right_button_padding_top = 2;
  if (!s.hasOwnProperty('right_button_height')) s.right_button_height = 15;
  if (!s.hasOwnProperty('right_button_line_height')) s.right_button_line_height = 15;
}

static IsEnabled(settings) {
  return settings.multiple_inbox_sections._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  if (!this.IsEnabled(settings)) return "/* Disabled: Multiple inbox sections */\n\n";
  let {row_height, title_padding_bottom, title_padding_top, title_height, title_padding_left, right_button_padding_bottom, right_button_padding_top, right_button_height, right_button_line_height} = s;
  return `
/* Multiple inbox sections */
.nK .byN { /* row */
    height: ${row_height}px !important;          /* @1 */
    background-color: rgba(128, 128, 128, 0.1);
}
.Cq .nJ.A2 { /* title */
    padding-bottom: ${title_padding_bottom}px !important;   /* @1 */
    padding-top: ${title_padding_top}px !important;      /* @1 */
    height: ${title_height}px !important;          /* @1 */
    padding-left: ${title_padding_left}px !important; /* @1 Label shift towards the middle */
}
.Cr .yj { /* right button */
    padding-bottom: ${right_button_padding_bottom}px !important;   /* @1 */
    padding-top: ${right_button_padding_top}px !important;      /* @1 */
    height: ${right_button_height}px !important;          /* @1 */
    line-height: ${right_button_line_height}px !important;     /* @1 */
}
.Di>.amH { /* "1-50 of ..." */
    height: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  return `
  <li>
  <input type=checkbox name=gmail_multiple_inbox_sections_enabled id=gmail_multiple_inbox_sections_enabled _site=gmail _section_id="multiple_inbox_sections" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_multiple_inbox_sections_enabled> Multiple inbox sections</label>
  <ul>
    <li><input
      name=gmail_multiple_inbox_sections_row_height_range
      type=range
      min=0
      max=200
      value=${s.row_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="row_height"
      _default="29"
      ><input
      name=gmail_multiple_inbox_sections_row_height_val
      size=3
      value=${s.row_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="row_height"
      _default="29"
      > row: Height
    <li><input
      name=gmail_multiple_inbox_sections_title_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.title_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_bottom"
      _default="4"
      ><input
      name=gmail_multiple_inbox_sections_title_padding_bottom_val
      size=3
      value=${s.title_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_bottom"
      _default="4"
      > title: Padding Bottom
    <li><input
      name=gmail_multiple_inbox_sections_title_padding_top_range
      type=range
      min=0
      max=50
      value=${s.title_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_top"
      _default="4"
      ><input
      name=gmail_multiple_inbox_sections_title_padding_top_val
      size=3
      value=${s.title_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_top"
      _default="4"
      > title: Padding Top
    <li><input
      name=gmail_multiple_inbox_sections_title_height_range
      type=range
      min=0
      max=50
      value=${s.title_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_height"
      _default="16"
      ><input
      name=gmail_multiple_inbox_sections_title_height_val
      size=3
      value=${s.title_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_height"
      _default="16"
      > title: Height
    <li><input
      name=gmail_multiple_inbox_sections_title_padding_left_range
      type=range
      min=0
      max=200
      value=${s.title_padding_left}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_left"
      _default="80"
      ><input
      name=gmail_multiple_inbox_sections_title_padding_left_val
      size=3
      value=${s.title_padding_left}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_left"
      _default="80"
      > title: Label shift towards the middle
    <li><input
      name=gmail_multiple_inbox_sections_right_button_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.right_button_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_bottom"
      _default="2"
      ><input
      name=gmail_multiple_inbox_sections_right_button_padding_bottom_val
      size=3
      value=${s.right_button_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_bottom"
      _default="2"
      > right button: Padding Bottom
    <li><input
      name=gmail_multiple_inbox_sections_right_button_padding_top_range
      type=range
      min=0
      max=50
      value=${s.right_button_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_top"
      _default="2"
      ><input
      name=gmail_multiple_inbox_sections_right_button_padding_top_val
      size=3
      value=${s.right_button_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_top"
      _default="2"
      > right button: Padding Top
    <li><input
      name=gmail_multiple_inbox_sections_right_button_height_range
      type=range
      min=0
      max=50
      value=${s.right_button_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_height"
      _default="15"
      ><input
      name=gmail_multiple_inbox_sections_right_button_height_val
      size=3
      value=${s.right_button_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_height"
      _default="15"
      > right button: Height
    <li><input
      name=gmail_multiple_inbox_sections_right_button_line_height_range
      type=range
      min=0
      max=50
      value=${s.right_button_line_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_line_height"
      _default="15"
      ><input
      name=gmail_multiple_inbox_sections_right_button_line_height_val
      size=3
      value=${s.right_button_line_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_line_height"
      _default="15"
      > right button: Line Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  let e = form.elements;
  s._enabled = e.gmail_multiple_inbox_sections_enabled.checked;
  if (isNaN(s.row_height = parseInt(e.gmail_multiple_inbox_sections_row_height_val.value))) s.row_height = 29;
  if (isNaN(s.title_padding_bottom = parseInt(e.gmail_multiple_inbox_sections_title_padding_bottom_val.value))) s.title_padding_bottom = 4;
  if (isNaN(s.title_padding_top = parseInt(e.gmail_multiple_inbox_sections_title_padding_top_val.value))) s.title_padding_top = 4;
  if (isNaN(s.title_height = parseInt(e.gmail_multiple_inbox_sections_title_height_val.value))) s.title_height = 16;
  if (isNaN(s.title_padding_left = parseInt(e.gmail_multiple_inbox_sections_title_padding_left_val.value))) s.title_padding_left = 80;
  if (isNaN(s.right_button_padding_bottom = parseInt(e.gmail_multiple_inbox_sections_right_button_padding_bottom_val.value))) s.right_button_padding_bottom = 2;
  if (isNaN(s.right_button_padding_top = parseInt(e.gmail_multiple_inbox_sections_right_button_padding_top_val.value))) s.right_button_padding_top = 2;
  if (isNaN(s.right_button_height = parseInt(e.gmail_multiple_inbox_sections_right_button_height_val.value))) s.right_button_height = 15;
  if (isNaN(s.right_button_line_height = parseInt(e.gmail_multiple_inbox_sections_right_button_line_height_val.value))) s.right_button_line_height = 15;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  let e = form.elements;
  e.gmail_multiple_inbox_sections_enabled.checked = s._enabled;
  e.gmail_multiple_inbox_sections_row_height_range.value = e.gmail_multiple_inbox_sections_row_height_val.value = s.row_height;
  e.gmail_multiple_inbox_sections_title_padding_bottom_range.value = e.gmail_multiple_inbox_sections_title_padding_bottom_val.value = s.title_padding_bottom;
  e.gmail_multiple_inbox_sections_title_padding_top_range.value = e.gmail_multiple_inbox_sections_title_padding_top_val.value = s.title_padding_top;
  e.gmail_multiple_inbox_sections_title_height_range.value = e.gmail_multiple_inbox_sections_title_height_val.value = s.title_height;
  e.gmail_multiple_inbox_sections_title_padding_left_range.value = e.gmail_multiple_inbox_sections_title_padding_left_val.value = s.title_padding_left;
  e.gmail_multiple_inbox_sections_right_button_padding_bottom_range.value = e.gmail_multiple_inbox_sections_right_button_padding_bottom_val.value = s.right_button_padding_bottom;
  e.gmail_multiple_inbox_sections_right_button_padding_top_range.value = e.gmail_multiple_inbox_sections_right_button_padding_top_val.value = s.right_button_padding_top;
  e.gmail_multiple_inbox_sections_right_button_height_range.value = e.gmail_multiple_inbox_sections_right_button_height_val.value = s.right_button_height;
  e.gmail_multiple_inbox_sections_right_button_line_height_range.value = e.gmail_multiple_inbox_sections_right_button_line_height_val.value = s.right_button_line_height;
}

};  // end of nested class multiple_inbox_sections


///////////////////////////////////////////////////////////
// Functions for fix_too_large_hitboxes_for_email_selection_marks : Fix too large hitboxes for email selection marks
// Split: big
// Params: 

static fix_too_large_hitboxes_for_email_selection_marks = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.fix_too_large_hitboxes_for_email_selection_marks._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  if (!this.IsEnabled(settings)) return "/* Disabled: Fix too large hitboxes for email selection marks */\n\n";
  let {} = s;
  return `
/* Fix too large hitboxes for email selection marks */
.xY>.T-Jo::before {
    content: '';
    display: block;
    opacity: 0;
    position: absolute;
    transition-duration: 0s !important;
    z-index: -1;
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
    background: none;
    border-radius: 50%;
    box-sizing: border-box;
    transform: scale(0);
    transition-property: '';
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
}

.T-Jo::before {
    content: '' !important;
    display: block;
    opacity: 0;
    position: absolute;
    transition-duration: 0s !important;
    z-index: -1;
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
    background: none;
    border-radius: 50%;
    box-sizing: border-box;
    transform: scale(0);
    transition-property: '';
}

.xY>.T-Jo::after, .xY>.T-Jo-Jp::after {
    height: 0px !important;
    width: 0px !important;
}

.T-Jo::after {
    content: "";
    height: 100% !important;
    position: static !important;
    top: 0px !important;
    left: 0px !important;
    width: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled id=gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled _site=gmail _section_id="fix_too_large_hitboxes_for_email_selection_marks" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled> Fix too large hitboxes for email selection marks</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  let e = form.elements;
  s._enabled = e.gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  let e = form.elements;
  e.gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled.checked = s._enabled;

}

};  // end of nested class fix_too_large_hitboxes_for_email_selection_marks


///////////////////////////////////////////////////////////
// Functions for highlight_focused_hovered_line : Highlight focused/hovered line
// Split: minor
// Params: 

static highlight_focused_hovered_line = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.highlight_focused_hovered_line._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  if (!this.IsEnabled(settings)) return "/* Disabled: Highlight focused/hovered line */\n\n";
  let {} = s;
  return `
/* Highlight focused/hovered line */
.zA:hover, .zA:focus {
    box-shadow: inset 0 0 10px 0px #808080;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_highlight_focused_hovered_line_enabled id=gmail_highlight_focused_hovered_line_enabled _site=gmail _section_id="highlight_focused_hovered_line" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_highlight_focused_hovered_line_enabled> Highlight focused/hovered line</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  let e = form.elements;
  s._enabled = e.gmail_highlight_focused_hovered_line_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  let e = form.elements;
  e.gmail_highlight_focused_hovered_line_enabled.checked = s._enabled;

}

};  // end of nested class highlight_focused_hovered_line


///////////////////////////////////////////////////////////
// Functions for labels_tree : Labels tree
// Split: minor
// Params: [height 1 18 Height]

static labels_tree = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  s._enabled = true;
  s.height = 18;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 18;
}

static IsEnabled(settings) {
  return settings.labels_tree._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels tree */\n\n";
  let {height} = s;
  return `
/* Labels tree */
.TN {
    height: ${height}px !important;        /* @1 */
    overflow: hidden;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_labels_tree_enabled id=gmail_labels_tree_enabled _site=gmail _section_id="labels_tree" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_labels_tree_enabled> Labels tree</label>
  <ul>
    <li><input
      name=gmail_labels_tree_height_range
      type=range
      min=0
      max=50
      value=${s.height}
      _site=gmail
      _section_id="labels_tree"
      _setting_id="height"
      _default="18"
      ><input
      name=gmail_labels_tree_height_val
      size=3
      value=${s.height}
      _site=gmail
      _section_id="labels_tree"
      _setting_id="height"
      _default="18"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  let e = form.elements;
  s._enabled = e.gmail_labels_tree_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_labels_tree_height_val.value))) s.height = 18;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  let e = form.elements;
  e.gmail_labels_tree_enabled.checked = s._enabled;
  e.gmail_labels_tree_height_range.value = e.gmail_labels_tree_height_val.value = s.height;
}

};  // end of nested class labels_tree


///////////////////////////////////////////////////////////
// Functions for nav_labels : Labels nav width 240 -> 200
// Split: minor
// Params: [width 1 200 Max Width]

static nav_labels = class {

static params = ["width"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  s._enabled = true;
  s.width = 200;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('width')) s.width = 200;
}

static IsEnabled(settings) {
  return settings.nav_labels._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels nav width 240 -> 200 */\n\n";
  let {width} = s;
  return `
/* Labels nav width 240 -> 200 */
div.aeN:not(.bhZ) .wT {
    max-width: ${width}px !important;    /* @1 @width */
    min-width: ${width}px !important;    /* @1=width */
}
/*-Labels nav scroll bar: 16px -> 10px */
/*-NOTE: has to add "div." in order to raise the priority */
div.aeN:not(.bhZ) {
    max-width: ${settings.nav_labels.width+10}px !important;    /* @1=settings.nav_labels.width+10 */
    min-width: ${settings.nav_labels.width+10}px !important;    /* @1=settings.nav_labels.width+10 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_nav_labels_enabled id=gmail_nav_labels_enabled _site=gmail _section_id="nav_labels" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_nav_labels_enabled> Labels nav width 240 -> 200</label>
  <ul>
    <li><input
      name=gmail_nav_labels_width_range
      type=range
      min=0
      max=1000
      value=${s.width}
      _site=gmail
      _section_id="nav_labels"
      _setting_id="width"
      _default="200"
      ><input
      name=gmail_nav_labels_width_val
      size=3
      value=${s.width}
      _site=gmail
      _section_id="nav_labels"
      _setting_id="width"
      _default="200"
      > Max Width
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  let e = form.elements;
  s._enabled = e.gmail_nav_labels_enabled.checked;
  if (isNaN(s.width = parseInt(e.gmail_nav_labels_width_val.value))) s.width = 200;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  let e = form.elements;
  e.gmail_nav_labels_enabled.checked = s._enabled;
  e.gmail_nav_labels_width_range.value = e.gmail_nav_labels_width_val.value = s.width;
}

};  // end of nested class nav_labels


///////////////////////////////////////////////////////////
// Functions for nav_labels_collapsed : Collapsed nav expands wider
// Split: no
// Params: [width 1 300 Max Width]

static nav_labels_collapsed = class {

static params = ["width"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  s._enabled = true;
  s.width = 300;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('width')) s.width = 300;
}

static IsEnabled(settings) {
  return settings.nav_labels_collapsed._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  if (!this.IsEnabled(settings)) return "/* Disabled: Collapsed nav expands wider */\n\n";
  let {width} = s;
  return `
/* Collapsed nav expands wider */
div.bhZ.bym div.wT {
    max-width: ${width}px !important;    /* @1 @width */
    min-width: ${width}px !important;    /* @1=width */
}
/*-Labels nav scroll bar: 16px */
/*-NOTE: has to add "div." in order to raise the priority */
div.aeN.bhZ.bym {
    max-width: ${settings.nav_labels_collapsed.width+16}px !important;    /* @1=settings.nav_labels_collapsed.width+16 */
    min-width: ${settings.nav_labels_collapsed.width+16}px !important;    /* @1=settings.nav_labels_collapsed.width+16 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  return `
  <li>
  <input type=checkbox name=gmail_nav_labels_collapsed_enabled id=gmail_nav_labels_collapsed_enabled _site=gmail _section_id="nav_labels_collapsed" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_nav_labels_collapsed_enabled> Collapsed nav expands wider</label>
  <ul>
    <li><input
      name=gmail_nav_labels_collapsed_width_range
      type=range
      min=0
      max=1000
      value=${s.width}
      _site=gmail
      _section_id="nav_labels_collapsed"
      _setting_id="width"
      _default="300"
      ><input
      name=gmail_nav_labels_collapsed_width_val
      size=3
      value=${s.width}
      _site=gmail
      _section_id="nav_labels_collapsed"
      _setting_id="width"
      _default="300"
      > Max Width
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  let e = form.elements;
  s._enabled = e.gmail_nav_labels_collapsed_enabled.checked;
  if (isNaN(s.width = parseInt(e.gmail_nav_labels_collapsed_width_val.value))) s.width = 300;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  let e = form.elements;
  e.gmail_nav_labels_collapsed_enabled.checked = s._enabled;
  e.gmail_nav_labels_collapsed_width_range.value = e.gmail_nav_labels_collapsed_width_val.value = s.width;
}

};  // end of nested class nav_labels_collapsed


///////////////////////////////////////////////////////////
// Functions for compose_button : Compose button
// Split: minor
// Params: 

static compose_button = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compose_button._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compose button */\n\n";
  let {} = s;
  return `
/* Compose button */
.z0>.L3 {
    height: 30px !important;
}
.z0 {
    height: 30px !important;
    margin: 4px 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_compose_button_enabled id=gmail_compose_button_enabled _site=gmail _section_id="compose_button" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_compose_button_enabled> Compose button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  let e = form.elements;
  s._enabled = e.gmail_compose_button_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  let e = form.elements;
  e.gmail_compose_button_enabled.checked = s._enabled;

}

};  // end of nested class compose_button


///////////////////////////////////////////////////////////
// Functions for hide_huge_blue__search_refinement__buttons : Hide huge blue 'search refinement' buttons
// Split: minor
// Params: 

static hide_huge_blue__search_refinement__buttons = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.hide_huge_blue__search_refinement__buttons._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  if (!this.IsEnabled(settings)) return "/* Disabled: Hide huge blue 'search refinement' buttons */\n\n";
  let {} = s;
  return `
/* Hide huge blue 'search refinement' buttons */
div[role='toolbar'][aria-label='search refinement'] {
  display:none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_hide_huge_blue__search_refinement__buttons_enabled id=gmail_hide_huge_blue__search_refinement__buttons_enabled _site=gmail _section_id="hide_huge_blue__search_refinement__buttons" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_hide_huge_blue__search_refinement__buttons_enabled> Hide huge blue 'search refinement' buttons</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  let e = form.elements;
  s._enabled = e.gmail_hide_huge_blue__search_refinement__buttons_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  let e = form.elements;
  e.gmail_hide_huge_blue__search_refinement__buttons_enabled.checked = s._enabled;

}

};  // end of nested class hide_huge_blue__search_refinement__buttons


///////////////////////////////////////////////////////////
// Functions for area_right_to_the_compose_button_and_above_the_list_of_emails : Area right to the compose button and above the list of emails
// Split: no
// Params: [height 1 26 Height]

static area_right_to_the_compose_button_and_above_the_list_of_emails = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  s._enabled = true;
  s.height = 26;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 26;
}

static IsEnabled(settings) {
  return settings.area_right_to_the_compose_button_and_above_the_list_of_emails._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  if (!this.IsEnabled(settings)) return "/* Disabled: Area right to the compose button and above the list of emails */\n\n";
  let {height} = s;
  return `
/* Area right to the compose button and above the list of emails */
.G-atb {
    height: ${height}px !important;          /* @1 */
    overflow: hidden;
}
/*-Absolutely empty invisible hren hiding buttons */
header[role=banner] > :nth-child(3) {
    display:none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  return `
  <li>
  <input type=checkbox name=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled id=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled _site=gmail _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled> Area right to the compose button and above the list of emails</label>
  <ul>
    <li><input
      name=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=gmail
      _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails"
      _setting_id="height"
      _default="26"
      ><input
      name=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val
      size=3
      value=${s.height}
      _site=gmail
      _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails"
      _setting_id="height"
      _default="26"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  let e = form.elements;
  s._enabled = e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val.value))) s.height = 26;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  let e = form.elements;
  e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled.checked = s._enabled;
  e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_range.value = e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val.value = s.height;
}

};  // end of nested class area_right_to_the_compose_button_and_above_the_list_of_emails


///////////////////////////////////////////////////////////
// Functions for subject_bar_when_reading_email : Subject bar when reading email
// Split: minor
// Params: [padding_top 1 8 Padding Top], [padding_bottom 1 0 Padding Bottom], [padding_left 1 10 Padding Left]

static subject_bar_when_reading_email = class {

static params = ["padding_top", "padding_bottom", "padding_left"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  s._enabled = true;
  s.padding_top = 8;
  s.padding_bottom = 0;
  s.padding_left = 10;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 8;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
  if (!s.hasOwnProperty('padding_left')) s.padding_left = 10;
}

static IsEnabled(settings) {
  return settings.subject_bar_when_reading_email._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  if (!this.IsEnabled(settings)) return "/* Disabled: Subject bar when reading email */\n\n";
  let {padding_top, padding_bottom, padding_left} = s;
  return `
/* Subject bar when reading email */
.if>.byY, .iC .byY {
    padding-top: ${padding_top}px !important;      /* @1 */
    padding-bottom: ${padding_bottom}px !important;   /* @1 */
    padding-left: ${padding_left}px !important;    /* @1 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_subject_bar_when_reading_email_enabled id=gmail_subject_bar_when_reading_email_enabled _site=gmail _section_id="subject_bar_when_reading_email" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_subject_bar_when_reading_email_enabled> Subject bar when reading email</label>
  <ul>
    <li><input
      name=gmail_subject_bar_when_reading_email_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_top"
      _default="8"
      ><input
      name=gmail_subject_bar_when_reading_email_padding_top_val
      size=3
      value=${s.padding_top}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_top"
      _default="8"
      > Padding Top
    <li><input
      name=gmail_subject_bar_when_reading_email_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=gmail_subject_bar_when_reading_email_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
    <li><input
      name=gmail_subject_bar_when_reading_email_padding_left_range
      type=range
      min=0
      max=50
      value=${s.padding_left}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_left"
      _default="10"
      ><input
      name=gmail_subject_bar_when_reading_email_padding_left_val
      size=3
      value=${s.padding_left}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_left"
      _default="10"
      > Padding Left
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  let e = form.elements;
  s._enabled = e.gmail_subject_bar_when_reading_email_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.gmail_subject_bar_when_reading_email_padding_top_val.value))) s.padding_top = 8;
  if (isNaN(s.padding_bottom = parseInt(e.gmail_subject_bar_when_reading_email_padding_bottom_val.value))) s.padding_bottom = 0;
  if (isNaN(s.padding_left = parseInt(e.gmail_subject_bar_when_reading_email_padding_left_val.value))) s.padding_left = 10;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  let e = form.elements;
  e.gmail_subject_bar_when_reading_email_enabled.checked = s._enabled;
  e.gmail_subject_bar_when_reading_email_padding_top_range.value = e.gmail_subject_bar_when_reading_email_padding_top_val.value = s.padding_top;
  e.gmail_subject_bar_when_reading_email_padding_bottom_range.value = e.gmail_subject_bar_when_reading_email_padding_bottom_val.value = s.padding_bottom;
  e.gmail_subject_bar_when_reading_email_padding_left_range.value = e.gmail_subject_bar_when_reading_email_padding_left_val.value = s.padding_left;
}

};  // end of nested class subject_bar_when_reading_email


///////////////////////////////////////////////////////////
// Functions for email_reply_text_area__add_border : Email reply text area: add border
// Split: minor
// Params: 

static email_reply_text_area__add_border = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.email_reply_text_area__add_border._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  if (!this.IsEnabled(settings)) return "/* Disabled: Email reply text area: add border */\n\n";
  let {} = s;
  return `
/* Email reply text area: add border */
.qz {
    border-top: 1px solid #e0e0e0 !important;
    border-bottom: 1px solid #e0e0e0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_email_reply_text_area__add_border_enabled id=gmail_email_reply_text_area__add_border_enabled _site=gmail _section_id="email_reply_text_area__add_border" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_email_reply_text_area__add_border_enabled> Email reply text area: add border</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  let e = form.elements;
  s._enabled = e.gmail_email_reply_text_area__add_border_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  let e = form.elements;
  e.gmail_email_reply_text_area__add_border_enabled.checked = s._enabled;

}

};  // end of nested class email_reply_text_area__add_border


///////////////////////////////////////////////////////////
// Functions for reply_form_uses_full_width : Reply form uses full width
// Split: no
// Params: [padding 1 6 Padding]

static reply_form_uses_full_width = class {

static params = ["padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  s._enabled = true;
  s.padding = 6;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding')) s.padding = 6;
}

static IsEnabled(settings) {
  return settings.reply_form_uses_full_width._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reply form uses full width */\n\n";
  let {padding} = s;
  return `
/* Reply form uses full width */
.adB .aoI {
    padding: 0 !important;
}
.HM .et {
    padding-left: ${padding}px !important;   /* @1 @padding Padding */
    padding-right: ${padding}px !important;  /* @1=padding */
}
.Ur {
    margin-left: ${padding}px !important;    /* @1=padding */
}
table.IG {
    padding: 0px ${padding}px !important;    /* @2=padding */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  return `
  <li>
  <input type=checkbox name=gmail_reply_form_uses_full_width_enabled id=gmail_reply_form_uses_full_width_enabled _site=gmail _section_id="reply_form_uses_full_width" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_reply_form_uses_full_width_enabled> Reply form uses full width</label>
  <ul>
    <li><input
      name=gmail_reply_form_uses_full_width_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="reply_form_uses_full_width"
      _setting_id="padding"
      _default="6"
      ><input
      name=gmail_reply_form_uses_full_width_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="reply_form_uses_full_width"
      _setting_id="padding"
      _default="6"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  let e = form.elements;
  s._enabled = e.gmail_reply_form_uses_full_width_enabled.checked;
  if (isNaN(s.padding = parseInt(e.gmail_reply_form_uses_full_width_padding_val.value))) s.padding = 6;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  let e = form.elements;
  e.gmail_reply_form_uses_full_width_enabled.checked = s._enabled;
  e.gmail_reply_form_uses_full_width_padding_range.value = e.gmail_reply_form_uses_full_width_padding_val.value = s.padding;
}

};  // end of nested class reply_form_uses_full_width


///////////////////////////////////////////////////////////
// Functions for in_page_compose_window_header : In-page compose window header
// Split: minor
// Params: [padding 1 0 Padding Top]

static in_page_compose_window_header = class {

static params = ["padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  s._enabled = true;
  s.padding = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding')) s.padding = 0;
}

static IsEnabled(settings) {
  return settings.in_page_compose_window_header._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  if (!this.IsEnabled(settings)) return "/* Disabled: In-page compose window header */\n\n";
  let {padding} = s;
  return `
/* In-page compose window header */
.Hp {
  margin-left: 6px;
  padding: 0 !important;
  padding-top: ${padding} !important;       /* @1 @padding */
  padding-bottom: ${padding} !important;    /* @1=padding */
}
.Hm {
  padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_in_page_compose_window_header_enabled id=gmail_in_page_compose_window_header_enabled _site=gmail _section_id="in_page_compose_window_header" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_in_page_compose_window_header_enabled> In-page compose window header</label>
  <ul>
    <li><input
      name=gmail_in_page_compose_window_header_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="in_page_compose_window_header"
      _setting_id="padding"
      _default="0"
      ><input
      name=gmail_in_page_compose_window_header_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="in_page_compose_window_header"
      _setting_id="padding"
      _default="0"
      > Padding Top
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  let e = form.elements;
  s._enabled = e.gmail_in_page_compose_window_header_enabled.checked;
  if (isNaN(s.padding = parseInt(e.gmail_in_page_compose_window_header_padding_val.value))) s.padding = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  let e = form.elements;
  e.gmail_in_page_compose_window_header_enabled.checked = s._enabled;
  e.gmail_in_page_compose_window_header_padding_range.value = e.gmail_in_page_compose_window_header_padding_val.value = s.padding;
}

};  // end of nested class in_page_compose_window_header


///////////////////////////////////////////////////////////
// Functions for absolutely_empty_space_above_chat : Absolutely empty space above chat
// Split: minor
// Params: 

static absolutely_empty_space_above_chat = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.absolutely_empty_space_above_chat._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  if (!this.IsEnabled(settings)) return "/* Disabled: Absolutely empty space above chat */\n\n";
  let {} = s;
  return `
/* Absolutely empty space above chat */
.akj {
    margin-top: 10px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_absolutely_empty_space_above_chat_enabled id=gmail_absolutely_empty_space_above_chat_enabled _site=gmail _section_id="absolutely_empty_space_above_chat" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_absolutely_empty_space_above_chat_enabled> Absolutely empty space above chat</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  let e = form.elements;
  s._enabled = e.gmail_absolutely_empty_space_above_chat_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  let e = form.elements;
  e.gmail_absolutely_empty_space_above_chat_enabled.checked = s._enabled;

}

};  // end of nested class absolutely_empty_space_above_chat


///////////////////////////////////////////////////////////
// Functions for padding_on_the_right_of_the_chat : Padding on the right of the chat
// Split: no
// Params: 

static padding_on_the_right_of_the_chat = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.padding_on_the_right_of_the_chat._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  if (!this.IsEnabled(settings)) return "/* Disabled: Padding on the right of the chat */\n\n";
  let {} = s;
  return `
/* Padding on the right of the chat */
div.aCl div.akj {
    padding-right: 0px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  return `
  <li>
  <input type=checkbox name=gmail_padding_on_the_right_of_the_chat_enabled id=gmail_padding_on_the_right_of_the_chat_enabled _site=gmail _section_id="padding_on_the_right_of_the_chat" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_padding_on_the_right_of_the_chat_enabled> Padding on the right of the chat</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  let e = form.elements;
  s._enabled = e.gmail_padding_on_the_right_of_the_chat_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  let e = form.elements;
  e.gmail_padding_on_the_right_of_the_chat_enabled.checked = s._enabled;

}

};  // end of nested class padding_on_the_right_of_the_chat


///////////////////////////////////////////////////////////
// Functions for compact_chat_contact_list : Compact chat contact list
// Split: no
// Params: 

static compact_chat_contact_list = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compact_chat_contact_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact chat contact list */\n\n";
  let {} = s;
  return `
/* Compact chat contact list */
.V6.CL { /*--contact list headings--*/
  height: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  return `
  <li>
  <input type=checkbox name=gmail_compact_chat_contact_list_enabled id=gmail_compact_chat_contact_list_enabled _site=gmail _section_id="compact_chat_contact_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_compact_chat_contact_list_enabled> Compact chat contact list</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  let e = form.elements;
  s._enabled = e.gmail_compact_chat_contact_list_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  let e = form.elements;
  e.gmail_compact_chat_contact_list_enabled.checked = s._enabled;

}

};  // end of nested class compact_chat_contact_list


///////////////////////////////////////////////////////////
// Functions for clearer_chat_contact_list_sections_separator : Clearer chat contact list sections separator
// Split: no
// Params: 

static clearer_chat_contact_list_sections_separator = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.clearer_chat_contact_list_sections_separator._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  if (!this.IsEnabled(settings)) return "/* Disabled: Clearer chat contact list sections separator */\n\n";
  let {} = s;
  return `
/* Clearer chat contact list sections separator */
.WR .Xa .X9 {
  background: linear-gradient(180deg, #E0E0E0 0, #FFF 1rem) !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  return `
  <li>
  <input type=checkbox name=gmail_clearer_chat_contact_list_sections_separator_enabled id=gmail_clearer_chat_contact_list_sections_separator_enabled _site=gmail _section_id="clearer_chat_contact_list_sections_separator" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_clearer_chat_contact_list_sections_separator_enabled> Clearer chat contact list sections separator</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  let e = form.elements;
  s._enabled = e.gmail_clearer_chat_contact_list_sections_separator_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  let e = form.elements;
  e.gmail_clearer_chat_contact_list_sections_separator_enabled.checked = s._enabled;

}

};  // end of nested class clearer_chat_contact_list_sections_separator


///////////////////////////////////////////////////////////
// Functions for top_bar : Top bar width, height, paddings
// Split: big
// Params: 

static top_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.top_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Top bar width, height, paddings */\n\n";
  let {} = s;
  return `
/* Top bar width, height, paddings */
/*-Top bar paddings */
.gb_Va:not(.gb_Wa) .gb_Ld ,
.gb_Va:not(.gb_Wa) .gb_Md {
    padding: 0px !important;
}

/*-Top bar height */
.gb_Dc , .gb_Ec , .gb_Mc , [data-ogsr-up] {
    height: 34px !important;
}
header[role=banner] > div {
    padding: 0px !important;
}
div.gb_ce {
    height: 36px !important;
}
header[role=banner] > div:nth-child(2) > div:first-child ,
header[role=banner] > div:nth-child(2) > div:nth-child(2) ,
header[role=banner] > div:nth-child(2) > div:nth-child(2) > div
{
    height: 36px !important;
}
/*-search bar */
.gb_jf , .gb_kf, .gb_0d, .gb_6d {
    height: 36px !important;
}
.gb_Bf , .gb_Cf , form#aso_search_form_anchor > div[gh=sb] {
    height: 32px !important;
}
form#aso_search_form_anchor > div[gh=sb] > table[role=presentation] > tbody > tr {
    height: 0px !important;
}
form#aso_search_form_anchor > div[gh=sb] > table[role=presentation] table td {
    padding: 0px !important;
}
/*-Parent td of input[name=q] */
td.gsib_a {
    vertical-align: top !important;
}
/*-search bar icons and buttons */
.gb_1e button svg, .gb_1e button img,
.gb_2e button svg, .gb_2e button img,
form#aso_search_form_anchor button svg, form#aso_search_form_anchor button img
{
    padding: 2px !important;
    margin: 2px !important;
}
/*-top bar right icons */
.gb_Pe {
    background: inherit !important;
    background-color: inherit !important;
}
/*-Smaller sandwitch menu button */
.gb_ic , .gb_jc , .gb_pc , div[aria-label="Main menu"] {
    -webkit-border-radius: 25% !important;
    border-radius: 25% !important;
    padding: 4px !important;
}

/*-Top bar, account access */
div.gb_Va.gb_Mg.gb_R,
div.gb_Va.gb_Pg.gb_R {
    max-height: 41px !important;
    margin-top: -8px !important;
}
/*-Account dropdown */
div.gb_aa {
    top: 36px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_top_bar_enabled id=gmail_top_bar_enabled _site=gmail _section_id="top_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_top_bar_enabled> Top bar width, height, paddings</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  let e = form.elements;
  s._enabled = e.gmail_top_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  let e = form.elements;
  e.gmail_top_bar_enabled.checked = s._enabled;

}

};  // end of nested class top_bar


///////////////////////////////////////////////////////////
// Functions for buttons_look_active_and_clickable__exclude_label_tags_ : Buttons look active and clickable. Exclude label tags.
// Split: minor
// Params: 

static buttons_look_active_and_clickable__exclude_label_tags_ = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.buttons_look_active_and_clickable__exclude_label_tags_._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  if (!this.IsEnabled(settings)) return "/* Disabled: Buttons look active and clickable. Exclude label tags. */\n\n";
  let {} = s;
  return `
/* Buttons look active and clickable. Exclude label tags. */
div[role=button]:not(.hN) {
    box-shadow: 0 0 1px 0px #808080 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled id=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled _site=gmail _section_id="buttons_look_active_and_clickable__exclude_label_tags_" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled> Buttons look active and clickable. Exclude label tags.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  let e = form.elements;
  s._enabled = e.gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  let e = form.elements;
  e.gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled.checked = s._enabled;

}

};  // end of nested class buttons_look_active_and_clickable__exclude_label_tags_


///////////////////////////////////////////////////////////
// Functions for reduce_side_panel_when_it_s_collapsed : Reduce side panel when it's collapsed
// Split: minor
// Params: 

static reduce_side_panel_when_it_s_collapsed = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.reduce_side_panel_when_it_s_collapsed._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce side panel when it's collapsed */\n\n";
  let {} = s;
  return `
/* Reduce side panel when it's collapsed */
.bAw.it {
    min-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_reduce_side_panel_when_it_s_collapsed_enabled id=gmail_reduce_side_panel_when_it_s_collapsed_enabled _site=gmail _section_id="reduce_side_panel_when_it_s_collapsed" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_reduce_side_panel_when_it_s_collapsed_enabled> Reduce side panel when it's collapsed</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  let e = form.elements;
  s._enabled = e.gmail_reduce_side_panel_when_it_s_collapsed_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  let e = form.elements;
  e.gmail_reduce_side_panel_when_it_s_collapsed_enabled.checked = s._enabled;

}

};  // end of nested class reduce_side_panel_when_it_s_collapsed


///////////////////////////////////////////////////////////
// Functions for print_cleanup : Print view cleanup button
// Split: big
// Params: 

static print_cleanup = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.print_cleanup._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  if (!this.IsEnabled(settings)) return "/* Disabled: Print view cleanup button */\n\n";
  let {} = s;
  return `
/* Print view cleanup button */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["print_cleanup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
if (location.href.match(/[&?]view=pt/)) {
  document.querySelector("table td:last-child").insertAdjacentHTML("beforeBegin", `<td><button id=tidyup>Clean Up</button></td>`);
  tidyup.onclick = ()=> {
    [...document.querySelectorAll(`
body > div.bodycontainer > table,
font[color="#888888"],
font[color="#550055"],
div[data-smartmail="gmail_signature"],
.gmail_quote > .gmail_quote,
.recipient
`)].forEach(e => e.remove());

    // Remove all after hidden quote
    document.querySelectorAll(`div[style="padding:5 0"]`).forEach(e => {
      while (e.nextSibling) e.nextSibling.remove();
      e.remove();
    });

    // Remove everything after "--"
    [...(function*(){
      let next, it = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT);
      while (next = it.nextNode()) yield next;
    })()].
      filter(e => e.data === "-- ").
      forEach(e => {
        while (e.nextSibling) e.nextSibling.remove(); e.remove();
      });

    [...(function*(){
      let next, it = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT);
      while (next = it.nextNode()) yield next;
    })()].
      filter(e => e.data.indexOf("To view this discussion on the web visit") != -1).
      forEach(e => {
        e.nextSibling.remove();
        e.nextSibling.remove();
        e.remove();
      });
  };
}


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_print_cleanup_enabled id=gmail_print_cleanup_enabled _site=gmail _section_id="print_cleanup" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_print_cleanup_enabled> Print view cleanup button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  let e = form.elements;
  s._enabled = e.gmail_print_cleanup_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  let e = form.elements;
  e.gmail_print_cleanup_enabled.checked = s._enabled;

}

};  // end of nested class print_cleanup


///////////////////////////////////////////////////////////
// Functions for color_msglist : Color message list by recency
// Split: big
// Params: 

static color_msglist = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.color_msglist._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  if (!this.IsEnabled(settings)) return "/* Disabled: Color message list by recency */\n\n";
  let {} = s;
  return `
/* Color message list by recency */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["color_by_recency.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let isFocused = true;
let savedElement;

function doUpdate() {
    if (!isFocused) return;
    let now = new Date();
    [...document.querySelectorAll(`table[aria-readonly="true"] tr[role="row"] td[role="gridcell"] :is(span[aria-label^="Sun, "],span[aria-label^="Mon, "],span[aria-label^="Tue, "],span[aria-label^="Wed, "],span[aria-label^="Thu, "],span[aria-label^="Fri, "],span[aria-label^="Sat, "])`)].forEach(e => {
        savedElement = e;
        let d = (now - new Date(e.title))/24/3600/1000;
        let a = 0.3/(d/7+1);
        e.closest(`tr`).style.background = `hsla(${300 - d * 90 / 7}, 100% , ${Math.max(0, 50 - d/21*50)}%, ${a})`;
    });
}
function periodicUpdate() {
    if (!isFocused || (savedElement?.isConnected && savedElement?.offsetHeight)) return;
    doUpdate();
}

setInterval(periodicUpdate, 2000);

document.addEventListener("click", ()=>setTimeout(doUpdate, 150));
window.addEventListener("focus", ()=>{isFocused=true; doUpdate();});
window.addEventListener("blur", ()=>isFocused=false);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_color_msglist_enabled id=gmail_color_msglist_enabled _site=gmail _section_id="color_msglist" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_color_msglist_enabled> Color message list by recency</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  let e = form.elements;
  s._enabled = e.gmail_color_msglist_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  let e = form.elements;
  e.gmail_color_msglist_enabled.checked = s._enabled;

}

};  // end of nested class color_msglist


///////////////////////////////////////////////////////////
// Functions for full_dates : Display full date and time
// Split: big
// Params: 

static full_dates = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.full_dates._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  if (!this.IsEnabled(settings)) return "/* Disabled: Display full date and time */\n\n";
  let {} = s;
  return `
/* Display full date and time */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["full_dates.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let isFocused = true;
let savedElement;

function doUpdate() {
    if (!isFocused) return;
    [...document.querySelectorAll(`table[aria-readonly="true"] tr[role="row"] td[role="gridcell"] :is(span[aria-label^="Sun, "],span[aria-label^="Mon, "],span[aria-label^="Tue, "],span[aria-label^="Wed, "],span[aria-label^="Thu, "],span[aria-label^="Fri, "],span[aria-label^="Sat, "])`)].forEach(e => {
        savedElement = e;
        let ee = e.querySelector("span");
        if (ee && ee.innerHTML.match(/^\d/)) {
            ee.innerText = e.title;
        }
    });
}
    function periodicUpdate() {
    if (!isFocused || (savedElement?.isConnected && savedElement?.offsetHeight)) return;
    doUpdate();
}

setInterval(periodicUpdate, 2000);

document.addEventListener("click", ()=>setTimeout(doUpdate, 150));
window.addEventListener("focus", ()=>{isFocused=true; doUpdate();});
window.addEventListener("blur", ()=>isFocused=false);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_full_dates_enabled id=gmail_full_dates_enabled _site=gmail _section_id="full_dates" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_full_dates_enabled> Display full date and time</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  let e = form.elements;
  s._enabled = e.gmail_full_dates_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  let e = form.elements;
  e.gmail_full_dates_enabled.checked = s._enabled;

}

};  // end of nested class full_dates


///////////////////////////////////////////////////////////
// Interface functions

static id = "gmail";
static fields = ["dark_mode", "no_animations", "list_of_emails", "horizontal_cell_paddings_in_grid_cells", "spacing_between_emails_in_thread_view", "labels_in_emails_list", "smaller_font_for_labels_in_emails_list", "limit_the_width_of_labels_in_emails_list", "extra_width_for_special_labels_in_emails_list", "shrink_general_labels_in_emails_list__like_inbox", "sections_splitter", "multiple_inbox_sections", "fix_too_large_hitboxes_for_email_selection_marks", "highlight_focused_hovered_line", "labels_tree", "nav_labels", "nav_labels_collapsed", "compose_button", "hide_huge_blue__search_refinement__buttons", "area_right_to_the_compose_button_and_above_the_list_of_emails", "subject_bar_when_reading_email", "email_reply_text_area__add_border", "reply_form_uses_full_width", "in_page_compose_window_header", "absolutely_empty_space_above_chat", "padding_on_the_right_of_the_chat", "compact_chat_contact_list", "clearer_chat_contact_list_sections_separator", "top_bar", "buttons_look_active_and_clickable__exclude_label_tags_", "reduce_side_panel_when_it_s_collapsed", "print_cleanup", "color_msglist", "full_dates"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module gmail disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.list_of_emails.GenStyle(settings) +
  this.horizontal_cell_paddings_in_grid_cells.GenStyle(settings) +
  this.spacing_between_emails_in_thread_view.GenStyle(settings) +
  this.labels_in_emails_list.GenStyle(settings) +
  this.smaller_font_for_labels_in_emails_list.GenStyle(settings) +
  this.limit_the_width_of_labels_in_emails_list.GenStyle(settings) +
  this.extra_width_for_special_labels_in_emails_list.GenStyle(settings) +
  this.shrink_general_labels_in_emails_list__like_inbox.GenStyle(settings) +
  this.sections_splitter.GenStyle(settings) +
  this.multiple_inbox_sections.GenStyle(settings) +
  this.fix_too_large_hitboxes_for_email_selection_marks.GenStyle(settings) +
  this.highlight_focused_hovered_line.GenStyle(settings) +
  this.labels_tree.GenStyle(settings) +
  this.nav_labels.GenStyle(settings) +
  this.nav_labels_collapsed.GenStyle(settings) +
  this.compose_button.GenStyle(settings) +
  this.hide_huge_blue__search_refinement__buttons.GenStyle(settings) +
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenStyle(settings) +
  this.subject_bar_when_reading_email.GenStyle(settings) +
  this.email_reply_text_area__add_border.GenStyle(settings) +
  this.reply_form_uses_full_width.GenStyle(settings) +
  this.in_page_compose_window_header.GenStyle(settings) +
  this.absolutely_empty_space_above_chat.GenStyle(settings) +
  this.padding_on_the_right_of_the_chat.GenStyle(settings) +
  this.compact_chat_contact_list.GenStyle(settings) +
  this.clearer_chat_contact_list_sections_separator.GenStyle(settings) +
  this.top_bar.GenStyle(settings) +
  this.buttons_look_active_and_clickable__exclude_label_tags_.GenStyle(settings) +
  this.reduce_side_panel_when_it_s_collapsed.GenStyle(settings) +
  this.print_cleanup.GenStyle(settings) +
  this.color_msglist.GenStyle(settings) +
  this.full_dates.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.list_of_emails.GenScriptUrls(settings),
    ...this.horizontal_cell_paddings_in_grid_cells.GenScriptUrls(settings),
    ...this.spacing_between_emails_in_thread_view.GenScriptUrls(settings),
    ...this.labels_in_emails_list.GenScriptUrls(settings),
    ...this.smaller_font_for_labels_in_emails_list.GenScriptUrls(settings),
    ...this.limit_the_width_of_labels_in_emails_list.GenScriptUrls(settings),
    ...this.extra_width_for_special_labels_in_emails_list.GenScriptUrls(settings),
    ...this.shrink_general_labels_in_emails_list__like_inbox.GenScriptUrls(settings),
    ...this.sections_splitter.GenScriptUrls(settings),
    ...this.multiple_inbox_sections.GenScriptUrls(settings),
    ...this.fix_too_large_hitboxes_for_email_selection_marks.GenScriptUrls(settings),
    ...this.highlight_focused_hovered_line.GenScriptUrls(settings),
    ...this.labels_tree.GenScriptUrls(settings),
    ...this.nav_labels.GenScriptUrls(settings),
    ...this.nav_labels_collapsed.GenScriptUrls(settings),
    ...this.compose_button.GenScriptUrls(settings),
    ...this.hide_huge_blue__search_refinement__buttons.GenScriptUrls(settings),
    ...this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenScriptUrls(settings),
    ...this.subject_bar_when_reading_email.GenScriptUrls(settings),
    ...this.email_reply_text_area__add_border.GenScriptUrls(settings),
    ...this.reply_form_uses_full_width.GenScriptUrls(settings),
    ...this.in_page_compose_window_header.GenScriptUrls(settings),
    ...this.absolutely_empty_space_above_chat.GenScriptUrls(settings),
    ...this.padding_on_the_right_of_the_chat.GenScriptUrls(settings),
    ...this.compact_chat_contact_list.GenScriptUrls(settings),
    ...this.clearer_chat_contact_list_sections_separator.GenScriptUrls(settings),
    ...this.top_bar.GenScriptUrls(settings),
    ...this.buttons_look_active_and_clickable__exclude_label_tags_.GenScriptUrls(settings),
    ...this.reduce_side_panel_when_it_s_collapsed.GenScriptUrls(settings),
    ...this.print_cleanup.GenScriptUrls(settings),
    ...this.color_msglist.GenScriptUrls(settings),
    ...this.full_dates.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.list_of_emails.GetScript(settings),
    this.horizontal_cell_paddings_in_grid_cells.GetScript(settings),
    this.spacing_between_emails_in_thread_view.GetScript(settings),
    this.labels_in_emails_list.GetScript(settings),
    this.smaller_font_for_labels_in_emails_list.GetScript(settings),
    this.limit_the_width_of_labels_in_emails_list.GetScript(settings),
    this.extra_width_for_special_labels_in_emails_list.GetScript(settings),
    this.shrink_general_labels_in_emails_list__like_inbox.GetScript(settings),
    this.sections_splitter.GetScript(settings),
    this.multiple_inbox_sections.GetScript(settings),
    this.fix_too_large_hitboxes_for_email_selection_marks.GetScript(settings),
    this.highlight_focused_hovered_line.GetScript(settings),
    this.labels_tree.GetScript(settings),
    this.nav_labels.GetScript(settings),
    this.nav_labels_collapsed.GetScript(settings),
    this.compose_button.GetScript(settings),
    this.hide_huge_blue__search_refinement__buttons.GetScript(settings),
    this.area_right_to_the_compose_button_and_above_the_list_of_emails.GetScript(settings),
    this.subject_bar_when_reading_email.GetScript(settings),
    this.email_reply_text_area__add_border.GetScript(settings),
    this.reply_form_uses_full_width.GetScript(settings),
    this.in_page_compose_window_header.GetScript(settings),
    this.absolutely_empty_space_above_chat.GetScript(settings),
    this.padding_on_the_right_of_the_chat.GetScript(settings),
    this.compact_chat_contact_list.GetScript(settings),
    this.clearer_chat_contact_list_sections_separator.GetScript(settings),
    this.top_bar.GetScript(settings),
    this.buttons_look_active_and_clickable__exclude_label_tags_.GetScript(settings),
    this.reduce_side_panel_when_it_s_collapsed.GetScript(settings),
    this.print_cleanup.GetScript(settings),
    this.color_msglist.GetScript(settings),
    this.full_dates.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.list_of_emails.SetDefaults(settings);
  this.horizontal_cell_paddings_in_grid_cells.SetDefaults(settings);
  this.spacing_between_emails_in_thread_view.SetDefaults(settings);
  this.labels_in_emails_list.SetDefaults(settings);
  this.smaller_font_for_labels_in_emails_list.SetDefaults(settings);
  this.limit_the_width_of_labels_in_emails_list.SetDefaults(settings);
  this.extra_width_for_special_labels_in_emails_list.SetDefaults(settings);
  this.shrink_general_labels_in_emails_list__like_inbox.SetDefaults(settings);
  this.sections_splitter.SetDefaults(settings);
  this.multiple_inbox_sections.SetDefaults(settings);
  this.fix_too_large_hitboxes_for_email_selection_marks.SetDefaults(settings);
  this.highlight_focused_hovered_line.SetDefaults(settings);
  this.labels_tree.SetDefaults(settings);
  this.nav_labels.SetDefaults(settings);
  this.nav_labels_collapsed.SetDefaults(settings);
  this.compose_button.SetDefaults(settings);
  this.hide_huge_blue__search_refinement__buttons.SetDefaults(settings);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.SetDefaults(settings);
  this.subject_bar_when_reading_email.SetDefaults(settings);
  this.email_reply_text_area__add_border.SetDefaults(settings);
  this.reply_form_uses_full_width.SetDefaults(settings);
  this.in_page_compose_window_header.SetDefaults(settings);
  this.absolutely_empty_space_above_chat.SetDefaults(settings);
  this.padding_on_the_right_of_the_chat.SetDefaults(settings);
  this.compact_chat_contact_list.SetDefaults(settings);
  this.clearer_chat_contact_list_sections_separator.SetDefaults(settings);
  this.top_bar.SetDefaults(settings);
  this.buttons_look_active_and_clickable__exclude_label_tags_.SetDefaults(settings);
  this.reduce_side_panel_when_it_s_collapsed.SetDefaults(settings);
  this.print_cleanup.SetDefaults(settings);
  this.color_msglist.SetDefaults(settings);
  this.full_dates.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.list_of_emails.GenSettingsUi(settings) +
  this.horizontal_cell_paddings_in_grid_cells.GenSettingsUi(settings) +
  this.spacing_between_emails_in_thread_view.GenSettingsUi(settings) +
  this.labels_in_emails_list.GenSettingsUi(settings) +
  this.smaller_font_for_labels_in_emails_list.GenSettingsUi(settings) +
  this.limit_the_width_of_labels_in_emails_list.GenSettingsUi(settings) +
  this.extra_width_for_special_labels_in_emails_list.GenSettingsUi(settings) +
  this.shrink_general_labels_in_emails_list__like_inbox.GenSettingsUi(settings) +
  this.sections_splitter.GenSettingsUi(settings) +
  this.multiple_inbox_sections.GenSettingsUi(settings) +
  this.fix_too_large_hitboxes_for_email_selection_marks.GenSettingsUi(settings) +
  this.highlight_focused_hovered_line.GenSettingsUi(settings) +
  this.labels_tree.GenSettingsUi(settings) +
  this.nav_labels.GenSettingsUi(settings) +
  this.nav_labels_collapsed.GenSettingsUi(settings) +
  this.compose_button.GenSettingsUi(settings) +
  this.hide_huge_blue__search_refinement__buttons.GenSettingsUi(settings) +
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenSettingsUi(settings) +
  this.subject_bar_when_reading_email.GenSettingsUi(settings) +
  this.email_reply_text_area__add_border.GenSettingsUi(settings) +
  this.reply_form_uses_full_width.GenSettingsUi(settings) +
  this.in_page_compose_window_header.GenSettingsUi(settings) +
  this.absolutely_empty_space_above_chat.GenSettingsUi(settings) +
  this.padding_on_the_right_of_the_chat.GenSettingsUi(settings) +
  this.compact_chat_contact_list.GenSettingsUi(settings) +
  this.clearer_chat_contact_list_sections_separator.GenSettingsUi(settings) +
  this.top_bar.GenSettingsUi(settings) +
  this.buttons_look_active_and_clickable__exclude_label_tags_.GenSettingsUi(settings) +
  this.reduce_side_panel_when_it_s_collapsed.GenSettingsUi(settings) +
  this.print_cleanup.GenSettingsUi(settings) +
  this.color_msglist.GenSettingsUi(settings) +
  this.full_dates.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.list_of_emails.ImportSettingsFromForm(form, settings);
  this.horizontal_cell_paddings_in_grid_cells.ImportSettingsFromForm(form, settings);
  this.spacing_between_emails_in_thread_view.ImportSettingsFromForm(form, settings);
  this.labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.smaller_font_for_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.limit_the_width_of_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.extra_width_for_special_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.shrink_general_labels_in_emails_list__like_inbox.ImportSettingsFromForm(form, settings);
  this.sections_splitter.ImportSettingsFromForm(form, settings);
  this.multiple_inbox_sections.ImportSettingsFromForm(form, settings);
  this.fix_too_large_hitboxes_for_email_selection_marks.ImportSettingsFromForm(form, settings);
  this.highlight_focused_hovered_line.ImportSettingsFromForm(form, settings);
  this.labels_tree.ImportSettingsFromForm(form, settings);
  this.nav_labels.ImportSettingsFromForm(form, settings);
  this.nav_labels_collapsed.ImportSettingsFromForm(form, settings);
  this.compose_button.ImportSettingsFromForm(form, settings);
  this.hide_huge_blue__search_refinement__buttons.ImportSettingsFromForm(form, settings);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.ImportSettingsFromForm(form, settings);
  this.subject_bar_when_reading_email.ImportSettingsFromForm(form, settings);
  this.email_reply_text_area__add_border.ImportSettingsFromForm(form, settings);
  this.reply_form_uses_full_width.ImportSettingsFromForm(form, settings);
  this.in_page_compose_window_header.ImportSettingsFromForm(form, settings);
  this.absolutely_empty_space_above_chat.ImportSettingsFromForm(form, settings);
  this.padding_on_the_right_of_the_chat.ImportSettingsFromForm(form, settings);
  this.compact_chat_contact_list.ImportSettingsFromForm(form, settings);
  this.clearer_chat_contact_list_sections_separator.ImportSettingsFromForm(form, settings);
  this.top_bar.ImportSettingsFromForm(form, settings);
  this.buttons_look_active_and_clickable__exclude_label_tags_.ImportSettingsFromForm(form, settings);
  this.reduce_side_panel_when_it_s_collapsed.ImportSettingsFromForm(form, settings);
  this.print_cleanup.ImportSettingsFromForm(form, settings);
  this.color_msglist.ImportSettingsFromForm(form, settings);
  this.full_dates.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.list_of_emails.ApplySettingsToForm(settings, form);
  this.horizontal_cell_paddings_in_grid_cells.ApplySettingsToForm(settings, form);
  this.spacing_between_emails_in_thread_view.ApplySettingsToForm(settings, form);
  this.labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.smaller_font_for_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.limit_the_width_of_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.extra_width_for_special_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.shrink_general_labels_in_emails_list__like_inbox.ApplySettingsToForm(settings, form);
  this.sections_splitter.ApplySettingsToForm(settings, form);
  this.multiple_inbox_sections.ApplySettingsToForm(settings, form);
  this.fix_too_large_hitboxes_for_email_selection_marks.ApplySettingsToForm(settings, form);
  this.highlight_focused_hovered_line.ApplySettingsToForm(settings, form);
  this.labels_tree.ApplySettingsToForm(settings, form);
  this.nav_labels.ApplySettingsToForm(settings, form);
  this.nav_labels_collapsed.ApplySettingsToForm(settings, form);
  this.compose_button.ApplySettingsToForm(settings, form);
  this.hide_huge_blue__search_refinement__buttons.ApplySettingsToForm(settings, form);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.ApplySettingsToForm(settings, form);
  this.subject_bar_when_reading_email.ApplySettingsToForm(settings, form);
  this.email_reply_text_area__add_border.ApplySettingsToForm(settings, form);
  this.reply_form_uses_full_width.ApplySettingsToForm(settings, form);
  this.in_page_compose_window_header.ApplySettingsToForm(settings, form);
  this.absolutely_empty_space_above_chat.ApplySettingsToForm(settings, form);
  this.padding_on_the_right_of_the_chat.ApplySettingsToForm(settings, form);
  this.compact_chat_contact_list.ApplySettingsToForm(settings, form);
  this.clearer_chat_contact_list_sections_separator.ApplySettingsToForm(settings, form);
  this.top_bar.ApplySettingsToForm(settings, form);
  this.buttons_look_active_and_clickable__exclude_label_tags_.ApplySettingsToForm(settings, form);
  this.reduce_side_panel_when_it_s_collapsed.ApplySettingsToForm(settings, form);
  this.print_cleanup.ApplySettingsToForm(settings, form);
  this.color_msglist.ApplySettingsToForm(settings, form);
  this.full_dates.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = `For embedded <b>chat</b> use "chat" tab.
For "who/" <b>hover cards</b> use "contacts" tab.`;

static urls = ["*://mail.google.com/mail/*"];

} // end of global class gmail
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class whatsapp {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"] {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=whatsapp_dark_mode_enabled id=whatsapp_dark_mode_enabled _site=whatsapp _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=whatsapp_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.whatsapp_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.whatsapp_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=whatsapp_no_animations_enabled id=whatsapp_no_animations_enabled _site=whatsapp _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=whatsapp_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.whatsapp_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.whatsapp_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for common : Use full page width.
// Split: big
// Params: 

static common = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.common._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.common;
  if (!this.IsEnabled(settings)) return "/* Disabled: Use full page width. */\n\n";
  let {} = s;
  return `
/* Use full page width. */
.app-wrapper-web .two,
.app-wrapper-web .three
{
  height: 100% !important;
  top: 0 !important;
  width: 100% !important;
  margin: 0 0 !important;
}
* {
  max-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.common;
  return `  <li><hr>
  <li>
  <input type=checkbox name=whatsapp_common_enabled id=whatsapp_common_enabled _site=whatsapp _section_id="common" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=whatsapp_common_enabled> Use full page width.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('common')) settings.common = {};
  let s = settings.common;
  let e = form.elements;
  s._enabled = e.whatsapp_common_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.common;
  let e = form.elements;
  e.whatsapp_common_enabled.checked = s._enabled;

}

};  // end of nested class common


///////////////////////////////////////////////////////////
// Functions for remove_background_image_ : Remove background image.
// Split: minor
// Params: 

static remove_background_image_ = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('remove_background_image_')) settings.remove_background_image_ = {};
  let s = settings.remove_background_image_;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('remove_background_image_')) settings.remove_background_image_ = {};
  let s = settings.remove_background_image_;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.remove_background_image_._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.remove_background_image_;
  if (!this.IsEnabled(settings)) return "/* Disabled: Remove background image. */\n\n";
  let {} = s;
  return `
/* Remove background image. */
[data-asset-chat-background-dark] {
  background-image: unset !important;
	background-color: #000;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.remove_background_image_;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=whatsapp_remove_background_image__enabled id=whatsapp_remove_background_image__enabled _site=whatsapp _section_id="remove_background_image_" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=whatsapp_remove_background_image__enabled> Remove background image.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('remove_background_image_')) settings.remove_background_image_ = {};
  let s = settings.remove_background_image_;
  let e = form.elements;
  s._enabled = e.whatsapp_remove_background_image__enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.remove_background_image_;
  let e = form.elements;
  e.whatsapp_remove_background_image__enabled.checked = s._enabled;

}

};  // end of nested class remove_background_image_


///////////////////////////////////////////////////////////
// Functions for remove_ai_button_ : Remove AI button.
// Split: minor
// Params: 

static remove_ai_button_ = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('remove_ai_button_')) settings.remove_ai_button_ = {};
  let s = settings.remove_ai_button_;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('remove_ai_button_')) settings.remove_ai_button_ = {};
  let s = settings.remove_ai_button_;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.remove_ai_button_._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.remove_ai_button_;
  if (!this.IsEnabled(settings)) return "/* Disabled: Remove AI button. */\n\n";
  let {} = s;
  return `
/* Remove AI button. */
[title="Meta AI"] {
	display: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.remove_ai_button_;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=whatsapp_remove_ai_button__enabled id=whatsapp_remove_ai_button__enabled _site=whatsapp _section_id="remove_ai_button_" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=whatsapp_remove_ai_button__enabled> Remove AI button.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('remove_ai_button_')) settings.remove_ai_button_ = {};
  let s = settings.remove_ai_button_;
  let e = form.elements;
  s._enabled = e.whatsapp_remove_ai_button__enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.remove_ai_button_;
  let e = form.elements;
  e.whatsapp_remove_ai_button__enabled.checked = s._enabled;

}

};  // end of nested class remove_ai_button_


///////////////////////////////////////////////////////////
// Interface functions

static id = "whatsapp";
static fields = ["dark_mode", "no_animations", "common", "remove_background_image_", "remove_ai_button_"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module whatsapp disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.common.GenStyle(settings) +
  this.remove_background_image_.GenStyle(settings) +
  this.remove_ai_button_.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.common.GenScriptUrls(settings),
    ...this.remove_background_image_.GenScriptUrls(settings),
    ...this.remove_ai_button_.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.common.GetScript(settings),
    this.remove_background_image_.GetScript(settings),
    this.remove_ai_button_.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.common.SetDefaults(settings);
  this.remove_background_image_.SetDefaults(settings);
  this.remove_ai_button_.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.common.GenSettingsUi(settings) +
  this.remove_background_image_.GenSettingsUi(settings) +
  this.remove_ai_button_.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.common.ImportSettingsFromForm(form, settings);
  this.remove_background_image_.ImportSettingsFromForm(form, settings);
  this.remove_ai_button_.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.common.ApplySettingsToForm(settings, form);
  this.remove_background_image_.ApplySettingsToForm(settings, form);
  this.remove_ai_button_.ApplySettingsToForm(settings, form);
}


static has_scripts = 0;

static descr = ``;

static urls = ["*://web.whatsapp.com/*"];

} // end of global class whatsapp
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

var modules = [
  calendar,
  chat,
  contacts,
  github,
  gmail,
  groups,
  instagram,
  jamboard,
  keep,
  slack,
  telegram,
  whatsapp,
];
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

var module_names = [
  "calendar",
  "chat",
  "contacts",
  "github",
  "gmail",
  "groups",
  "instagram",
  "jamboard",
  "keep",
  "slack",
  "telegram",
  "whatsapp",
];
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

var modules_map = {
  "calendar": calendar,
  "chat": chat,
  "contacts": contacts,
  "github": github,
  "gmail": gmail,
  "groups": groups,
  "instagram": instagram,
  "jamboard": jamboard,
  "keep": keep,
  "slack": slack,
  "telegram": telegram,
  "whatsapp": whatsapp,
};
//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

var urlmap = [
  ["*://mail.google.com/chat/*", "chat"],
  ["*://mail.google.com/mail/*", "gmail"],
  ["*://mail.google.com/sharing/*", "chat"],
  ["*://app.slack.com/*", "slack"],
  ["*://calendar.google.com/*", "calendar"],
  ["*://chat.google.com/*", "chat"],
  ["*://contacts.google.com/*", "contacts"],
  ["*://groups.google.com/*", "groups"],
  ["*://jamboard.google.com/*", "jamboard"],
  ["*://keep.google.com/*", "keep"],
  ["*://web.telegram.org/*", "telegram"],
  ["*://web.whatsapp.com/*", "whatsapp"],
  ["*://www.instagram.com/*", "instagram"],
  ["*://instagram.com/*", "instagram"],
  ["https://github.com/*", "github"]];

function Url2Mod(url) {
  const mods = ["chat", "gmail", "chat", "slack", "calendar", "chat", "contacts", "groups", "jamboard", "keep", "telegram", "whatsapp", "instagram", "instagram", "github"];
  const re = new RegExp(`^(.*?://mail\.google\.com/chat/.*?)|(.*?://mail\.google\.com/mail/.*?)|(.*?://mail\.google\.com/sharing/.*?)|(.*?://app\.slack\.com/.*?)|(.*?://calendar\.google\.com/.*?)|(.*?://chat\.google\.com/.*?)|(.*?://contacts\.google\.com/.*?)|(.*?://groups\.google\.com/.*?)|(.*?://jamboard\.google\.com/.*?)|(.*?://keep\.google\.com/.*?)|(.*?://web\.telegram\.org/.*?)|(.*?://web\.whatsapp\.com/.*?)|(.*?://www\.instagram\.com/.*?)|(.*?://instagram\.com/.*?)|(https://github\.com/.*?)$`);
  let match = url.match(re);
  return match ? mods[[...match].splice(1).findIndex(x => !!x)] : null;
}

//for (module of modules) { console.log(module.name, module); }
