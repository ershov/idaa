//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class chat {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
  -webkit-filter: invert(100%) hue-rotate(180deg) !important;
}
img, video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_dark_mode_enabled id=chat_dark_mode_enabled _site=chat _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.chat_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.chat_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}


/*- 'Close chat' button is always visible */
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=chat_no_animations_enabled id=chat_no_animations_enabled _site=chat _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.chat_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.chat_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for popup : Always open chats in popup <img src=chat/popout.svg>
// Split: big
// Params: 

static popup = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popup')) settings.popup = {};
  let s = settings.popup;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popup')) settings.popup = {};
  let s = settings.popup;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.popup._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popup;
  if (!this.IsEnabled(settings)) return "/* Disabled: Always open chats in popup <img src=chat/popout.svg> */\n\n";
  let {} = s;
  return `
/* Always open chats in popup <img src=chat/popout.svg> */
:root {
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["all-popup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

function IsInRosterIframe() {
  return location.href.indexOf("roster-iframe") != -1 &&
         document.querySelector(`[role=list][aria-label^="List of "] [role=list] > [role=listitem]`);
}

function ClickHandler(ev) {
  //console.log("popup: click?");
  if (WantToStop()) return;
  let e = ev.target, listitem = e.closest("[role=listitem]"), isButton = e.closest("[role=button]");
  if (!listitem || isButton) return;
  //console.log("popup: click");
  let popOutButton = listitem.querySelector(`[role=button][aria-label="Open in a pop-up"]`)
  if (!popOutButton) return;
  ev.stopPropagation();
  popOutButton.click();
}

function InstallClickHandler() {
  if (WantToStop()) return;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    if (e.has_click_handler) return;
    e.addEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = true;
  });
}

function WantToStop() {
  if (top == window) return false;
  if (window.settings["chat"].popup_embedded_only._enabled && IsEmbeddedInChat()) {
    //console.log("STOP", window);
    UninstallAll();
    return true;
  }
  return false;
}

function UninstallAll() {
  observer_timer && clearTimeout(observer_timer);
  observer_timer = 0;
  observer?.disconnect();
  observer = null;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    e.removeEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = false;
  });
}

// Can give false negative during loading time
function IsEmbeddedInChat() {
  // Not an iframe?
  //if (!top || top === window) return false;

  let ex;
  // Can read location directly?
  try {
    return top.location.href.indexOf("/mail.google.com/chat/") != -1;
  } catch (ex) {}

  return location.hash.indexOf("embed=chat") != -1;
}

var observer_timer = 0;
var observer;

function AddIframeMarkers() {
  [...document.querySelectorAll(`iframe[src*="roster-iframe"]:not([src*="embed=chat"])`)].forEach(frame => {
    let hash = frame.src.match(/#.*$/)?.[0];
    if (hash) {
      frame.src = frame.src.replace(/#.*$/, hash + "&embed=chat")
    } else {
      frame.src += "#embed=chat";
    }
  });
}

function OnChange() {
  observer_timer = 0;
  //console.log(top == window, "OnChange");
  if (top == window) {
    AddIframeMarkers();
  } else {
    InstallClickHandler();
  }
}

function InstallObserver() {
  if (window.popup_observer_installed) return;
  window.popup_observer_installed = true;
  //console.log(top == window, "InstallObserver", window);

  OnChange();
  observer = new MutationObserver(()=>{
    observer.takeRecords();
    if (WantToStop()) return;
    if (!observer_timer) observer_timer = setTimeout(OnChange, 300);
  });
  observer.observe(document.body, {attributes: false, subtree: true, childList: true, characterData: false});
}

function Run() {
  if (!window.all_popup_installed && window.settings["chat"].popup._enabled) {
    window.all_popup_installed = true;

    // Always load in top window
    if (top == window) {
      InstallObserver();
      return;
    }

    // Load only in roster iframes
    if (!IsInRosterIframe()) {
      //console.log("Not loading (1)", window);
      return;
    }

    // If using pop-out everywhere
    if (!window.settings["chat"].popup_embedded_only._enabled) {
      InstallObserver();
      return;
    }

    // Using pop-out in embedded chats only
    if (!IsEmbeddedInChat()) {
      InstallObserver();
      return;
    }
  } else {
    //console.log("popup: not loading", window);
  }
}

setTimeout(Run, 2000);


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popup;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=chat_popup_enabled id=chat_popup_enabled _site=chat _section_id="popup" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popup_enabled> Always open chats in popup <img src=chat/popout.svg></label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popup')) settings.popup = {};
  let s = settings.popup;
  let e = form.elements;
  s._enabled = e.chat_popup_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popup;
  let e = form.elements;
  e.chat_popup_enabled.checked = s._enabled;

}

};  // end of nested class popup


///////////////////////////////////////////////////////////
// Functions for popup_embedded_only : ... only if embedded in another site (e.g. in gmail)
// Split: no
// Params: 

static popup_embedded_only = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popup_embedded_only')) settings.popup_embedded_only = {};
  let s = settings.popup_embedded_only;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popup_embedded_only')) settings.popup_embedded_only = {};
  let s = settings.popup_embedded_only;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.popup_embedded_only._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popup_embedded_only;
  if (!this.IsEnabled(settings)) return "/* Disabled: ... only if embedded in another site (e.g. in gmail) */\n\n";
  let {} = s;
  return `
/* ... only if embedded in another site (e.g. in gmail) */
:root {
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["all-popup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

function IsInRosterIframe() {
  return location.href.indexOf("roster-iframe") != -1 &&
         document.querySelector(`[role=list][aria-label^="List of "] [role=list] > [role=listitem]`);
}

function ClickHandler(ev) {
  //console.log("popup: click?");
  if (WantToStop()) return;
  let e = ev.target, listitem = e.closest("[role=listitem]"), isButton = e.closest("[role=button]");
  if (!listitem || isButton) return;
  //console.log("popup: click");
  let popOutButton = listitem.querySelector(`[role=button][aria-label="Open in a pop-up"]`)
  if (!popOutButton) return;
  ev.stopPropagation();
  popOutButton.click();
}

function InstallClickHandler() {
  if (WantToStop()) return;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    if (e.has_click_handler) return;
    e.addEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = true;
  });
}

function WantToStop() {
  if (top == window) return false;
  if (window.settings["chat"].popup_embedded_only._enabled && IsEmbeddedInChat()) {
    //console.log("STOP", window);
    UninstallAll();
    return true;
  }
  return false;
}

function UninstallAll() {
  observer_timer && clearTimeout(observer_timer);
  observer_timer = 0;
  observer?.disconnect();
  observer = null;
  [...document.querySelectorAll(`[role=list][aria-label^="List of "] [role=list]`)].forEach(e => {
    e.removeEventListener("mousedown", ClickHandler, true);
    e.has_click_handler = false;
  });
}

// Can give false negative during loading time
function IsEmbeddedInChat() {
  // Not an iframe?
  //if (!top || top === window) return false;

  let ex;
  // Can read location directly?
  try {
    return top.location.href.indexOf("/mail.google.com/chat/") != -1;
  } catch (ex) {}

  return location.hash.indexOf("embed=chat") != -1;
}

var observer_timer = 0;
var observer;

function AddIframeMarkers() {
  [...document.querySelectorAll(`iframe[src*="roster-iframe"]:not([src*="embed=chat"])`)].forEach(frame => {
    let hash = frame.src.match(/#.*$/)?.[0];
    if (hash) {
      frame.src = frame.src.replace(/#.*$/, hash + "&embed=chat")
    } else {
      frame.src += "#embed=chat";
    }
  });
}

function OnChange() {
  observer_timer = 0;
  //console.log(top == window, "OnChange");
  if (top == window) {
    AddIframeMarkers();
  } else {
    InstallClickHandler();
  }
}

function InstallObserver() {
  if (window.popup_observer_installed) return;
  window.popup_observer_installed = true;
  //console.log(top == window, "InstallObserver", window);

  OnChange();
  observer = new MutationObserver(()=>{
    observer.takeRecords();
    if (WantToStop()) return;
    if (!observer_timer) observer_timer = setTimeout(OnChange, 300);
  });
  observer.observe(document.body, {attributes: false, subtree: true, childList: true, characterData: false});
}

function Run() {
  if (!window.all_popup_installed && window.settings["chat"].popup._enabled) {
    window.all_popup_installed = true;

    // Always load in top window
    if (top == window) {
      InstallObserver();
      return;
    }

    // Load only in roster iframes
    if (!IsInRosterIframe()) {
      //console.log("Not loading (1)", window);
      return;
    }

    // If using pop-out everywhere
    if (!window.settings["chat"].popup_embedded_only._enabled) {
      InstallObserver();
      return;
    }

    // Using pop-out in embedded chats only
    if (!IsEmbeddedInChat()) {
      InstallObserver();
      return;
    }
  } else {
    //console.log("popup: not loading", window);
  }
}

setTimeout(Run, 2000);


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popup_embedded_only;
  return `
  <li has_script>
  <input type=checkbox name=chat_popup_embedded_only_enabled id=chat_popup_embedded_only_enabled _site=chat _section_id="popup_embedded_only" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popup_embedded_only_enabled> ... only if embedded in another site (e.g. in gmail)</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popup_embedded_only')) settings.popup_embedded_only = {};
  let s = settings.popup_embedded_only;
  let e = form.elements;
  s._enabled = e.chat_popup_embedded_only_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popup_embedded_only;
  let e = form.elements;
  e.chat_popup_embedded_only_enabled.checked = s._enabled;

}

};  // end of nested class popup_embedded_only


///////////////////////////////////////////////////////////
// Functions for links_new_tab : Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg>
// Split: big
// Params: 

static links_new_tab = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('links_new_tab')) settings.links_new_tab = {};
  let s = settings.links_new_tab;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('links_new_tab')) settings.links_new_tab = {};
  let s = settings.links_new_tab;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.links_new_tab._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.links_new_tab;
  if (!this.IsEnabled(settings)) return "/* Disabled: Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg> */\n\n";
  let {} = s;
  return `
/* Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg> */
:root {
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["links-new-tab.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

function ClickHandler(ev) {
  //console.log("link: click 1");
  let e = ev.target;
  let a = e?.closest(`a[href]`);
  if (!a) return;  // not a link
  //console.log("link: click 2");
  let is_open_in_chat = e.tagName === "SPAN" && e.innerHTML === "Open in chat";
  if (is_open_in_chat) return;  // specifically clicked on "Open in chat" button
  //console.log("link: click 3");
  let new_tab_button = a.querySelector(`[role=application][aria-label="Open in new tab"]`);
  if (!new_tab_button) return;  // this "a" doesn't have a "New tab" button
  //console.log("link: click 4");
  ev.stopPropagation();
  new_tab_button.click();
}

function InstallClickHandler() {
  if (document.has_links_click_handler) return;
  document.addEventListener("mousedown", ClickHandler, true);
  document.has_links_click_handler = true;
}

InstallClickHandler();


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.links_new_tab;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=chat_links_new_tab_enabled id=chat_links_new_tab_enabled _site=chat _section_id="links_new_tab" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_links_new_tab_enabled> Always open linked items in new tab <img height=20 width=20 src=chat/newtab.svg></label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('links_new_tab')) settings.links_new_tab = {};
  let s = settings.links_new_tab;
  let e = form.elements;
  s._enabled = e.chat_links_new_tab_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.links_new_tab;
  let e = form.elements;
  e.chat_links_new_tab_enabled.checked = s._enabled;

}

};  // end of nested class links_new_tab


///////////////////////////////////////////////////////////
// Functions for popout_title_height : Pop-out window title height
// Split: big
// Params: [height 1 24 Height]

static popout_title_height = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popout_title_height')) settings.popout_title_height = {};
  let s = settings.popout_title_height;
  s._enabled = true;
  s.height = 24;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popout_title_height')) settings.popout_title_height = {};
  let s = settings.popout_title_height;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 24;
}

static IsEnabled(settings) {
  return settings.popout_title_height._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popout_title_height;
  if (!this.IsEnabled(settings)) return "/* Disabled: Pop-out window title height */\n\n";
  let {height} = s;
  return `
/* Pop-out window title height */
.tRuV8b .HrE5Tb {
  height: ${height}px !important;  /* @1 */
}
.tRuV8b .pS5UB, .vIO7af {
  height: 24px !important; /*-Subtitle height and "..." menu */
}
.tRuV8b .YtEe7c, .tRuV8b .UQqRMd {
  margin-left: 5px !important;  /*-Margin of the chat title */
}
.jO3HBb {     /*-Chat dialog position */
  top: ${height+24}px;  /* @1=height+24 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popout_title_height;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_popout_title_height_enabled id=chat_popout_title_height_enabled _site=chat _section_id="popout_title_height" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popout_title_height_enabled> Pop-out window title height</label>
  <ul>
    <li><input
      name=chat_popout_title_height_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=chat
      _section_id="popout_title_height"
      _setting_id="height"
      _default="24"
      ><input
      name=chat_popout_title_height_height_val
      size=3
      value=${s.height}
      _site=chat
      _section_id="popout_title_height"
      _setting_id="height"
      _default="24"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popout_title_height')) settings.popout_title_height = {};
  let s = settings.popout_title_height;
  let e = form.elements;
  s._enabled = e.chat_popout_title_height_enabled.checked;
  if (isNaN(s.height = parseInt(e.chat_popout_title_height_height_val.value))) s.height = 24;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popout_title_height;
  let e = form.elements;
  e.chat_popout_title_height_enabled.checked = s._enabled;
  e.chat_popout_title_height_height_range.value = e.chat_popout_title_height_height_val.value = s.height;
}

};  // end of nested class popout_title_height


///////////////////////////////////////////////////////////
// Functions for popout_button_size : Pop-out window control buttons height match the title bar size
// Split: no
// Params: 

static popout_button_size = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('popout_button_size')) settings.popout_button_size = {};
  let s = settings.popout_button_size;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('popout_button_size')) settings.popout_button_size = {};
  let s = settings.popout_button_size;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.popout_button_size._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.popout_button_size;
  if (!this.IsEnabled(settings)) return "/* Disabled: Pop-out window control buttons height match the title bar size */\n\n";
  let {} = s;
  return `
/* Pop-out window control buttons height match the title bar size */
.VcYsBe, .hA9Mmb .Yfed6d, .C0SIVb .Yfed6d {
  height: 100% !important;
  width: ${settings.popout_title_height.height}px !important;  /* @1=settings.popout_title_height.height */
  margin: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.popout_button_size;
  return `
  <li>
  <input type=checkbox name=chat_popout_button_size_enabled id=chat_popout_button_size_enabled _site=chat _section_id="popout_button_size" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_popout_button_size_enabled> Pop-out window control buttons height match the title bar size</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('popout_button_size')) settings.popout_button_size = {};
  let s = settings.popout_button_size;
  let e = form.elements;
  s._enabled = e.chat_popout_button_size_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.popout_button_size;
  let e = form.elements;
  e.chat_popout_button_size_enabled.checked = s._enabled;

}

};  // end of nested class popout_button_size


///////////////////////////////////////////////////////////
// Functions for mini_window_buttons_stick_to_the_right_border : Mini-window buttons stick to the right border
// Split: no
// Params: 

static mini_window_buttons_stick_to_the_right_border = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('mini_window_buttons_stick_to_the_right_border')) settings.mini_window_buttons_stick_to_the_right_border = {};
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('mini_window_buttons_stick_to_the_right_border')) settings.mini_window_buttons_stick_to_the_right_border = {};
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.mini_window_buttons_stick_to_the_right_border._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  if (!this.IsEnabled(settings)) return "/* Disabled: Mini-window buttons stick to the right border */\n\n";
  let {} = s;
  return `
/* Mini-window buttons stick to the right border */
.tRuV8b .wYx9me {
  margin-right: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  return `
  <li>
  <input type=checkbox name=chat_mini_window_buttons_stick_to_the_right_border_enabled id=chat_mini_window_buttons_stick_to_the_right_border_enabled _site=chat _section_id="mini_window_buttons_stick_to_the_right_border" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_mini_window_buttons_stick_to_the_right_border_enabled> Mini-window buttons stick to the right border</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('mini_window_buttons_stick_to_the_right_border')) settings.mini_window_buttons_stick_to_the_right_border = {};
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  let e = form.elements;
  s._enabled = e.chat_mini_window_buttons_stick_to_the_right_border_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.mini_window_buttons_stick_to_the_right_border;
  let e = form.elements;
  e.chat_mini_window_buttons_stick_to_the_right_border_enabled.checked = s._enabled;

}

};  // end of nested class mini_window_buttons_stick_to_the_right_border


///////////////////////////////////////////////////////////
// Functions for timestamps_in_contact_list_are_always_visible : Timestamps in contact list are always visible
// Split: big
// Params: 

static timestamps_in_contact_list_are_always_visible = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('timestamps_in_contact_list_are_always_visible')) settings.timestamps_in_contact_list_are_always_visible = {};
  let s = settings.timestamps_in_contact_list_are_always_visible;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('timestamps_in_contact_list_are_always_visible')) settings.timestamps_in_contact_list_are_always_visible = {};
  let s = settings.timestamps_in_contact_list_are_always_visible;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.timestamps_in_contact_list_are_always_visible._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.timestamps_in_contact_list_are_always_visible;
  if (!this.IsEnabled(settings)) return "/* Disabled: Timestamps in contact list are always visible */\n\n";
  let {} = s;
  return `
/* Timestamps in contact list are always visible */
.sFuxxd {
  display: flex !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.timestamps_in_contact_list_are_always_visible;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_timestamps_in_contact_list_are_always_visible_enabled id=chat_timestamps_in_contact_list_are_always_visible_enabled _site=chat _section_id="timestamps_in_contact_list_are_always_visible" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_timestamps_in_contact_list_are_always_visible_enabled> Timestamps in contact list are always visible</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('timestamps_in_contact_list_are_always_visible')) settings.timestamps_in_contact_list_are_always_visible = {};
  let s = settings.timestamps_in_contact_list_are_always_visible;
  let e = form.elements;
  s._enabled = e.chat_timestamps_in_contact_list_are_always_visible_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.timestamps_in_contact_list_are_always_visible;
  let e = form.elements;
  e.chat_timestamps_in_contact_list_are_always_visible_enabled.checked = s._enabled;

}

};  // end of nested class timestamps_in_contact_list_are_always_visible


///////////////////////////////////////////////////////////
// Functions for contact_list_spaces : Contact list spaces
// Split: minor
// Params: 

static contact_list_spaces = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('contact_list_spaces')) settings.contact_list_spaces = {};
  let s = settings.contact_list_spaces;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('contact_list_spaces')) settings.contact_list_spaces = {};
  let s = settings.contact_list_spaces;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.contact_list_spaces._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.contact_list_spaces;
  if (!this.IsEnabled(settings)) return "/* Disabled: Contact list spaces */\n\n";
  let {} = s;
  return `
/* Contact list spaces */
.n5yyEc {
  margin-right: 0 !important;
}
.Eb3cg {
    padding: 0 !important;
}
[role=listitem], [role=listitem] > * {
  padding: 0 !important;
}
.JwR1Pc,
.yDIlKc .JwR1Pc, .yDIlKc .wR3Nid, .W0hon .JwR1Pc, .W0hon .wR3Nid {
  padding-left: 4px !important;
}
.t5F5nf {
  margin-right: 0 !important;
}
.sFuxxd, .aBtxmc {
  margin-left: 0 !important;
}
.LoYJxb {
  height: 32px !important;
}
.kjWKTd {
    font-size: .65rem !important;
}
.PL5Wwe, .JRtysb {
  border-radius: 0 !important;
}
.V6.CL { /*--contact list headings--*/
  height: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.contact_list_spaces;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_contact_list_spaces_enabled id=chat_contact_list_spaces_enabled _site=chat _section_id="contact_list_spaces" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_contact_list_spaces_enabled> Contact list spaces</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('contact_list_spaces')) settings.contact_list_spaces = {};
  let s = settings.contact_list_spaces;
  let e = form.elements;
  s._enabled = e.chat_contact_list_spaces_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.contact_list_spaces;
  let e = form.elements;
  e.chat_contact_list_spaces_enabled.checked = s._enabled;

}

};  // end of nested class contact_list_spaces


///////////////////////////////////////////////////////////
// Functions for clearer_contact_list_sections_separator : Clearer contact list sections separator
// Split: no
// Params: 

static clearer_contact_list_sections_separator = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('clearer_contact_list_sections_separator')) settings.clearer_contact_list_sections_separator = {};
  let s = settings.clearer_contact_list_sections_separator;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('clearer_contact_list_sections_separator')) settings.clearer_contact_list_sections_separator = {};
  let s = settings.clearer_contact_list_sections_separator;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.clearer_contact_list_sections_separator._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_contact_list_sections_separator;
  if (!this.IsEnabled(settings)) return "/* Disabled: Clearer contact list sections separator */\n\n";
  let {} = s;
  return `
/* Clearer contact list sections separator */
.WR .Xa .X9 {
  background: linear-gradient(180deg, #E0E0E0 0, #FFF 1rem) !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_contact_list_sections_separator;
  return `
  <li>
  <input type=checkbox name=chat_clearer_contact_list_sections_separator_enabled id=chat_clearer_contact_list_sections_separator_enabled _site=chat _section_id="clearer_contact_list_sections_separator" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_clearer_contact_list_sections_separator_enabled> Clearer contact list sections separator</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('clearer_contact_list_sections_separator')) settings.clearer_contact_list_sections_separator = {};
  let s = settings.clearer_contact_list_sections_separator;
  let e = form.elements;
  s._enabled = e.chat_clearer_contact_list_sections_separator_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.clearer_contact_list_sections_separator;
  let e = form.elements;
  e.chat_clearer_contact_list_sections_separator_enabled.checked = s._enabled;

}

};  // end of nested class clearer_contact_list_sections_separator


///////////////////////////////////////////////////////////
// Functions for compact_layout : Compact layout
// Split: minor
// Params: 

static compact_layout = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_layout')) settings.compact_layout = {};
  let s = settings.compact_layout;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_layout')) settings.compact_layout = {};
  let s = settings.compact_layout;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compact_layout._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_layout;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact layout */\n\n";
  let {} = s;
  return `
/* Compact layout */
@media (max-width: 400px) {
.fh7VDd, .LoYJxb { height: 24px !important; }
.kjWKTd { display: none; }
}
@media (min-width: 680px) {
.fh7VDd, .LoYJxb { height: 24px !important; }
.kjWKTd { display: none; }
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_layout;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_compact_layout_enabled id=chat_compact_layout_enabled _site=chat _section_id="compact_layout" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_compact_layout_enabled> Compact layout</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_layout')) settings.compact_layout = {};
  let s = settings.compact_layout;
  let e = form.elements;
  s._enabled = e.chat_compact_layout_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_layout;
  let e = form.elements;
  e.chat_compact_layout_enabled.checked = s._enabled;

}

};  // end of nested class compact_layout


///////////////////////////////////////////////////////////
// Functions for use_full_page_width : Use full page width
// Split: minor
// Params: 

static use_full_page_width = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('use_full_page_width')) settings.use_full_page_width = {};
  let s = settings.use_full_page_width;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('use_full_page_width')) settings.use_full_page_width = {};
  let s = settings.use_full_page_width;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.use_full_page_width._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.use_full_page_width;
  if (!this.IsEnabled(settings)) return "/* Disabled: Use full page width */\n\n";
  let {} = s;
  return `
/* Use full page width */
.bzJiD .jGyvbd .QIJiHb, .bzJiD .jGyvbd .zX644e {
  max-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.use_full_page_width;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_use_full_page_width_enabled id=chat_use_full_page_width_enabled _site=chat _section_id="use_full_page_width" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_use_full_page_width_enabled> Use full page width</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('use_full_page_width')) settings.use_full_page_width = {};
  let s = settings.use_full_page_width;
  let e = form.elements;
  s._enabled = e.chat_use_full_page_width_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.use_full_page_width;
  let e = form.elements;
  e.chat_use_full_page_width_enabled.checked = s._enabled;

}

};  // end of nested class use_full_page_width


///////////////////////////////////////////////////////////
// Functions for thinner_top_bar : Thinner top bar
// Split: minor
// Params: 

static thinner_top_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('thinner_top_bar')) settings.thinner_top_bar = {};
  let s = settings.thinner_top_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('thinner_top_bar')) settings.thinner_top_bar = {};
  let s = settings.thinner_top_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.thinner_top_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_top_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Thinner top bar */\n\n";
  let {} = s;
  return `
/* Thinner top bar */
[role=banner] {
  height: 48px !important;
}
[role=banner] > * {
  padding: 0 !important;
}
.bn iframe.bl {
  height: calc(100vh - 48px) !important;
}
div.Tm#\:3 {
  height: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_top_bar;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_thinner_top_bar_enabled id=chat_thinner_top_bar_enabled _site=chat _section_id="thinner_top_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_thinner_top_bar_enabled> Thinner top bar</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('thinner_top_bar')) settings.thinner_top_bar = {};
  let s = settings.thinner_top_bar;
  let e = form.elements;
  s._enabled = e.chat_thinner_top_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.thinner_top_bar;
  let e = form.elements;
  e.chat_thinner_top_bar_enabled.checked = s._enabled;

}

};  // end of nested class thinner_top_bar


///////////////////////////////////////////////////////////
// Functions for smaller_paddings_in_chat_dialog : Smaller paddings in chat dialog
// Split: minor
// Params: [padding_top 1 5 Padding Top], [padding_bottom 1 0 Padding Bottom]

static smaller_paddings_in_chat_dialog = class {

static params = ["padding_top", "padding_bottom"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('smaller_paddings_in_chat_dialog')) settings.smaller_paddings_in_chat_dialog = {};
  let s = settings.smaller_paddings_in_chat_dialog;
  s._enabled = true;
  s.padding_top = 5;
  s.padding_bottom = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('smaller_paddings_in_chat_dialog')) settings.smaller_paddings_in_chat_dialog = {};
  let s = settings.smaller_paddings_in_chat_dialog;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 5;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
}

static IsEnabled(settings) {
  return settings.smaller_paddings_in_chat_dialog._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_paddings_in_chat_dialog;
  if (!this.IsEnabled(settings)) return "/* Disabled: Smaller paddings in chat dialog */\n\n";
  let {padding_top, padding_bottom} = s;
  return `
/* Smaller paddings in chat dialog */
c-wiz c-wiz [role=heading] + * {
  padding: 0;
  padding-top: ${padding_top}px;     /* @1 */
  padding-bottom: ${padding_bottom}px;  /* @1 */
}
/*-Follow button sticks to the edge */
.yg4pvb {
  right: 0px;
  top: 0px;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_paddings_in_chat_dialog;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_smaller_paddings_in_chat_dialog_enabled id=chat_smaller_paddings_in_chat_dialog_enabled _site=chat _section_id="smaller_paddings_in_chat_dialog" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_smaller_paddings_in_chat_dialog_enabled> Smaller paddings in chat dialog</label>
  <ul>
    <li><input
      name=chat_smaller_paddings_in_chat_dialog_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_top"
      _default="5"
      ><input
      name=chat_smaller_paddings_in_chat_dialog_padding_top_val
      size=3
      value=${s.padding_top}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_top"
      _default="5"
      > Padding Top
    <li><input
      name=chat_smaller_paddings_in_chat_dialog_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=chat_smaller_paddings_in_chat_dialog_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=chat
      _section_id="smaller_paddings_in_chat_dialog"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('smaller_paddings_in_chat_dialog')) settings.smaller_paddings_in_chat_dialog = {};
  let s = settings.smaller_paddings_in_chat_dialog;
  let e = form.elements;
  s._enabled = e.chat_smaller_paddings_in_chat_dialog_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.chat_smaller_paddings_in_chat_dialog_padding_top_val.value))) s.padding_top = 5;
  if (isNaN(s.padding_bottom = parseInt(e.chat_smaller_paddings_in_chat_dialog_padding_bottom_val.value))) s.padding_bottom = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.smaller_paddings_in_chat_dialog;
  let e = form.elements;
  e.chat_smaller_paddings_in_chat_dialog_enabled.checked = s._enabled;
  e.chat_smaller_paddings_in_chat_dialog_padding_top_range.value = e.chat_smaller_paddings_in_chat_dialog_padding_top_val.value = s.padding_top;
  e.chat_smaller_paddings_in_chat_dialog_padding_bottom_range.value = e.chat_smaller_paddings_in_chat_dialog_padding_bottom_val.value = s.padding_bottom;
}

};  // end of nested class smaller_paddings_in_chat_dialog


///////////////////////////////////////////////////////////
// Functions for thinner_reply_bar : Thinner reply bar
// Split: minor
// Params: 

static thinner_reply_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('thinner_reply_bar')) settings.thinner_reply_bar = {};
  let s = settings.thinner_reply_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('thinner_reply_bar')) settings.thinner_reply_bar = {};
  let s = settings.thinner_reply_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.thinner_reply_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_reply_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Thinner reply bar */\n\n";
  let {} = s;
  return `
/* Thinner reply bar */
[aria-label=Reply],
[aria-label=Reply] *,
[aria-label=Reply] + *,
[aria-label=Reply] + * *,
[aria-label="Jump to messages"] + * *  /*- this one for personal chats. another option: [aria-label^="In conversation"]... */
{
    min-height: 0px !important;
    margin: auto 0 !important;
    padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.thinner_reply_bar;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_thinner_reply_bar_enabled id=chat_thinner_reply_bar_enabled _site=chat _section_id="thinner_reply_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_thinner_reply_bar_enabled> Thinner reply bar</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('thinner_reply_bar')) settings.thinner_reply_bar = {};
  let s = settings.thinner_reply_bar;
  let e = form.elements;
  s._enabled = e.chat_thinner_reply_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.thinner_reply_bar;
  let e = form.elements;
  e.chat_thinner_reply_bar_enabled.checked = s._enabled;

}

};  // end of nested class thinner_reply_bar


///////////////////////////////////////////////////////////
// Functions for chat_spaces : Chat spaces
// Split: minor
// Params: 

static chat_spaces = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('chat_spaces')) settings.chat_spaces = {};
  let s = settings.chat_spaces;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('chat_spaces')) settings.chat_spaces = {};
  let s = settings.chat_spaces;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.chat_spaces._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.chat_spaces;
  if (!this.IsEnabled(settings)) return "/* Disabled: Chat spaces */\n\n";
  let {} = s;
  return `
/* Chat spaces */
.Bl2pUd, .jGyvbd, .YJxKBc, .NGoCob, .Hj5Fxb,
.byY7Yb, .XganBc {
    padding: 0 !important;
    margin: 0 !important;
}
.WQKmIb .auHzcc, .WQKmIb .RPExGf, .WQKmIb .IEIJqd,
.cFc9ae, .MiRdyc, .zX644e {
    max-width: unset !important;
}
.dJ9vNe, .I0LFzc {
    border-radius: 0 !important;
}
@media (max-width: 679px)
.auHzcc, .RPExGf, .BEjUKc .cFc9ae {
    padding: 0 !important;
    margin: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.chat_spaces;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_chat_spaces_enabled id=chat_chat_spaces_enabled _site=chat _section_id="chat_spaces" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_chat_spaces_enabled> Chat spaces</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('chat_spaces')) settings.chat_spaces = {};
  let s = settings.chat_spaces;
  let e = form.elements;
  s._enabled = e.chat_chat_spaces_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.chat_spaces;
  let e = form.elements;
  e.chat_chat_spaces_enabled.checked = s._enabled;

}

};  // end of nested class chat_spaces


///////////////////////////////////////////////////////////
// Functions for hide_meaningless_image_for_video_chat_invitation : Hide meaningless image for video chat invitation
// Split: minor
// Params: 

static hide_meaningless_image_for_video_chat_invitation = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('hide_meaningless_image_for_video_chat_invitation')) settings.hide_meaningless_image_for_video_chat_invitation = {};
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('hide_meaningless_image_for_video_chat_invitation')) settings.hide_meaningless_image_for_video_chat_invitation = {};
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.hide_meaningless_image_for_video_chat_invitation._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  if (!this.IsEnabled(settings)) return "/* Disabled: Hide meaningless image for video chat invitation */\n\n";
  let {} = s;
  return `
/* Hide meaningless image for video chat invitation */
a[aria-label="Join video meeting, Video Call."] > :first-child {
    display: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=chat_hide_meaningless_image_for_video_chat_invitation_enabled id=chat_hide_meaningless_image_for_video_chat_invitation_enabled _site=chat _section_id="hide_meaningless_image_for_video_chat_invitation" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_hide_meaningless_image_for_video_chat_invitation_enabled> Hide meaningless image for video chat invitation</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('hide_meaningless_image_for_video_chat_invitation')) settings.hide_meaningless_image_for_video_chat_invitation = {};
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  let e = form.elements;
  s._enabled = e.chat_hide_meaningless_image_for_video_chat_invitation_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.hide_meaningless_image_for_video_chat_invitation;
  let e = form.elements;
  e.chat_hide_meaningless_image_for_video_chat_invitation_enabled.checked = s._enabled;

}

};  // end of nested class hide_meaningless_image_for_video_chat_invitation


///////////////////////////////////////////////////////////
// Functions for reactions_are_in_a_convenient_spot : Reactions are in a convenient spot
// Split: big
// Params: [left 3 200 Left]

static reactions_are_in_a_convenient_spot = class {

static params = ["left"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reactions_are_in_a_convenient_spot')) settings.reactions_are_in_a_convenient_spot = {};
  let s = settings.reactions_are_in_a_convenient_spot;
  s._enabled = true;
  s.left = 200;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reactions_are_in_a_convenient_spot')) settings.reactions_are_in_a_convenient_spot = {};
  let s = settings.reactions_are_in_a_convenient_spot;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('left')) s.left = 200;
}

static IsEnabled(settings) {
  return settings.reactions_are_in_a_convenient_spot._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reactions_are_in_a_convenient_spot;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reactions are in a convenient spot */\n\n";
  let {left} = s;
  return `
/* Reactions are in a convenient spot */
.SFMExc {
    flex-direction: row-reverse;
    justify-content: flex-end;
    x-start;
}

.HO0hcf {
  right: unset !important;
  top: -28px !important;
  left: min(calc(100vw - 138px), ${left}px);  /* @3 */
}
div.HO0hcf::before {
  width: 0 !important;
}

.cmEq8b .xHWT7d {
  opacity: 1 !important;
}

/*-script.js */

/*-TODO: Add "Automatic history ON" capability */
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reactions_are_in_a_convenient_spot;
  return `  <li><hr>
  <li>
  <input type=checkbox name=chat_reactions_are_in_a_convenient_spot_enabled id=chat_reactions_are_in_a_convenient_spot_enabled _site=chat _section_id="reactions_are_in_a_convenient_spot" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=chat_reactions_are_in_a_convenient_spot_enabled> Reactions are in a convenient spot</label>
  <ul>
    <li><input
      name=chat_reactions_are_in_a_convenient_spot_left_range
      type=range
      min=0
      max=1000
      value=${s.left}
      _site=chat
      _section_id="reactions_are_in_a_convenient_spot"
      _setting_id="left"
      _default="200"
      ><input
      name=chat_reactions_are_in_a_convenient_spot_left_val
      size=3
      value=${s.left}
      _site=chat
      _section_id="reactions_are_in_a_convenient_spot"
      _setting_id="left"
      _default="200"
      > Left
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reactions_are_in_a_convenient_spot')) settings.reactions_are_in_a_convenient_spot = {};
  let s = settings.reactions_are_in_a_convenient_spot;
  let e = form.elements;
  s._enabled = e.chat_reactions_are_in_a_convenient_spot_enabled.checked;
  if (isNaN(s.left = parseInt(e.chat_reactions_are_in_a_convenient_spot_left_val.value))) s.left = 200;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reactions_are_in_a_convenient_spot;
  let e = form.elements;
  e.chat_reactions_are_in_a_convenient_spot_enabled.checked = s._enabled;
  e.chat_reactions_are_in_a_convenient_spot_left_range.value = e.chat_reactions_are_in_a_convenient_spot_left_val.value = s.left;
}

};  // end of nested class reactions_are_in_a_convenient_spot


///////////////////////////////////////////////////////////
// Interface functions

static id = "chat";
static fields = ["dark_mode", "no_animations", "popup", "popup_embedded_only", "links_new_tab", "popout_title_height", "popout_button_size", "mini_window_buttons_stick_to_the_right_border", "timestamps_in_contact_list_are_always_visible", "contact_list_spaces", "clearer_contact_list_sections_separator", "compact_layout", "use_full_page_width", "thinner_top_bar", "smaller_paddings_in_chat_dialog", "thinner_reply_bar", "chat_spaces", "hide_meaningless_image_for_video_chat_invitation", "reactions_are_in_a_convenient_spot"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module chat disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.popup.GenStyle(settings) +
  this.popup_embedded_only.GenStyle(settings) +
  this.links_new_tab.GenStyle(settings) +
  this.popout_title_height.GenStyle(settings) +
  this.popout_button_size.GenStyle(settings) +
  this.mini_window_buttons_stick_to_the_right_border.GenStyle(settings) +
  this.timestamps_in_contact_list_are_always_visible.GenStyle(settings) +
  this.contact_list_spaces.GenStyle(settings) +
  this.clearer_contact_list_sections_separator.GenStyle(settings) +
  this.compact_layout.GenStyle(settings) +
  this.use_full_page_width.GenStyle(settings) +
  this.thinner_top_bar.GenStyle(settings) +
  this.smaller_paddings_in_chat_dialog.GenStyle(settings) +
  this.thinner_reply_bar.GenStyle(settings) +
  this.chat_spaces.GenStyle(settings) +
  this.hide_meaningless_image_for_video_chat_invitation.GenStyle(settings) +
  this.reactions_are_in_a_convenient_spot.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.popup.GenScriptUrls(settings),
    ...this.popup_embedded_only.GenScriptUrls(settings),
    ...this.links_new_tab.GenScriptUrls(settings),
    ...this.popout_title_height.GenScriptUrls(settings),
    ...this.popout_button_size.GenScriptUrls(settings),
    ...this.mini_window_buttons_stick_to_the_right_border.GenScriptUrls(settings),
    ...this.timestamps_in_contact_list_are_always_visible.GenScriptUrls(settings),
    ...this.contact_list_spaces.GenScriptUrls(settings),
    ...this.clearer_contact_list_sections_separator.GenScriptUrls(settings),
    ...this.compact_layout.GenScriptUrls(settings),
    ...this.use_full_page_width.GenScriptUrls(settings),
    ...this.thinner_top_bar.GenScriptUrls(settings),
    ...this.smaller_paddings_in_chat_dialog.GenScriptUrls(settings),
    ...this.thinner_reply_bar.GenScriptUrls(settings),
    ...this.chat_spaces.GenScriptUrls(settings),
    ...this.hide_meaningless_image_for_video_chat_invitation.GenScriptUrls(settings),
    ...this.reactions_are_in_a_convenient_spot.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.popup.GetScript(settings),
    this.popup_embedded_only.GetScript(settings),
    this.links_new_tab.GetScript(settings),
    this.popout_title_height.GetScript(settings),
    this.popout_button_size.GetScript(settings),
    this.mini_window_buttons_stick_to_the_right_border.GetScript(settings),
    this.timestamps_in_contact_list_are_always_visible.GetScript(settings),
    this.contact_list_spaces.GetScript(settings),
    this.clearer_contact_list_sections_separator.GetScript(settings),
    this.compact_layout.GetScript(settings),
    this.use_full_page_width.GetScript(settings),
    this.thinner_top_bar.GetScript(settings),
    this.smaller_paddings_in_chat_dialog.GetScript(settings),
    this.thinner_reply_bar.GetScript(settings),
    this.chat_spaces.GetScript(settings),
    this.hide_meaningless_image_for_video_chat_invitation.GetScript(settings),
    this.reactions_are_in_a_convenient_spot.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.popup.SetDefaults(settings);
  this.popup_embedded_only.SetDefaults(settings);
  this.links_new_tab.SetDefaults(settings);
  this.popout_title_height.SetDefaults(settings);
  this.popout_button_size.SetDefaults(settings);
  this.mini_window_buttons_stick_to_the_right_border.SetDefaults(settings);
  this.timestamps_in_contact_list_are_always_visible.SetDefaults(settings);
  this.contact_list_spaces.SetDefaults(settings);
  this.clearer_contact_list_sections_separator.SetDefaults(settings);
  this.compact_layout.SetDefaults(settings);
  this.use_full_page_width.SetDefaults(settings);
  this.thinner_top_bar.SetDefaults(settings);
  this.smaller_paddings_in_chat_dialog.SetDefaults(settings);
  this.thinner_reply_bar.SetDefaults(settings);
  this.chat_spaces.SetDefaults(settings);
  this.hide_meaningless_image_for_video_chat_invitation.SetDefaults(settings);
  this.reactions_are_in_a_convenient_spot.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.popup.GenSettingsUi(settings) +
  this.popup_embedded_only.GenSettingsUi(settings) +
  this.links_new_tab.GenSettingsUi(settings) +
  this.popout_title_height.GenSettingsUi(settings) +
  this.popout_button_size.GenSettingsUi(settings) +
  this.mini_window_buttons_stick_to_the_right_border.GenSettingsUi(settings) +
  this.timestamps_in_contact_list_are_always_visible.GenSettingsUi(settings) +
  this.contact_list_spaces.GenSettingsUi(settings) +
  this.clearer_contact_list_sections_separator.GenSettingsUi(settings) +
  this.compact_layout.GenSettingsUi(settings) +
  this.use_full_page_width.GenSettingsUi(settings) +
  this.thinner_top_bar.GenSettingsUi(settings) +
  this.smaller_paddings_in_chat_dialog.GenSettingsUi(settings) +
  this.thinner_reply_bar.GenSettingsUi(settings) +
  this.chat_spaces.GenSettingsUi(settings) +
  this.hide_meaningless_image_for_video_chat_invitation.GenSettingsUi(settings) +
  this.reactions_are_in_a_convenient_spot.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.popup.ImportSettingsFromForm(form, settings);
  this.popup_embedded_only.ImportSettingsFromForm(form, settings);
  this.links_new_tab.ImportSettingsFromForm(form, settings);
  this.popout_title_height.ImportSettingsFromForm(form, settings);
  this.popout_button_size.ImportSettingsFromForm(form, settings);
  this.mini_window_buttons_stick_to_the_right_border.ImportSettingsFromForm(form, settings);
  this.timestamps_in_contact_list_are_always_visible.ImportSettingsFromForm(form, settings);
  this.contact_list_spaces.ImportSettingsFromForm(form, settings);
  this.clearer_contact_list_sections_separator.ImportSettingsFromForm(form, settings);
  this.compact_layout.ImportSettingsFromForm(form, settings);
  this.use_full_page_width.ImportSettingsFromForm(form, settings);
  this.thinner_top_bar.ImportSettingsFromForm(form, settings);
  this.smaller_paddings_in_chat_dialog.ImportSettingsFromForm(form, settings);
  this.thinner_reply_bar.ImportSettingsFromForm(form, settings);
  this.chat_spaces.ImportSettingsFromForm(form, settings);
  this.hide_meaningless_image_for_video_chat_invitation.ImportSettingsFromForm(form, settings);
  this.reactions_are_in_a_convenient_spot.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.popup.ApplySettingsToForm(settings, form);
  this.popup_embedded_only.ApplySettingsToForm(settings, form);
  this.links_new_tab.ApplySettingsToForm(settings, form);
  this.popout_title_height.ApplySettingsToForm(settings, form);
  this.popout_button_size.ApplySettingsToForm(settings, form);
  this.mini_window_buttons_stick_to_the_right_border.ApplySettingsToForm(settings, form);
  this.timestamps_in_contact_list_are_always_visible.ApplySettingsToForm(settings, form);
  this.contact_list_spaces.ApplySettingsToForm(settings, form);
  this.clearer_contact_list_sections_separator.ApplySettingsToForm(settings, form);
  this.compact_layout.ApplySettingsToForm(settings, form);
  this.use_full_page_width.ApplySettingsToForm(settings, form);
  this.thinner_top_bar.ApplySettingsToForm(settings, form);
  this.smaller_paddings_in_chat_dialog.ApplySettingsToForm(settings, form);
  this.thinner_reply_bar.ApplySettingsToForm(settings, form);
  this.chat_spaces.ApplySettingsToForm(settings, form);
  this.hide_meaningless_image_for_video_chat_invitation.ApplySettingsToForm(settings, form);
  this.reactions_are_in_a_convenient_spot.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://mail.google.com/chat/*", "*://chat.google.com/*", "*://mail.google.com/sharing/*"];

} // end of global class chat
