//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class calendar {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img, video, [style*="background-image:"], :fullscreen {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=calendar_dark_mode_enabled id=calendar_dark_mode_enabled _site=calendar _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.calendar_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.calendar_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=calendar_no_animations_enabled id=calendar_no_animations_enabled _site=calendar _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.calendar_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.calendar_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for no_overflow : Display full strings
// Split: big
// Params: 

static no_overflow = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_overflow._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  if (!this.IsEnabled(settings)) return "/* Disabled: Display full strings */\n\n";
  let {} = s;
  return `
/* Display full strings */
* {
  text-overflow: unset !important;
}
[data-hovercard-owner-id] * {
  max-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  return `  <li><hr>
  <li>
  <input type=checkbox name=calendar_no_overflow_enabled id=calendar_no_overflow_enabled _site=calendar _section_id="no_overflow" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_no_overflow_enabled> Display full strings</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_overflow')) settings.no_overflow = {};
  let s = settings.no_overflow;
  let e = form.elements;
  s._enabled = e.calendar_no_overflow_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_overflow;
  let e = form.elements;
  e.calendar_no_overflow_enabled.checked = s._enabled;

}

};  // end of nested class no_overflow


///////////////////////////////////////////////////////////
// Functions for menu_hotkey : Show/hide menu hotkey (Backtick or Ctrl-Backtick)
// Split: minor
// Params: 

static menu_hotkey = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('menu_hotkey')) settings.menu_hotkey = {};
  let s = settings.menu_hotkey;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('menu_hotkey')) settings.menu_hotkey = {};
  let s = settings.menu_hotkey;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.menu_hotkey._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.menu_hotkey;
  if (!this.IsEnabled(settings)) return "/* Disabled: Show/hide menu hotkey (Backtick or Ctrl-Backtick) */\n\n";
  let {} = s;
  return `
/* Show/hide menu hotkey (Backtick or Ctrl-Backtick) */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["show-menu-hotkey.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
document.addEventListener("keydown", ev =>
  ev.key==="`" &&
  (ev.ctrlKey || !["INPUT","TEXTAREA","SELECT", "OPTION"].includes(document.activeElement.tagName)) &&
  (ev.preventDefault(), document.querySelector(`[aria-label="Main drawer"]`)?.click()));

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.menu_hotkey;
  return `  <li style=height:0.5em ><BR>
  <li has_script>
  <input type=checkbox name=calendar_menu_hotkey_enabled id=calendar_menu_hotkey_enabled _site=calendar _section_id="menu_hotkey" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=calendar_menu_hotkey_enabled> Show/hide menu hotkey (Backtick or Ctrl-Backtick)</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('menu_hotkey')) settings.menu_hotkey = {};
  let s = settings.menu_hotkey;
  let e = form.elements;
  s._enabled = e.calendar_menu_hotkey_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.menu_hotkey;
  let e = form.elements;
  e.calendar_menu_hotkey_enabled.checked = s._enabled;

}

};  // end of nested class menu_hotkey


///////////////////////////////////////////////////////////
// Interface functions

static id = "calendar";
static fields = ["dark_mode", "no_animations", "no_overflow", "menu_hotkey"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module calendar disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.no_overflow.GenStyle(settings) +
  this.menu_hotkey.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.no_overflow.GenScriptUrls(settings),
    ...this.menu_hotkey.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.no_overflow.GetScript(settings),
    this.menu_hotkey.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.no_overflow.SetDefaults(settings);
  this.menu_hotkey.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.no_overflow.GenSettingsUi(settings) +
  this.menu_hotkey.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.no_overflow.ImportSettingsFromForm(form, settings);
  this.menu_hotkey.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.no_overflow.ApplySettingsToForm(settings, form);
  this.menu_hotkey.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://calendar.google.com/*"];

} // end of global class calendar
