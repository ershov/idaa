//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class gmail {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img:not([src^="images/"]):not([src^="//ssl.gstatic.com/ui/"]):not([src^="https://docs.google.com/"]), video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_dark_mode_enabled id=gmail_dark_mode_enabled _site=gmail _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.gmail_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.gmail_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=gmail_no_animations_enabled id=gmail_no_animations_enabled _site=gmail _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.gmail_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.gmail_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for list_of_emails : List of emails
// Split: big
// Params: [padding_top 1 0 Padding Top], [padding_bottom 1 0 Padding Bottom]

static list_of_emails = class {

static params = ["padding_top", "padding_bottom"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  s._enabled = true;
  s.padding_top = 0;
  s.padding_bottom = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 0;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
}

static IsEnabled(settings) {
  return settings.list_of_emails._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  if (!this.IsEnabled(settings)) return "/* Disabled: List of emails */\n\n";
  let {padding_top, padding_bottom} = s;
  return `
/* List of emails */
.zA {
    padding-top: ${padding_top}px !important;      /* @1 */
    padding-bottom: ${padding_bottom}px !important;   /* @1 */
    overflow: hidden;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_list_of_emails_enabled id=gmail_list_of_emails_enabled _site=gmail _section_id="list_of_emails" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_list_of_emails_enabled> List of emails</label>
  <ul>
    <li><input
      name=gmail_list_of_emails_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_top"
      _default="0"
      ><input
      name=gmail_list_of_emails_padding_top_val
      size=3
      value=${s.padding_top}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_top"
      _default="0"
      > Padding Top
    <li><input
      name=gmail_list_of_emails_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=gmail_list_of_emails_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=gmail
      _section_id="list_of_emails"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  let e = form.elements;
  s._enabled = e.gmail_list_of_emails_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.gmail_list_of_emails_padding_top_val.value))) s.padding_top = 0;
  if (isNaN(s.padding_bottom = parseInt(e.gmail_list_of_emails_padding_bottom_val.value))) s.padding_bottom = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  let e = form.elements;
  e.gmail_list_of_emails_enabled.checked = s._enabled;
  e.gmail_list_of_emails_padding_top_range.value = e.gmail_list_of_emails_padding_top_val.value = s.padding_top;
  e.gmail_list_of_emails_padding_bottom_range.value = e.gmail_list_of_emails_padding_bottom_val.value = s.padding_bottom;
}

};  // end of nested class list_of_emails


///////////////////////////////////////////////////////////
// Functions for horizontal_cell_paddings_in_grid_cells : Horizontal cell paddings in grid cells
// Split: no
// Params: 

static horizontal_cell_paddings_in_grid_cells = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.horizontal_cell_paddings_in_grid_cells._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  if (!this.IsEnabled(settings)) return "/* Disabled: Horizontal cell paddings in grid cells */\n\n";
  let {} = s;
  return `
/* Horizontal cell paddings in grid cells */
table[role=grid] td {
    padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  return `
  <li>
  <input type=checkbox name=gmail_horizontal_cell_paddings_in_grid_cells_enabled id=gmail_horizontal_cell_paddings_in_grid_cells_enabled _site=gmail _section_id="horizontal_cell_paddings_in_grid_cells" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_horizontal_cell_paddings_in_grid_cells_enabled> Horizontal cell paddings in grid cells</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  let e = form.elements;
  s._enabled = e.gmail_horizontal_cell_paddings_in_grid_cells_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  let e = form.elements;
  e.gmail_horizontal_cell_paddings_in_grid_cells_enabled.checked = s._enabled;

}

};  // end of nested class horizontal_cell_paddings_in_grid_cells


///////////////////////////////////////////////////////////
// Functions for spacing_between_emails_in_thread_view : Spacing between emails in thread view
// Split: minor
// Params: [pBot 3 10 Padding After], [h 1 44 Height], [pTop 1 5 Padding Before]

static spacing_between_emails_in_thread_view = class {

static params = ["pBot", "h", "pTop"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  s._enabled = true;
  s.pBot = 10;
  s.h = 44;
  s.pTop = 5;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('pBot')) s.pBot = 10;
  if (!s.hasOwnProperty('h')) s.h = 44;
  if (!s.hasOwnProperty('pTop')) s.pTop = 5;
}

static IsEnabled(settings) {
  return settings.spacing_between_emails_in_thread_view._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  if (!this.IsEnabled(settings)) return "/* Disabled: Spacing between emails in thread view */\n\n";
  let {pBot, h, pTop} = s;
  return `
/* Spacing between emails in thread view */
.hx .gs {
    padding: 0 0 ${pBot}px 0 !important;   /* @3 @pBot Padding After */
}
.aju {
    height: ${h}px !important;          /* @1 @h */
    padding: 0 6px 0 0 !important;    /* Padding after the user icon */
}
.gE {
    padding: ${pTop}px 0 0 0 !important;    /* @1 @pTop Padding Before */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_spacing_between_emails_in_thread_view_enabled id=gmail_spacing_between_emails_in_thread_view_enabled _site=gmail _section_id="spacing_between_emails_in_thread_view" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_spacing_between_emails_in_thread_view_enabled> Spacing between emails in thread view</label>
  <ul>
    <li><input
      name=gmail_spacing_between_emails_in_thread_view_pBot_range
      type=range
      min=0
      max=50
      value=${s.pBot}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pBot"
      _default="10"
      ><input
      name=gmail_spacing_between_emails_in_thread_view_pBot_val
      size=3
      value=${s.pBot}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pBot"
      _default="10"
      > Padding After
    <li><input
      name=gmail_spacing_between_emails_in_thread_view_h_range
      type=range
      min=0
      max=200
      value=${s.h}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="h"
      _default="44"
      ><input
      name=gmail_spacing_between_emails_in_thread_view_h_val
      size=3
      value=${s.h}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="h"
      _default="44"
      > Height
    <li><input
      name=gmail_spacing_between_emails_in_thread_view_pTop_range
      type=range
      min=0
      max=50
      value=${s.pTop}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pTop"
      _default="5"
      ><input
      name=gmail_spacing_between_emails_in_thread_view_pTop_val
      size=3
      value=${s.pTop}
      _site=gmail
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pTop"
      _default="5"
      > Padding Before
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  let e = form.elements;
  s._enabled = e.gmail_spacing_between_emails_in_thread_view_enabled.checked;
  if (isNaN(s.pBot = parseInt(e.gmail_spacing_between_emails_in_thread_view_pBot_val.value))) s.pBot = 10;
  if (isNaN(s.h = parseInt(e.gmail_spacing_between_emails_in_thread_view_h_val.value))) s.h = 44;
  if (isNaN(s.pTop = parseInt(e.gmail_spacing_between_emails_in_thread_view_pTop_val.value))) s.pTop = 5;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  let e = form.elements;
  e.gmail_spacing_between_emails_in_thread_view_enabled.checked = s._enabled;
  e.gmail_spacing_between_emails_in_thread_view_pBot_range.value = e.gmail_spacing_between_emails_in_thread_view_pBot_val.value = s.pBot;
  e.gmail_spacing_between_emails_in_thread_view_h_range.value = e.gmail_spacing_between_emails_in_thread_view_h_val.value = s.h;
  e.gmail_spacing_between_emails_in_thread_view_pTop_range.value = e.gmail_spacing_between_emails_in_thread_view_pTop_val.value = s.pTop;
}

};  // end of nested class spacing_between_emails_in_thread_view


///////////////////////////////////////////////////////////
// Functions for labels_in_emails_list : Labels in emails list
// Split: big
// Params: [margin_right 1 1 Horizontal spacing]

static labels_in_emails_list = class {

static params = ["margin_right"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  s._enabled = true;
  s.margin_right = 1;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('margin_right')) s.margin_right = 1;
}

static IsEnabled(settings) {
  return settings.labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels in emails list */\n\n";
  let {margin_right} = s;
  return `
/* Labels in emails list */
.ar {
    margin-right: ${margin_right}px !important;     /* @1 Horizontal spacing */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_labels_in_emails_list_enabled id=gmail_labels_in_emails_list_enabled _site=gmail _section_id="labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_labels_in_emails_list_enabled> Labels in emails list</label>
  <ul>
    <li><input
      name=gmail_labels_in_emails_list_margin_right_range
      type=range
      min=0
      max=50
      value=${s.margin_right}
      _site=gmail
      _section_id="labels_in_emails_list"
      _setting_id="margin_right"
      _default="1"
      ><input
      name=gmail_labels_in_emails_list_margin_right_val
      size=3
      value=${s.margin_right}
      _site=gmail
      _section_id="labels_in_emails_list"
      _setting_id="margin_right"
      _default="1"
      > Horizontal spacing
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_labels_in_emails_list_enabled.checked;
  if (isNaN(s.margin_right = parseInt(e.gmail_labels_in_emails_list_margin_right_val.value))) s.margin_right = 1;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  let e = form.elements;
  e.gmail_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_labels_in_emails_list_margin_right_range.value = e.gmail_labels_in_emails_list_margin_right_val.value = s.margin_right;
}

};  // end of nested class labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for smaller_font_for_labels_in_emails_list : Smaller font for labels in emails list
// Split: no
// Params: [font_size 1 70 Font size %]

static smaller_font_for_labels_in_emails_list = class {

static params = ["font_size"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  s._enabled = true;
  s.font_size = 70;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('font_size')) s.font_size = 70;
}

static IsEnabled(settings) {
  return settings.smaller_font_for_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Smaller font for labels in emails list */\n\n";
  let {font_size} = s;
  return `
/* Smaller font for labels in emails list */
.ar {
    font-size: ${font_size}% !important;       /* @1 Font size % */
    height: 16px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_smaller_font_for_labels_in_emails_list_enabled id=gmail_smaller_font_for_labels_in_emails_list_enabled _site=gmail _section_id="smaller_font_for_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_smaller_font_for_labels_in_emails_list_enabled> Smaller font for labels in emails list</label>
  <ul>
    <li><input
      name=gmail_smaller_font_for_labels_in_emails_list_font_size_range
      type=range
      min=0
      max=200
      value=${s.font_size}
      _site=gmail
      _section_id="smaller_font_for_labels_in_emails_list"
      _setting_id="font_size"
      _default="70"
      ><input
      name=gmail_smaller_font_for_labels_in_emails_list_font_size_val
      size=3
      value=${s.font_size}
      _site=gmail
      _section_id="smaller_font_for_labels_in_emails_list"
      _setting_id="font_size"
      _default="70"
      > Font size %
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_smaller_font_for_labels_in_emails_list_enabled.checked;
  if (isNaN(s.font_size = parseInt(e.gmail_smaller_font_for_labels_in_emails_list_font_size_val.value))) s.font_size = 70;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  let e = form.elements;
  e.gmail_smaller_font_for_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_smaller_font_for_labels_in_emails_list_font_size_range.value = e.gmail_smaller_font_for_labels_in_emails_list_font_size_val.value = s.font_size;
}

};  // end of nested class smaller_font_for_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for limit_the_width_of_labels_in_emails_list : Limit the width of labels in emails list
// Split: no
// Params: [max_width 1 70 Max Width], [padding 2 3 Padding]

static limit_the_width_of_labels_in_emails_list = class {

static params = ["max_width", "padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  s._enabled = true;
  s.max_width = 70;
  s.padding = 3;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('max_width')) s.max_width = 70;
  if (!s.hasOwnProperty('padding')) s.padding = 3;
}

static IsEnabled(settings) {
  return settings.limit_the_width_of_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Limit the width of labels in emails list */\n\n";
  let {max_width, padding} = s;
  return `
/* Limit the width of labels in emails list */
tr:not(:hover) td div.ar > div.at > .au > .av
{
    max-width: ${max_width}px !important;       /* @1 */
}
div.ar > div.at > .au > .av
{
    padding: 0 ${padding}px !important;        /* @2 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_limit_the_width_of_labels_in_emails_list_enabled id=gmail_limit_the_width_of_labels_in_emails_list_enabled _site=gmail _section_id="limit_the_width_of_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_limit_the_width_of_labels_in_emails_list_enabled> Limit the width of labels in emails list</label>
  <ul>
    <li><input
      name=gmail_limit_the_width_of_labels_in_emails_list_max_width_range
      type=range
      min=0
      max=200
      value=${s.max_width}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="max_width"
      _default="70"
      ><input
      name=gmail_limit_the_width_of_labels_in_emails_list_max_width_val
      size=3
      value=${s.max_width}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="max_width"
      _default="70"
      > Max Width
    <li><input
      name=gmail_limit_the_width_of_labels_in_emails_list_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="padding"
      _default="3"
      ><input
      name=gmail_limit_the_width_of_labels_in_emails_list_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="padding"
      _default="3"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_limit_the_width_of_labels_in_emails_list_enabled.checked;
  if (isNaN(s.max_width = parseInt(e.gmail_limit_the_width_of_labels_in_emails_list_max_width_val.value))) s.max_width = 70;
  if (isNaN(s.padding = parseInt(e.gmail_limit_the_width_of_labels_in_emails_list_padding_val.value))) s.padding = 3;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  let e = form.elements;
  e.gmail_limit_the_width_of_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_limit_the_width_of_labels_in_emails_list_max_width_range.value = e.gmail_limit_the_width_of_labels_in_emails_list_max_width_val.value = s.max_width;
  e.gmail_limit_the_width_of_labels_in_emails_list_padding_range.value = e.gmail_limit_the_width_of_labels_in_emails_list_padding_val.value = s.padding;
}

};  // end of nested class limit_the_width_of_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for extra_width_for_special_labels_in_emails_list : Extra width for special labels in emails list
// Split: no
// Params: 

static extra_width_for_special_labels_in_emails_list = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.extra_width_for_special_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Extra width for special labels in emails list */\n\n";
  let {} = s;
  return `
/* Extra width for special labels in emails list */
.aRK:before {
    content: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_extra_width_for_special_labels_in_emails_list_enabled id=gmail_extra_width_for_special_labels_in_emails_list_enabled _site=gmail _section_id="extra_width_for_special_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_extra_width_for_special_labels_in_emails_list_enabled> Extra width for special labels in emails list</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_extra_width_for_special_labels_in_emails_list_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  let e = form.elements;
  e.gmail_extra_width_for_special_labels_in_emails_list_enabled.checked = s._enabled;

}

};  // end of nested class extra_width_for_special_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for shrink_general_labels_in_emails_list__like_inbox : Shrink general labels in emails list, like Inbox
// Split: no
// Params: [max_width 1 21 Max Width], [padding 2 1 Padding]

static shrink_general_labels_in_emails_list__like_inbox = class {

static params = ["max_width", "padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  s._enabled = true;
  s.max_width = 21;
  s.padding = 1;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('max_width')) s.max_width = 21;
  if (!s.hasOwnProperty('padding')) s.padding = 1;
}

static IsEnabled(settings) {
  return settings.shrink_general_labels_in_emails_list__like_inbox._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  if (!this.IsEnabled(settings)) return "/* Disabled: Shrink general labels in emails list, like Inbox */\n\n";
  let {max_width, padding} = s;
  return `
/* Shrink general labels in emails list, like Inbox */
tr:not(:hover) td div.ar > div.at[title='Vault "Indef"'] > .au > .av,
tr:not(:hover) td div.ar > div.at[title='Inbox'] > .au > .av,
tr:not(:hover) td div.ar > div.at[title='automatically-processed'] > .au > .av
{
    max-width: ${max_width}px !important;       /* @1 */
    padding: 0 ${padding}px !important;        /* @2 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  return `
  <li>
  <input type=checkbox name=gmail_shrink_general_labels_in_emails_list__like_inbox_enabled id=gmail_shrink_general_labels_in_emails_list__like_inbox_enabled _site=gmail _section_id="shrink_general_labels_in_emails_list__like_inbox" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_shrink_general_labels_in_emails_list__like_inbox_enabled> Shrink general labels in emails list, like Inbox</label>
  <ul>
    <li><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_range
      type=range
      min=0
      max=200
      value=${s.max_width}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="max_width"
      _default="21"
      ><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_val
      size=3
      value=${s.max_width}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="max_width"
      _default="21"
      > Max Width
    <li><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="padding"
      _default="1"
      ><input
      name=gmail_shrink_general_labels_in_emails_list__like_inbox_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="padding"
      _default="1"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  let e = form.elements;
  s._enabled = e.gmail_shrink_general_labels_in_emails_list__like_inbox_enabled.checked;
  if (isNaN(s.max_width = parseInt(e.gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_val.value))) s.max_width = 21;
  if (isNaN(s.padding = parseInt(e.gmail_shrink_general_labels_in_emails_list__like_inbox_padding_val.value))) s.padding = 1;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  let e = form.elements;
  e.gmail_shrink_general_labels_in_emails_list__like_inbox_enabled.checked = s._enabled;
  e.gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_range.value = e.gmail_shrink_general_labels_in_emails_list__like_inbox_max_width_val.value = s.max_width;
  e.gmail_shrink_general_labels_in_emails_list__like_inbox_padding_range.value = e.gmail_shrink_general_labels_in_emails_list__like_inbox_padding_val.value = s.padding;
}

};  // end of nested class shrink_general_labels_in_emails_list__like_inbox


///////////////////////////////////////////////////////////
// Functions for sections_splitter : Sections splitter
// Split: big
// Params: [height 1 26 Height]

static sections_splitter = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  s._enabled = true;
  s.height = 26;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 26;
}

static IsEnabled(settings) {
  return settings.sections_splitter._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  if (!this.IsEnabled(settings)) return "/* Disabled: Sections splitter */\n\n";
  let {height} = s;
  return `
/* Sections splitter */
.Wg {
    height: ${height}px !important;          /* @1 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_sections_splitter_enabled id=gmail_sections_splitter_enabled _site=gmail _section_id="sections_splitter" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_sections_splitter_enabled> Sections splitter</label>
  <ul>
    <li><input
      name=gmail_sections_splitter_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=gmail
      _section_id="sections_splitter"
      _setting_id="height"
      _default="26"
      ><input
      name=gmail_sections_splitter_height_val
      size=3
      value=${s.height}
      _site=gmail
      _section_id="sections_splitter"
      _setting_id="height"
      _default="26"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  let e = form.elements;
  s._enabled = e.gmail_sections_splitter_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_sections_splitter_height_val.value))) s.height = 26;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  let e = form.elements;
  e.gmail_sections_splitter_enabled.checked = s._enabled;
  e.gmail_sections_splitter_height_range.value = e.gmail_sections_splitter_height_val.value = s.height;
}

};  // end of nested class sections_splitter


///////////////////////////////////////////////////////////
// Functions for multiple_inbox_sections : Multiple inbox sections
// Split: no
// Params: [row_height 1 29 row: Height], [title_padding_bottom 1 4 title: Padding Bottom], [title_padding_top 1 4 title: Padding Top], [title_height 1 16 title: Height], [title_padding_left 1 80 title: Label shift towards the middle], [right_button_padding_bottom 1 2 right button: Padding Bottom], [right_button_padding_top 1 2 right button: Padding Top], [right_button_height 1 15 right button: Height], [right_button_line_height 1 15 right button: Line Height]

static multiple_inbox_sections = class {

static params = ["row_height", "title_padding_bottom", "title_padding_top", "title_height", "title_padding_left", "right_button_padding_bottom", "right_button_padding_top", "right_button_height", "right_button_line_height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  s._enabled = true;
  s.row_height = 29;
  s.title_padding_bottom = 4;
  s.title_padding_top = 4;
  s.title_height = 16;
  s.title_padding_left = 80;
  s.right_button_padding_bottom = 2;
  s.right_button_padding_top = 2;
  s.right_button_height = 15;
  s.right_button_line_height = 15;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('row_height')) s.row_height = 29;
  if (!s.hasOwnProperty('title_padding_bottom')) s.title_padding_bottom = 4;
  if (!s.hasOwnProperty('title_padding_top')) s.title_padding_top = 4;
  if (!s.hasOwnProperty('title_height')) s.title_height = 16;
  if (!s.hasOwnProperty('title_padding_left')) s.title_padding_left = 80;
  if (!s.hasOwnProperty('right_button_padding_bottom')) s.right_button_padding_bottom = 2;
  if (!s.hasOwnProperty('right_button_padding_top')) s.right_button_padding_top = 2;
  if (!s.hasOwnProperty('right_button_height')) s.right_button_height = 15;
  if (!s.hasOwnProperty('right_button_line_height')) s.right_button_line_height = 15;
}

static IsEnabled(settings) {
  return settings.multiple_inbox_sections._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  if (!this.IsEnabled(settings)) return "/* Disabled: Multiple inbox sections */\n\n";
  let {row_height, title_padding_bottom, title_padding_top, title_height, title_padding_left, right_button_padding_bottom, right_button_padding_top, right_button_height, right_button_line_height} = s;
  return `
/* Multiple inbox sections */
.nK .byN { /* row */
    height: ${row_height}px !important;          /* @1 */
    background-color: rgba(128, 128, 128, 0.1);
}
.Cq .nJ.A2 { /* title */
    padding-bottom: ${title_padding_bottom}px !important;   /* @1 */
    padding-top: ${title_padding_top}px !important;      /* @1 */
    height: ${title_height}px !important;          /* @1 */
    padding-left: ${title_padding_left}px !important; /* @1 Label shift towards the middle */
}
.Cr .yj { /* right button */
    padding-bottom: ${right_button_padding_bottom}px !important;   /* @1 */
    padding-top: ${right_button_padding_top}px !important;      /* @1 */
    height: ${right_button_height}px !important;          /* @1 */
    line-height: ${right_button_line_height}px !important;     /* @1 */
}
.Di>.amH { /* "1-50 of ..." */
    height: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  return `
  <li>
  <input type=checkbox name=gmail_multiple_inbox_sections_enabled id=gmail_multiple_inbox_sections_enabled _site=gmail _section_id="multiple_inbox_sections" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_multiple_inbox_sections_enabled> Multiple inbox sections</label>
  <ul>
    <li><input
      name=gmail_multiple_inbox_sections_row_height_range
      type=range
      min=0
      max=200
      value=${s.row_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="row_height"
      _default="29"
      ><input
      name=gmail_multiple_inbox_sections_row_height_val
      size=3
      value=${s.row_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="row_height"
      _default="29"
      > row: Height
    <li><input
      name=gmail_multiple_inbox_sections_title_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.title_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_bottom"
      _default="4"
      ><input
      name=gmail_multiple_inbox_sections_title_padding_bottom_val
      size=3
      value=${s.title_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_bottom"
      _default="4"
      > title: Padding Bottom
    <li><input
      name=gmail_multiple_inbox_sections_title_padding_top_range
      type=range
      min=0
      max=50
      value=${s.title_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_top"
      _default="4"
      ><input
      name=gmail_multiple_inbox_sections_title_padding_top_val
      size=3
      value=${s.title_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_top"
      _default="4"
      > title: Padding Top
    <li><input
      name=gmail_multiple_inbox_sections_title_height_range
      type=range
      min=0
      max=50
      value=${s.title_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_height"
      _default="16"
      ><input
      name=gmail_multiple_inbox_sections_title_height_val
      size=3
      value=${s.title_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_height"
      _default="16"
      > title: Height
    <li><input
      name=gmail_multiple_inbox_sections_title_padding_left_range
      type=range
      min=0
      max=200
      value=${s.title_padding_left}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_left"
      _default="80"
      ><input
      name=gmail_multiple_inbox_sections_title_padding_left_val
      size=3
      value=${s.title_padding_left}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_left"
      _default="80"
      > title: Label shift towards the middle
    <li><input
      name=gmail_multiple_inbox_sections_right_button_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.right_button_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_bottom"
      _default="2"
      ><input
      name=gmail_multiple_inbox_sections_right_button_padding_bottom_val
      size=3
      value=${s.right_button_padding_bottom}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_bottom"
      _default="2"
      > right button: Padding Bottom
    <li><input
      name=gmail_multiple_inbox_sections_right_button_padding_top_range
      type=range
      min=0
      max=50
      value=${s.right_button_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_top"
      _default="2"
      ><input
      name=gmail_multiple_inbox_sections_right_button_padding_top_val
      size=3
      value=${s.right_button_padding_top}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_top"
      _default="2"
      > right button: Padding Top
    <li><input
      name=gmail_multiple_inbox_sections_right_button_height_range
      type=range
      min=0
      max=50
      value=${s.right_button_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_height"
      _default="15"
      ><input
      name=gmail_multiple_inbox_sections_right_button_height_val
      size=3
      value=${s.right_button_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_height"
      _default="15"
      > right button: Height
    <li><input
      name=gmail_multiple_inbox_sections_right_button_line_height_range
      type=range
      min=0
      max=50
      value=${s.right_button_line_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_line_height"
      _default="15"
      ><input
      name=gmail_multiple_inbox_sections_right_button_line_height_val
      size=3
      value=${s.right_button_line_height}
      _site=gmail
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_line_height"
      _default="15"
      > right button: Line Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  let e = form.elements;
  s._enabled = e.gmail_multiple_inbox_sections_enabled.checked;
  if (isNaN(s.row_height = parseInt(e.gmail_multiple_inbox_sections_row_height_val.value))) s.row_height = 29;
  if (isNaN(s.title_padding_bottom = parseInt(e.gmail_multiple_inbox_sections_title_padding_bottom_val.value))) s.title_padding_bottom = 4;
  if (isNaN(s.title_padding_top = parseInt(e.gmail_multiple_inbox_sections_title_padding_top_val.value))) s.title_padding_top = 4;
  if (isNaN(s.title_height = parseInt(e.gmail_multiple_inbox_sections_title_height_val.value))) s.title_height = 16;
  if (isNaN(s.title_padding_left = parseInt(e.gmail_multiple_inbox_sections_title_padding_left_val.value))) s.title_padding_left = 80;
  if (isNaN(s.right_button_padding_bottom = parseInt(e.gmail_multiple_inbox_sections_right_button_padding_bottom_val.value))) s.right_button_padding_bottom = 2;
  if (isNaN(s.right_button_padding_top = parseInt(e.gmail_multiple_inbox_sections_right_button_padding_top_val.value))) s.right_button_padding_top = 2;
  if (isNaN(s.right_button_height = parseInt(e.gmail_multiple_inbox_sections_right_button_height_val.value))) s.right_button_height = 15;
  if (isNaN(s.right_button_line_height = parseInt(e.gmail_multiple_inbox_sections_right_button_line_height_val.value))) s.right_button_line_height = 15;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  let e = form.elements;
  e.gmail_multiple_inbox_sections_enabled.checked = s._enabled;
  e.gmail_multiple_inbox_sections_row_height_range.value = e.gmail_multiple_inbox_sections_row_height_val.value = s.row_height;
  e.gmail_multiple_inbox_sections_title_padding_bottom_range.value = e.gmail_multiple_inbox_sections_title_padding_bottom_val.value = s.title_padding_bottom;
  e.gmail_multiple_inbox_sections_title_padding_top_range.value = e.gmail_multiple_inbox_sections_title_padding_top_val.value = s.title_padding_top;
  e.gmail_multiple_inbox_sections_title_height_range.value = e.gmail_multiple_inbox_sections_title_height_val.value = s.title_height;
  e.gmail_multiple_inbox_sections_title_padding_left_range.value = e.gmail_multiple_inbox_sections_title_padding_left_val.value = s.title_padding_left;
  e.gmail_multiple_inbox_sections_right_button_padding_bottom_range.value = e.gmail_multiple_inbox_sections_right_button_padding_bottom_val.value = s.right_button_padding_bottom;
  e.gmail_multiple_inbox_sections_right_button_padding_top_range.value = e.gmail_multiple_inbox_sections_right_button_padding_top_val.value = s.right_button_padding_top;
  e.gmail_multiple_inbox_sections_right_button_height_range.value = e.gmail_multiple_inbox_sections_right_button_height_val.value = s.right_button_height;
  e.gmail_multiple_inbox_sections_right_button_line_height_range.value = e.gmail_multiple_inbox_sections_right_button_line_height_val.value = s.right_button_line_height;
}

};  // end of nested class multiple_inbox_sections


///////////////////////////////////////////////////////////
// Functions for fix_too_large_hitboxes_for_email_selection_marks : Fix too large hitboxes for email selection marks
// Split: big
// Params: 

static fix_too_large_hitboxes_for_email_selection_marks = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.fix_too_large_hitboxes_for_email_selection_marks._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  if (!this.IsEnabled(settings)) return "/* Disabled: Fix too large hitboxes for email selection marks */\n\n";
  let {} = s;
  return `
/* Fix too large hitboxes for email selection marks */
.xY>.T-Jo::before {
    content: '';
    display: block;
    opacity: 0;
    position: absolute;
    transition-duration: 0s !important;
    z-index: -1;
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
    background: none;
    border-radius: 50%;
    box-sizing: border-box;
    transform: scale(0);
    transition-property: '';
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
}

.T-Jo::before {
    content: '' !important;
    display: block;
    opacity: 0;
    position: absolute;
    transition-duration: 0s !important;
    z-index: -1;
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
    background: none;
    border-radius: 50%;
    box-sizing: border-box;
    transform: scale(0);
    transition-property: '';
}

.xY>.T-Jo::after, .xY>.T-Jo-Jp::after {
    height: 0px !important;
    width: 0px !important;
}

.T-Jo::after {
    content: "";
    height: 100% !important;
    position: static !important;
    top: 0px !important;
    left: 0px !important;
    width: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled id=gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled _site=gmail _section_id="fix_too_large_hitboxes_for_email_selection_marks" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled> Fix too large hitboxes for email selection marks</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  let e = form.elements;
  s._enabled = e.gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  let e = form.elements;
  e.gmail_fix_too_large_hitboxes_for_email_selection_marks_enabled.checked = s._enabled;

}

};  // end of nested class fix_too_large_hitboxes_for_email_selection_marks


///////////////////////////////////////////////////////////
// Functions for highlight_focused_hovered_line : Highlight focused/hovered line
// Split: minor
// Params: 

static highlight_focused_hovered_line = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.highlight_focused_hovered_line._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  if (!this.IsEnabled(settings)) return "/* Disabled: Highlight focused/hovered line */\n\n";
  let {} = s;
  return `
/* Highlight focused/hovered line */
.zA:hover, .zA:focus {
    box-shadow: inset 0 0 10px 0px #808080;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_highlight_focused_hovered_line_enabled id=gmail_highlight_focused_hovered_line_enabled _site=gmail _section_id="highlight_focused_hovered_line" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_highlight_focused_hovered_line_enabled> Highlight focused/hovered line</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  let e = form.elements;
  s._enabled = e.gmail_highlight_focused_hovered_line_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  let e = form.elements;
  e.gmail_highlight_focused_hovered_line_enabled.checked = s._enabled;

}

};  // end of nested class highlight_focused_hovered_line


///////////////////////////////////////////////////////////
// Functions for labels_tree : Labels tree
// Split: minor
// Params: [height 1 18 Height]

static labels_tree = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  s._enabled = true;
  s.height = 18;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 18;
}

static IsEnabled(settings) {
  return settings.labels_tree._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels tree */\n\n";
  let {height} = s;
  return `
/* Labels tree */
.TN {
    height: ${height}px !important;        /* @1 */
    overflow: hidden;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_labels_tree_enabled id=gmail_labels_tree_enabled _site=gmail _section_id="labels_tree" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_labels_tree_enabled> Labels tree</label>
  <ul>
    <li><input
      name=gmail_labels_tree_height_range
      type=range
      min=0
      max=50
      value=${s.height}
      _site=gmail
      _section_id="labels_tree"
      _setting_id="height"
      _default="18"
      ><input
      name=gmail_labels_tree_height_val
      size=3
      value=${s.height}
      _site=gmail
      _section_id="labels_tree"
      _setting_id="height"
      _default="18"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  let e = form.elements;
  s._enabled = e.gmail_labels_tree_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_labels_tree_height_val.value))) s.height = 18;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  let e = form.elements;
  e.gmail_labels_tree_enabled.checked = s._enabled;
  e.gmail_labels_tree_height_range.value = e.gmail_labels_tree_height_val.value = s.height;
}

};  // end of nested class labels_tree


///////////////////////////////////////////////////////////
// Functions for nav_labels : Labels nav width 240 -> 200
// Split: minor
// Params: [width 1 200 Max Width]

static nav_labels = class {

static params = ["width"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  s._enabled = true;
  s.width = 200;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('width')) s.width = 200;
}

static IsEnabled(settings) {
  return settings.nav_labels._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels nav width 240 -> 200 */\n\n";
  let {width} = s;
  return `
/* Labels nav width 240 -> 200 */
div.aeN:not(.bhZ) .wT {
    max-width: ${width}px !important;    /* @1 @width */
    min-width: ${width}px !important;    /* @1=width */
}
/*-Labels nav scroll bar: 16px -> 10px */
/*-NOTE: has to add "div." in order to raise the priority */
div.aeN:not(.bhZ) {
    max-width: ${settings.nav_labels.width+10}px !important;    /* @1=settings.nav_labels.width+10 */
    min-width: ${settings.nav_labels.width+10}px !important;    /* @1=settings.nav_labels.width+10 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_nav_labels_enabled id=gmail_nav_labels_enabled _site=gmail _section_id="nav_labels" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_nav_labels_enabled> Labels nav width 240 -> 200</label>
  <ul>
    <li><input
      name=gmail_nav_labels_width_range
      type=range
      min=0
      max=1000
      value=${s.width}
      _site=gmail
      _section_id="nav_labels"
      _setting_id="width"
      _default="200"
      ><input
      name=gmail_nav_labels_width_val
      size=3
      value=${s.width}
      _site=gmail
      _section_id="nav_labels"
      _setting_id="width"
      _default="200"
      > Max Width
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  let e = form.elements;
  s._enabled = e.gmail_nav_labels_enabled.checked;
  if (isNaN(s.width = parseInt(e.gmail_nav_labels_width_val.value))) s.width = 200;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  let e = form.elements;
  e.gmail_nav_labels_enabled.checked = s._enabled;
  e.gmail_nav_labels_width_range.value = e.gmail_nav_labels_width_val.value = s.width;
}

};  // end of nested class nav_labels


///////////////////////////////////////////////////////////
// Functions for nav_labels_collapsed : Collapsed nav expands wider
// Split: no
// Params: [width 1 300 Max Width]

static nav_labels_collapsed = class {

static params = ["width"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  s._enabled = true;
  s.width = 300;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('width')) s.width = 300;
}

static IsEnabled(settings) {
  return settings.nav_labels_collapsed._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  if (!this.IsEnabled(settings)) return "/* Disabled: Collapsed nav expands wider */\n\n";
  let {width} = s;
  return `
/* Collapsed nav expands wider */
div.bhZ.bym div.wT {
    max-width: ${width}px !important;    /* @1 @width */
    min-width: ${width}px !important;    /* @1=width */
}
/*-Labels nav scroll bar: 16px */
/*-NOTE: has to add "div." in order to raise the priority */
div.aeN.bhZ.bym {
    max-width: ${settings.nav_labels_collapsed.width+16}px !important;    /* @1=settings.nav_labels_collapsed.width+16 */
    min-width: ${settings.nav_labels_collapsed.width+16}px !important;    /* @1=settings.nav_labels_collapsed.width+16 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  return `
  <li>
  <input type=checkbox name=gmail_nav_labels_collapsed_enabled id=gmail_nav_labels_collapsed_enabled _site=gmail _section_id="nav_labels_collapsed" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_nav_labels_collapsed_enabled> Collapsed nav expands wider</label>
  <ul>
    <li><input
      name=gmail_nav_labels_collapsed_width_range
      type=range
      min=0
      max=1000
      value=${s.width}
      _site=gmail
      _section_id="nav_labels_collapsed"
      _setting_id="width"
      _default="300"
      ><input
      name=gmail_nav_labels_collapsed_width_val
      size=3
      value=${s.width}
      _site=gmail
      _section_id="nav_labels_collapsed"
      _setting_id="width"
      _default="300"
      > Max Width
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  let e = form.elements;
  s._enabled = e.gmail_nav_labels_collapsed_enabled.checked;
  if (isNaN(s.width = parseInt(e.gmail_nav_labels_collapsed_width_val.value))) s.width = 300;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  let e = form.elements;
  e.gmail_nav_labels_collapsed_enabled.checked = s._enabled;
  e.gmail_nav_labels_collapsed_width_range.value = e.gmail_nav_labels_collapsed_width_val.value = s.width;
}

};  // end of nested class nav_labels_collapsed


///////////////////////////////////////////////////////////
// Functions for compose_button : Compose button
// Split: minor
// Params: 

static compose_button = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compose_button._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compose button */\n\n";
  let {} = s;
  return `
/* Compose button */
.z0>.L3 {
    height: 30px !important;
}
.z0 {
    height: 30px !important;
    margin: 4px 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_compose_button_enabled id=gmail_compose_button_enabled _site=gmail _section_id="compose_button" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_compose_button_enabled> Compose button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  let e = form.elements;
  s._enabled = e.gmail_compose_button_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  let e = form.elements;
  e.gmail_compose_button_enabled.checked = s._enabled;

}

};  // end of nested class compose_button


///////////////////////////////////////////////////////////
// Functions for hide_huge_blue__search_refinement__buttons : Hide huge blue 'search refinement' buttons
// Split: minor
// Params: 

static hide_huge_blue__search_refinement__buttons = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.hide_huge_blue__search_refinement__buttons._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  if (!this.IsEnabled(settings)) return "/* Disabled: Hide huge blue 'search refinement' buttons */\n\n";
  let {} = s;
  return `
/* Hide huge blue 'search refinement' buttons */
div[role='toolbar'][aria-label='search refinement'] {
  display:none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_hide_huge_blue__search_refinement__buttons_enabled id=gmail_hide_huge_blue__search_refinement__buttons_enabled _site=gmail _section_id="hide_huge_blue__search_refinement__buttons" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_hide_huge_blue__search_refinement__buttons_enabled> Hide huge blue 'search refinement' buttons</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  let e = form.elements;
  s._enabled = e.gmail_hide_huge_blue__search_refinement__buttons_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  let e = form.elements;
  e.gmail_hide_huge_blue__search_refinement__buttons_enabled.checked = s._enabled;

}

};  // end of nested class hide_huge_blue__search_refinement__buttons


///////////////////////////////////////////////////////////
// Functions for area_right_to_the_compose_button_and_above_the_list_of_emails : Area right to the compose button and above the list of emails
// Split: no
// Params: [height 1 26 Height]

static area_right_to_the_compose_button_and_above_the_list_of_emails = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  s._enabled = true;
  s.height = 26;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 26;
}

static IsEnabled(settings) {
  return settings.area_right_to_the_compose_button_and_above_the_list_of_emails._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  if (!this.IsEnabled(settings)) return "/* Disabled: Area right to the compose button and above the list of emails */\n\n";
  let {height} = s;
  return `
/* Area right to the compose button and above the list of emails */
.G-atb {
    height: ${height}px !important;          /* @1 */
    overflow: hidden;
}
/*-Absolutely empty invisible hren hiding buttons */
header[role=banner] > :nth-child(3) {
    display:none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  return `
  <li>
  <input type=checkbox name=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled id=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled _site=gmail _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled> Area right to the compose button and above the list of emails</label>
  <ul>
    <li><input
      name=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=gmail
      _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails"
      _setting_id="height"
      _default="26"
      ><input
      name=gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val
      size=3
      value=${s.height}
      _site=gmail
      _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails"
      _setting_id="height"
      _default="26"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  let e = form.elements;
  s._enabled = e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val.value))) s.height = 26;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  let e = form.elements;
  e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled.checked = s._enabled;
  e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_range.value = e.gmail_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val.value = s.height;
}

};  // end of nested class area_right_to_the_compose_button_and_above_the_list_of_emails


///////////////////////////////////////////////////////////
// Functions for subject_bar_when_reading_email : Subject bar when reading email
// Split: minor
// Params: [padding_top 1 8 Padding Top], [padding_bottom 1 0 Padding Bottom], [padding_left 1 10 Padding Left]

static subject_bar_when_reading_email = class {

static params = ["padding_top", "padding_bottom", "padding_left"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  s._enabled = true;
  s.padding_top = 8;
  s.padding_bottom = 0;
  s.padding_left = 10;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 8;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
  if (!s.hasOwnProperty('padding_left')) s.padding_left = 10;
}

static IsEnabled(settings) {
  return settings.subject_bar_when_reading_email._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  if (!this.IsEnabled(settings)) return "/* Disabled: Subject bar when reading email */\n\n";
  let {padding_top, padding_bottom, padding_left} = s;
  return `
/* Subject bar when reading email */
.if>.byY, .iC .byY {
    padding-top: ${padding_top}px !important;      /* @1 */
    padding-bottom: ${padding_bottom}px !important;   /* @1 */
    padding-left: ${padding_left}px !important;    /* @1 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_subject_bar_when_reading_email_enabled id=gmail_subject_bar_when_reading_email_enabled _site=gmail _section_id="subject_bar_when_reading_email" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_subject_bar_when_reading_email_enabled> Subject bar when reading email</label>
  <ul>
    <li><input
      name=gmail_subject_bar_when_reading_email_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_top"
      _default="8"
      ><input
      name=gmail_subject_bar_when_reading_email_padding_top_val
      size=3
      value=${s.padding_top}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_top"
      _default="8"
      > Padding Top
    <li><input
      name=gmail_subject_bar_when_reading_email_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=gmail_subject_bar_when_reading_email_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
    <li><input
      name=gmail_subject_bar_when_reading_email_padding_left_range
      type=range
      min=0
      max=50
      value=${s.padding_left}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_left"
      _default="10"
      ><input
      name=gmail_subject_bar_when_reading_email_padding_left_val
      size=3
      value=${s.padding_left}
      _site=gmail
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_left"
      _default="10"
      > Padding Left
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  let e = form.elements;
  s._enabled = e.gmail_subject_bar_when_reading_email_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.gmail_subject_bar_when_reading_email_padding_top_val.value))) s.padding_top = 8;
  if (isNaN(s.padding_bottom = parseInt(e.gmail_subject_bar_when_reading_email_padding_bottom_val.value))) s.padding_bottom = 0;
  if (isNaN(s.padding_left = parseInt(e.gmail_subject_bar_when_reading_email_padding_left_val.value))) s.padding_left = 10;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  let e = form.elements;
  e.gmail_subject_bar_when_reading_email_enabled.checked = s._enabled;
  e.gmail_subject_bar_when_reading_email_padding_top_range.value = e.gmail_subject_bar_when_reading_email_padding_top_val.value = s.padding_top;
  e.gmail_subject_bar_when_reading_email_padding_bottom_range.value = e.gmail_subject_bar_when_reading_email_padding_bottom_val.value = s.padding_bottom;
  e.gmail_subject_bar_when_reading_email_padding_left_range.value = e.gmail_subject_bar_when_reading_email_padding_left_val.value = s.padding_left;
}

};  // end of nested class subject_bar_when_reading_email


///////////////////////////////////////////////////////////
// Functions for email_reply_text_area__add_border : Email reply text area: add border
// Split: minor
// Params: 

static email_reply_text_area__add_border = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.email_reply_text_area__add_border._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  if (!this.IsEnabled(settings)) return "/* Disabled: Email reply text area: add border */\n\n";
  let {} = s;
  return `
/* Email reply text area: add border */
.qz {
    border-top: 1px solid #e0e0e0 !important;
    border-bottom: 1px solid #e0e0e0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_email_reply_text_area__add_border_enabled id=gmail_email_reply_text_area__add_border_enabled _site=gmail _section_id="email_reply_text_area__add_border" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_email_reply_text_area__add_border_enabled> Email reply text area: add border</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  let e = form.elements;
  s._enabled = e.gmail_email_reply_text_area__add_border_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  let e = form.elements;
  e.gmail_email_reply_text_area__add_border_enabled.checked = s._enabled;

}

};  // end of nested class email_reply_text_area__add_border


///////////////////////////////////////////////////////////
// Functions for reply_form_uses_full_width : Reply form uses full width
// Split: no
// Params: [padding 1 6 Padding]

static reply_form_uses_full_width = class {

static params = ["padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  s._enabled = true;
  s.padding = 6;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding')) s.padding = 6;
}

static IsEnabled(settings) {
  return settings.reply_form_uses_full_width._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reply form uses full width */\n\n";
  let {padding} = s;
  return `
/* Reply form uses full width */
.adB .aoI {
    padding: 0 !important;
}
.HM .et {
    padding-left: ${padding}px !important;   /* @1 @padding Padding */
    padding-right: ${padding}px !important;  /* @1=padding */
}
.Ur {
    margin-left: ${padding}px !important;    /* @1=padding */
}
table.IG {
    padding: 0px ${padding}px !important;    /* @2=padding */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  return `
  <li>
  <input type=checkbox name=gmail_reply_form_uses_full_width_enabled id=gmail_reply_form_uses_full_width_enabled _site=gmail _section_id="reply_form_uses_full_width" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_reply_form_uses_full_width_enabled> Reply form uses full width</label>
  <ul>
    <li><input
      name=gmail_reply_form_uses_full_width_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="reply_form_uses_full_width"
      _setting_id="padding"
      _default="6"
      ><input
      name=gmail_reply_form_uses_full_width_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="reply_form_uses_full_width"
      _setting_id="padding"
      _default="6"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  let e = form.elements;
  s._enabled = e.gmail_reply_form_uses_full_width_enabled.checked;
  if (isNaN(s.padding = parseInt(e.gmail_reply_form_uses_full_width_padding_val.value))) s.padding = 6;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  let e = form.elements;
  e.gmail_reply_form_uses_full_width_enabled.checked = s._enabled;
  e.gmail_reply_form_uses_full_width_padding_range.value = e.gmail_reply_form_uses_full_width_padding_val.value = s.padding;
}

};  // end of nested class reply_form_uses_full_width


///////////////////////////////////////////////////////////
// Functions for in_page_compose_window_header : In-page compose window header
// Split: minor
// Params: [padding 1 0 Padding Top]

static in_page_compose_window_header = class {

static params = ["padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  s._enabled = true;
  s.padding = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding')) s.padding = 0;
}

static IsEnabled(settings) {
  return settings.in_page_compose_window_header._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  if (!this.IsEnabled(settings)) return "/* Disabled: In-page compose window header */\n\n";
  let {padding} = s;
  return `
/* In-page compose window header */
.Hp {
  margin-left: 6px;
  padding: 0 !important;
  padding-top: ${padding} !important;       /* @1 @padding */
  padding-bottom: ${padding} !important;    /* @1=padding */
}
.Hm {
  padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_in_page_compose_window_header_enabled id=gmail_in_page_compose_window_header_enabled _site=gmail _section_id="in_page_compose_window_header" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_in_page_compose_window_header_enabled> In-page compose window header</label>
  <ul>
    <li><input
      name=gmail_in_page_compose_window_header_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="in_page_compose_window_header"
      _setting_id="padding"
      _default="0"
      ><input
      name=gmail_in_page_compose_window_header_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="in_page_compose_window_header"
      _setting_id="padding"
      _default="0"
      > Padding Top
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  let e = form.elements;
  s._enabled = e.gmail_in_page_compose_window_header_enabled.checked;
  if (isNaN(s.padding = parseInt(e.gmail_in_page_compose_window_header_padding_val.value))) s.padding = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  let e = form.elements;
  e.gmail_in_page_compose_window_header_enabled.checked = s._enabled;
  e.gmail_in_page_compose_window_header_padding_range.value = e.gmail_in_page_compose_window_header_padding_val.value = s.padding;
}

};  // end of nested class in_page_compose_window_header


///////////////////////////////////////////////////////////
// Functions for absolutely_empty_space_above_chat : Absolutely empty space above chat
// Split: minor
// Params: 

static absolutely_empty_space_above_chat = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.absolutely_empty_space_above_chat._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  if (!this.IsEnabled(settings)) return "/* Disabled: Absolutely empty space above chat */\n\n";
  let {} = s;
  return `
/* Absolutely empty space above chat */
.akj {
    margin-top: 10px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_absolutely_empty_space_above_chat_enabled id=gmail_absolutely_empty_space_above_chat_enabled _site=gmail _section_id="absolutely_empty_space_above_chat" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_absolutely_empty_space_above_chat_enabled> Absolutely empty space above chat</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  let e = form.elements;
  s._enabled = e.gmail_absolutely_empty_space_above_chat_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  let e = form.elements;
  e.gmail_absolutely_empty_space_above_chat_enabled.checked = s._enabled;

}

};  // end of nested class absolutely_empty_space_above_chat


///////////////////////////////////////////////////////////
// Functions for padding_on_the_right_of_the_chat : Padding on the right of the chat
// Split: no
// Params: 

static padding_on_the_right_of_the_chat = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.padding_on_the_right_of_the_chat._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  if (!this.IsEnabled(settings)) return "/* Disabled: Padding on the right of the chat */\n\n";
  let {} = s;
  return `
/* Padding on the right of the chat */
div.aCl div.akj {
    padding-right: 0px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  return `
  <li>
  <input type=checkbox name=gmail_padding_on_the_right_of_the_chat_enabled id=gmail_padding_on_the_right_of_the_chat_enabled _site=gmail _section_id="padding_on_the_right_of_the_chat" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_padding_on_the_right_of_the_chat_enabled> Padding on the right of the chat</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  let e = form.elements;
  s._enabled = e.gmail_padding_on_the_right_of_the_chat_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  let e = form.elements;
  e.gmail_padding_on_the_right_of_the_chat_enabled.checked = s._enabled;

}

};  // end of nested class padding_on_the_right_of_the_chat


///////////////////////////////////////////////////////////
// Functions for compact_chat_contact_list : Compact chat contact list
// Split: no
// Params: 

static compact_chat_contact_list = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compact_chat_contact_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact chat contact list */\n\n";
  let {} = s;
  return `
/* Compact chat contact list */
.V6.CL { /*--contact list headings--*/
  height: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  return `
  <li>
  <input type=checkbox name=gmail_compact_chat_contact_list_enabled id=gmail_compact_chat_contact_list_enabled _site=gmail _section_id="compact_chat_contact_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_compact_chat_contact_list_enabled> Compact chat contact list</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  let e = form.elements;
  s._enabled = e.gmail_compact_chat_contact_list_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  let e = form.elements;
  e.gmail_compact_chat_contact_list_enabled.checked = s._enabled;

}

};  // end of nested class compact_chat_contact_list


///////////////////////////////////////////////////////////
// Functions for clearer_chat_contact_list_sections_separator : Clearer chat contact list sections separator
// Split: no
// Params: 

static clearer_chat_contact_list_sections_separator = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.clearer_chat_contact_list_sections_separator._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  if (!this.IsEnabled(settings)) return "/* Disabled: Clearer chat contact list sections separator */\n\n";
  let {} = s;
  return `
/* Clearer chat contact list sections separator */
.WR .Xa .X9 {
  background: linear-gradient(180deg, #E0E0E0 0, #FFF 1rem) !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  return `
  <li>
  <input type=checkbox name=gmail_clearer_chat_contact_list_sections_separator_enabled id=gmail_clearer_chat_contact_list_sections_separator_enabled _site=gmail _section_id="clearer_chat_contact_list_sections_separator" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_clearer_chat_contact_list_sections_separator_enabled> Clearer chat contact list sections separator</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  let e = form.elements;
  s._enabled = e.gmail_clearer_chat_contact_list_sections_separator_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  let e = form.elements;
  e.gmail_clearer_chat_contact_list_sections_separator_enabled.checked = s._enabled;

}

};  // end of nested class clearer_chat_contact_list_sections_separator


///////////////////////////////////////////////////////////
// Functions for top_bar : Top bar width, height, paddings
// Split: big
// Params: 

static top_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.top_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Top bar width, height, paddings */\n\n";
  let {} = s;
  return `
/* Top bar width, height, paddings */
/*-Top bar paddings */
.gb_Va:not(.gb_Wa) .gb_Ld ,
.gb_Va:not(.gb_Wa) .gb_Md {
    padding: 0px !important;
}

/*-Top bar height */
.gb_Dc , .gb_Ec , .gb_Mc , [data-ogsr-up] {
    height: 34px !important;
}
header[role=banner] > div {
    padding: 0px !important;
}
div.gb_ce {
    height: 36px !important;
}
header[role=banner] > div:nth-child(2) > div:first-child ,
header[role=banner] > div:nth-child(2) > div:nth-child(2) ,
header[role=banner] > div:nth-child(2) > div:nth-child(2) > div
{
    height: 36px !important;
}
/*-search bar */
.gb_jf , .gb_kf, .gb_0d, .gb_6d {
    height: 36px !important;
}
.gb_Bf , .gb_Cf , form#aso_search_form_anchor > div[gh=sb] {
    height: 32px !important;
}
form#aso_search_form_anchor > div[gh=sb] > table[role=presentation] > tbody > tr {
    height: 0px !important;
}
form#aso_search_form_anchor > div[gh=sb] > table[role=presentation] table td {
    padding: 0px !important;
}
/*-Parent td of input[name=q] */
td.gsib_a {
    vertical-align: top !important;
}
/*-search bar icons and buttons */
.gb_1e button svg, .gb_1e button img,
.gb_2e button svg, .gb_2e button img,
form#aso_search_form_anchor button svg, form#aso_search_form_anchor button img
{
    padding: 2px !important;
    margin: 2px !important;
}
/*-top bar right icons */
.gb_Pe {
    background: inherit !important;
    background-color: inherit !important;
}
/*-Smaller sandwitch menu button */
.gb_ic , .gb_jc , .gb_pc , div[aria-label="Main menu"] {
    -webkit-border-radius: 25% !important;
    border-radius: 25% !important;
    padding: 4px !important;
}

/*-Top bar, account access */
div.gb_Va.gb_Mg.gb_R,
div.gb_Va.gb_Pg.gb_R {
    max-height: 41px !important;
    margin-top: -8px !important;
}
/*-Account dropdown */
div.gb_aa {
    top: 36px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_top_bar_enabled id=gmail_top_bar_enabled _site=gmail _section_id="top_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_top_bar_enabled> Top bar width, height, paddings</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  let e = form.elements;
  s._enabled = e.gmail_top_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  let e = form.elements;
  e.gmail_top_bar_enabled.checked = s._enabled;

}

};  // end of nested class top_bar


///////////////////////////////////////////////////////////
// Functions for buttons_look_active_and_clickable__exclude_label_tags_ : Buttons look active and clickable. Exclude label tags.
// Split: minor
// Params: 

static buttons_look_active_and_clickable__exclude_label_tags_ = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.buttons_look_active_and_clickable__exclude_label_tags_._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  if (!this.IsEnabled(settings)) return "/* Disabled: Buttons look active and clickable. Exclude label tags. */\n\n";
  let {} = s;
  return `
/* Buttons look active and clickable. Exclude label tags. */
div[role=button]:not(.hN) {
    box-shadow: 0 0 1px 0px #808080 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled id=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled _site=gmail _section_id="buttons_look_active_and_clickable__exclude_label_tags_" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled> Buttons look active and clickable. Exclude label tags.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  let e = form.elements;
  s._enabled = e.gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  let e = form.elements;
  e.gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled.checked = s._enabled;

}

};  // end of nested class buttons_look_active_and_clickable__exclude_label_tags_


///////////////////////////////////////////////////////////
// Functions for reduce_side_panel_when_it_s_collapsed : Reduce side panel when it's collapsed
// Split: minor
// Params: 

static reduce_side_panel_when_it_s_collapsed = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.reduce_side_panel_when_it_s_collapsed._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce side panel when it's collapsed */\n\n";
  let {} = s;
  return `
/* Reduce side panel when it's collapsed */
.bAw.it {
    min-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_reduce_side_panel_when_it_s_collapsed_enabled id=gmail_reduce_side_panel_when_it_s_collapsed_enabled _site=gmail _section_id="reduce_side_panel_when_it_s_collapsed" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_reduce_side_panel_when_it_s_collapsed_enabled> Reduce side panel when it's collapsed</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  let e = form.elements;
  s._enabled = e.gmail_reduce_side_panel_when_it_s_collapsed_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  let e = form.elements;
  e.gmail_reduce_side_panel_when_it_s_collapsed_enabled.checked = s._enabled;

}

};  // end of nested class reduce_side_panel_when_it_s_collapsed


///////////////////////////////////////////////////////////
// Functions for print_cleanup : Print view cleanup button
// Split: big
// Params: 

static print_cleanup = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.print_cleanup._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  if (!this.IsEnabled(settings)) return "/* Disabled: Print view cleanup button */\n\n";
  let {} = s;
  return `
/* Print view cleanup button */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["print_cleanup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
if (location.href.match(/[&?]view=pt/)) {
  document.querySelector("table td:last-child").insertAdjacentHTML("beforeBegin", `<td><button id=tidyup>Clean Up</button></td>`);
  tidyup.onclick = ()=> {
    [...document.querySelectorAll(`
body > div.bodycontainer > table,
font[color="#888888"],
font[color="#550055"],
div[data-smartmail="gmail_signature"],
.gmail_quote > .gmail_quote,
.recipient
`)].forEach(e => e.remove());

    // Remove all after hidden quote
    document.querySelectorAll(`div[style="padding:5 0"]`).forEach(e => {
      while (e.nextSibling) e.nextSibling.remove();
      e.remove();
    });

    // Remove everything after "--"
    [...(function*(){
      let next, it = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT);
      while (next = it.nextNode()) yield next;
    })()].
      filter(e => e.data === "-- ").
      forEach(e => {
        while (e.nextSibling) e.nextSibling.remove(); e.remove();
      });

    [...(function*(){
      let next, it = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT);
      while (next = it.nextNode()) yield next;
    })()].
      filter(e => e.data.indexOf("To view this discussion on the web visit") != -1).
      forEach(e => {
        e.nextSibling.remove();
        e.nextSibling.remove();
        e.remove();
      });
  };
}


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_print_cleanup_enabled id=gmail_print_cleanup_enabled _site=gmail _section_id="print_cleanup" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_print_cleanup_enabled> Print view cleanup button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  let e = form.elements;
  s._enabled = e.gmail_print_cleanup_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  let e = form.elements;
  e.gmail_print_cleanup_enabled.checked = s._enabled;

}

};  // end of nested class print_cleanup


///////////////////////////////////////////////////////////
// Functions for color_msglist : Color message list by recency
// Split: big
// Params: 

static color_msglist = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.color_msglist._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  if (!this.IsEnabled(settings)) return "/* Disabled: Color message list by recency */\n\n";
  let {} = s;
  return `
/* Color message list by recency */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["color_by_recency.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let isFocused = true;
let savedElement;

function doUpdate() {
    if (!isFocused) return;
    let now = new Date();
    [...document.querySelectorAll(`table[aria-readonly="true"] tr[role="row"] td[role="gridcell"] :is(span[aria-label^="Sun, "],span[aria-label^="Mon, "],span[aria-label^="Tue, "],span[aria-label^="Wed, "],span[aria-label^="Thu, "],span[aria-label^="Fri, "],span[aria-label^="Sat, "])`)].forEach(e => {
        savedElement = e;
        let d = (now - new Date(e.title))/24/3600/1000;
        let a = 0.3/(d/7+1);
        e.closest(`tr`).style.background = `hsla(${300 - d * 90 / 7}, 100% , ${Math.max(0, 50 - d/21*50)}%, ${a})`;
    });
}
function periodicUpdate() {
    if (!isFocused || (savedElement?.isConnected && savedElement?.offsetHeight)) return;
    doUpdate();
}

setInterval(periodicUpdate, 2000);

document.addEventListener("click", ()=>setTimeout(doUpdate, 150));
window.addEventListener("focus", ()=>{isFocused=true; doUpdate();});
window.addEventListener("blur", ()=>isFocused=false);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_color_msglist_enabled id=gmail_color_msglist_enabled _site=gmail _section_id="color_msglist" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_color_msglist_enabled> Color message list by recency</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  let e = form.elements;
  s._enabled = e.gmail_color_msglist_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  let e = form.elements;
  e.gmail_color_msglist_enabled.checked = s._enabled;

}

};  // end of nested class color_msglist


///////////////////////////////////////////////////////////
// Functions for full_dates : Display full date and time
// Split: big
// Params: 

static full_dates = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.full_dates._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  if (!this.IsEnabled(settings)) return "/* Disabled: Display full date and time */\n\n";
  let {} = s;
  return `
/* Display full date and time */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["full_dates.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let isFocused = true;
let savedElement;

function doUpdate() {
    if (!isFocused) return;
    [...document.querySelectorAll(`table[aria-readonly="true"] tr[role="row"] td[role="gridcell"] :is(span[aria-label^="Sun, "],span[aria-label^="Mon, "],span[aria-label^="Tue, "],span[aria-label^="Wed, "],span[aria-label^="Thu, "],span[aria-label^="Fri, "],span[aria-label^="Sat, "])`)].forEach(e => {
        savedElement = e;
        let ee = e.querySelector("span");
        if (ee && ee.innerHTML.match(/^\d/)) {
            ee.innerText = e.title;
        }
    });
}
    function periodicUpdate() {
    if (!isFocused || (savedElement?.isConnected && savedElement?.offsetHeight)) return;
    doUpdate();
}

setInterval(periodicUpdate, 2000);

document.addEventListener("click", ()=>setTimeout(doUpdate, 150));
window.addEventListener("focus", ()=>{isFocused=true; doUpdate();});
window.addEventListener("blur", ()=>isFocused=false);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_full_dates_enabled id=gmail_full_dates_enabled _site=gmail _section_id="full_dates" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_full_dates_enabled> Display full date and time</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  let e = form.elements;
  s._enabled = e.gmail_full_dates_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  let e = form.elements;
  e.gmail_full_dates_enabled.checked = s._enabled;

}

};  // end of nested class full_dates


///////////////////////////////////////////////////////////
// Interface functions

static id = "gmail";
static fields = ["dark_mode", "no_animations", "list_of_emails", "horizontal_cell_paddings_in_grid_cells", "spacing_between_emails_in_thread_view", "labels_in_emails_list", "smaller_font_for_labels_in_emails_list", "limit_the_width_of_labels_in_emails_list", "extra_width_for_special_labels_in_emails_list", "shrink_general_labels_in_emails_list__like_inbox", "sections_splitter", "multiple_inbox_sections", "fix_too_large_hitboxes_for_email_selection_marks", "highlight_focused_hovered_line", "labels_tree", "nav_labels", "nav_labels_collapsed", "compose_button", "hide_huge_blue__search_refinement__buttons", "area_right_to_the_compose_button_and_above_the_list_of_emails", "subject_bar_when_reading_email", "email_reply_text_area__add_border", "reply_form_uses_full_width", "in_page_compose_window_header", "absolutely_empty_space_above_chat", "padding_on_the_right_of_the_chat", "compact_chat_contact_list", "clearer_chat_contact_list_sections_separator", "top_bar", "buttons_look_active_and_clickable__exclude_label_tags_", "reduce_side_panel_when_it_s_collapsed", "print_cleanup", "color_msglist", "full_dates"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module gmail disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.list_of_emails.GenStyle(settings) +
  this.horizontal_cell_paddings_in_grid_cells.GenStyle(settings) +
  this.spacing_between_emails_in_thread_view.GenStyle(settings) +
  this.labels_in_emails_list.GenStyle(settings) +
  this.smaller_font_for_labels_in_emails_list.GenStyle(settings) +
  this.limit_the_width_of_labels_in_emails_list.GenStyle(settings) +
  this.extra_width_for_special_labels_in_emails_list.GenStyle(settings) +
  this.shrink_general_labels_in_emails_list__like_inbox.GenStyle(settings) +
  this.sections_splitter.GenStyle(settings) +
  this.multiple_inbox_sections.GenStyle(settings) +
  this.fix_too_large_hitboxes_for_email_selection_marks.GenStyle(settings) +
  this.highlight_focused_hovered_line.GenStyle(settings) +
  this.labels_tree.GenStyle(settings) +
  this.nav_labels.GenStyle(settings) +
  this.nav_labels_collapsed.GenStyle(settings) +
  this.compose_button.GenStyle(settings) +
  this.hide_huge_blue__search_refinement__buttons.GenStyle(settings) +
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenStyle(settings) +
  this.subject_bar_when_reading_email.GenStyle(settings) +
  this.email_reply_text_area__add_border.GenStyle(settings) +
  this.reply_form_uses_full_width.GenStyle(settings) +
  this.in_page_compose_window_header.GenStyle(settings) +
  this.absolutely_empty_space_above_chat.GenStyle(settings) +
  this.padding_on_the_right_of_the_chat.GenStyle(settings) +
  this.compact_chat_contact_list.GenStyle(settings) +
  this.clearer_chat_contact_list_sections_separator.GenStyle(settings) +
  this.top_bar.GenStyle(settings) +
  this.buttons_look_active_and_clickable__exclude_label_tags_.GenStyle(settings) +
  this.reduce_side_panel_when_it_s_collapsed.GenStyle(settings) +
  this.print_cleanup.GenStyle(settings) +
  this.color_msglist.GenStyle(settings) +
  this.full_dates.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.list_of_emails.GenScriptUrls(settings),
    ...this.horizontal_cell_paddings_in_grid_cells.GenScriptUrls(settings),
    ...this.spacing_between_emails_in_thread_view.GenScriptUrls(settings),
    ...this.labels_in_emails_list.GenScriptUrls(settings),
    ...this.smaller_font_for_labels_in_emails_list.GenScriptUrls(settings),
    ...this.limit_the_width_of_labels_in_emails_list.GenScriptUrls(settings),
    ...this.extra_width_for_special_labels_in_emails_list.GenScriptUrls(settings),
    ...this.shrink_general_labels_in_emails_list__like_inbox.GenScriptUrls(settings),
    ...this.sections_splitter.GenScriptUrls(settings),
    ...this.multiple_inbox_sections.GenScriptUrls(settings),
    ...this.fix_too_large_hitboxes_for_email_selection_marks.GenScriptUrls(settings),
    ...this.highlight_focused_hovered_line.GenScriptUrls(settings),
    ...this.labels_tree.GenScriptUrls(settings),
    ...this.nav_labels.GenScriptUrls(settings),
    ...this.nav_labels_collapsed.GenScriptUrls(settings),
    ...this.compose_button.GenScriptUrls(settings),
    ...this.hide_huge_blue__search_refinement__buttons.GenScriptUrls(settings),
    ...this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenScriptUrls(settings),
    ...this.subject_bar_when_reading_email.GenScriptUrls(settings),
    ...this.email_reply_text_area__add_border.GenScriptUrls(settings),
    ...this.reply_form_uses_full_width.GenScriptUrls(settings),
    ...this.in_page_compose_window_header.GenScriptUrls(settings),
    ...this.absolutely_empty_space_above_chat.GenScriptUrls(settings),
    ...this.padding_on_the_right_of_the_chat.GenScriptUrls(settings),
    ...this.compact_chat_contact_list.GenScriptUrls(settings),
    ...this.clearer_chat_contact_list_sections_separator.GenScriptUrls(settings),
    ...this.top_bar.GenScriptUrls(settings),
    ...this.buttons_look_active_and_clickable__exclude_label_tags_.GenScriptUrls(settings),
    ...this.reduce_side_panel_when_it_s_collapsed.GenScriptUrls(settings),
    ...this.print_cleanup.GenScriptUrls(settings),
    ...this.color_msglist.GenScriptUrls(settings),
    ...this.full_dates.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.list_of_emails.GetScript(settings),
    this.horizontal_cell_paddings_in_grid_cells.GetScript(settings),
    this.spacing_between_emails_in_thread_view.GetScript(settings),
    this.labels_in_emails_list.GetScript(settings),
    this.smaller_font_for_labels_in_emails_list.GetScript(settings),
    this.limit_the_width_of_labels_in_emails_list.GetScript(settings),
    this.extra_width_for_special_labels_in_emails_list.GetScript(settings),
    this.shrink_general_labels_in_emails_list__like_inbox.GetScript(settings),
    this.sections_splitter.GetScript(settings),
    this.multiple_inbox_sections.GetScript(settings),
    this.fix_too_large_hitboxes_for_email_selection_marks.GetScript(settings),
    this.highlight_focused_hovered_line.GetScript(settings),
    this.labels_tree.GetScript(settings),
    this.nav_labels.GetScript(settings),
    this.nav_labels_collapsed.GetScript(settings),
    this.compose_button.GetScript(settings),
    this.hide_huge_blue__search_refinement__buttons.GetScript(settings),
    this.area_right_to_the_compose_button_and_above_the_list_of_emails.GetScript(settings),
    this.subject_bar_when_reading_email.GetScript(settings),
    this.email_reply_text_area__add_border.GetScript(settings),
    this.reply_form_uses_full_width.GetScript(settings),
    this.in_page_compose_window_header.GetScript(settings),
    this.absolutely_empty_space_above_chat.GetScript(settings),
    this.padding_on_the_right_of_the_chat.GetScript(settings),
    this.compact_chat_contact_list.GetScript(settings),
    this.clearer_chat_contact_list_sections_separator.GetScript(settings),
    this.top_bar.GetScript(settings),
    this.buttons_look_active_and_clickable__exclude_label_tags_.GetScript(settings),
    this.reduce_side_panel_when_it_s_collapsed.GetScript(settings),
    this.print_cleanup.GetScript(settings),
    this.color_msglist.GetScript(settings),
    this.full_dates.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.list_of_emails.SetDefaults(settings);
  this.horizontal_cell_paddings_in_grid_cells.SetDefaults(settings);
  this.spacing_between_emails_in_thread_view.SetDefaults(settings);
  this.labels_in_emails_list.SetDefaults(settings);
  this.smaller_font_for_labels_in_emails_list.SetDefaults(settings);
  this.limit_the_width_of_labels_in_emails_list.SetDefaults(settings);
  this.extra_width_for_special_labels_in_emails_list.SetDefaults(settings);
  this.shrink_general_labels_in_emails_list__like_inbox.SetDefaults(settings);
  this.sections_splitter.SetDefaults(settings);
  this.multiple_inbox_sections.SetDefaults(settings);
  this.fix_too_large_hitboxes_for_email_selection_marks.SetDefaults(settings);
  this.highlight_focused_hovered_line.SetDefaults(settings);
  this.labels_tree.SetDefaults(settings);
  this.nav_labels.SetDefaults(settings);
  this.nav_labels_collapsed.SetDefaults(settings);
  this.compose_button.SetDefaults(settings);
  this.hide_huge_blue__search_refinement__buttons.SetDefaults(settings);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.SetDefaults(settings);
  this.subject_bar_when_reading_email.SetDefaults(settings);
  this.email_reply_text_area__add_border.SetDefaults(settings);
  this.reply_form_uses_full_width.SetDefaults(settings);
  this.in_page_compose_window_header.SetDefaults(settings);
  this.absolutely_empty_space_above_chat.SetDefaults(settings);
  this.padding_on_the_right_of_the_chat.SetDefaults(settings);
  this.compact_chat_contact_list.SetDefaults(settings);
  this.clearer_chat_contact_list_sections_separator.SetDefaults(settings);
  this.top_bar.SetDefaults(settings);
  this.buttons_look_active_and_clickable__exclude_label_tags_.SetDefaults(settings);
  this.reduce_side_panel_when_it_s_collapsed.SetDefaults(settings);
  this.print_cleanup.SetDefaults(settings);
  this.color_msglist.SetDefaults(settings);
  this.full_dates.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.list_of_emails.GenSettingsUi(settings) +
  this.horizontal_cell_paddings_in_grid_cells.GenSettingsUi(settings) +
  this.spacing_between_emails_in_thread_view.GenSettingsUi(settings) +
  this.labels_in_emails_list.GenSettingsUi(settings) +
  this.smaller_font_for_labels_in_emails_list.GenSettingsUi(settings) +
  this.limit_the_width_of_labels_in_emails_list.GenSettingsUi(settings) +
  this.extra_width_for_special_labels_in_emails_list.GenSettingsUi(settings) +
  this.shrink_general_labels_in_emails_list__like_inbox.GenSettingsUi(settings) +
  this.sections_splitter.GenSettingsUi(settings) +
  this.multiple_inbox_sections.GenSettingsUi(settings) +
  this.fix_too_large_hitboxes_for_email_selection_marks.GenSettingsUi(settings) +
  this.highlight_focused_hovered_line.GenSettingsUi(settings) +
  this.labels_tree.GenSettingsUi(settings) +
  this.nav_labels.GenSettingsUi(settings) +
  this.nav_labels_collapsed.GenSettingsUi(settings) +
  this.compose_button.GenSettingsUi(settings) +
  this.hide_huge_blue__search_refinement__buttons.GenSettingsUi(settings) +
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenSettingsUi(settings) +
  this.subject_bar_when_reading_email.GenSettingsUi(settings) +
  this.email_reply_text_area__add_border.GenSettingsUi(settings) +
  this.reply_form_uses_full_width.GenSettingsUi(settings) +
  this.in_page_compose_window_header.GenSettingsUi(settings) +
  this.absolutely_empty_space_above_chat.GenSettingsUi(settings) +
  this.padding_on_the_right_of_the_chat.GenSettingsUi(settings) +
  this.compact_chat_contact_list.GenSettingsUi(settings) +
  this.clearer_chat_contact_list_sections_separator.GenSettingsUi(settings) +
  this.top_bar.GenSettingsUi(settings) +
  this.buttons_look_active_and_clickable__exclude_label_tags_.GenSettingsUi(settings) +
  this.reduce_side_panel_when_it_s_collapsed.GenSettingsUi(settings) +
  this.print_cleanup.GenSettingsUi(settings) +
  this.color_msglist.GenSettingsUi(settings) +
  this.full_dates.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.list_of_emails.ImportSettingsFromForm(form, settings);
  this.horizontal_cell_paddings_in_grid_cells.ImportSettingsFromForm(form, settings);
  this.spacing_between_emails_in_thread_view.ImportSettingsFromForm(form, settings);
  this.labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.smaller_font_for_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.limit_the_width_of_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.extra_width_for_special_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.shrink_general_labels_in_emails_list__like_inbox.ImportSettingsFromForm(form, settings);
  this.sections_splitter.ImportSettingsFromForm(form, settings);
  this.multiple_inbox_sections.ImportSettingsFromForm(form, settings);
  this.fix_too_large_hitboxes_for_email_selection_marks.ImportSettingsFromForm(form, settings);
  this.highlight_focused_hovered_line.ImportSettingsFromForm(form, settings);
  this.labels_tree.ImportSettingsFromForm(form, settings);
  this.nav_labels.ImportSettingsFromForm(form, settings);
  this.nav_labels_collapsed.ImportSettingsFromForm(form, settings);
  this.compose_button.ImportSettingsFromForm(form, settings);
  this.hide_huge_blue__search_refinement__buttons.ImportSettingsFromForm(form, settings);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.ImportSettingsFromForm(form, settings);
  this.subject_bar_when_reading_email.ImportSettingsFromForm(form, settings);
  this.email_reply_text_area__add_border.ImportSettingsFromForm(form, settings);
  this.reply_form_uses_full_width.ImportSettingsFromForm(form, settings);
  this.in_page_compose_window_header.ImportSettingsFromForm(form, settings);
  this.absolutely_empty_space_above_chat.ImportSettingsFromForm(form, settings);
  this.padding_on_the_right_of_the_chat.ImportSettingsFromForm(form, settings);
  this.compact_chat_contact_list.ImportSettingsFromForm(form, settings);
  this.clearer_chat_contact_list_sections_separator.ImportSettingsFromForm(form, settings);
  this.top_bar.ImportSettingsFromForm(form, settings);
  this.buttons_look_active_and_clickable__exclude_label_tags_.ImportSettingsFromForm(form, settings);
  this.reduce_side_panel_when_it_s_collapsed.ImportSettingsFromForm(form, settings);
  this.print_cleanup.ImportSettingsFromForm(form, settings);
  this.color_msglist.ImportSettingsFromForm(form, settings);
  this.full_dates.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.list_of_emails.ApplySettingsToForm(settings, form);
  this.horizontal_cell_paddings_in_grid_cells.ApplySettingsToForm(settings, form);
  this.spacing_between_emails_in_thread_view.ApplySettingsToForm(settings, form);
  this.labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.smaller_font_for_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.limit_the_width_of_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.extra_width_for_special_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.shrink_general_labels_in_emails_list__like_inbox.ApplySettingsToForm(settings, form);
  this.sections_splitter.ApplySettingsToForm(settings, form);
  this.multiple_inbox_sections.ApplySettingsToForm(settings, form);
  this.fix_too_large_hitboxes_for_email_selection_marks.ApplySettingsToForm(settings, form);
  this.highlight_focused_hovered_line.ApplySettingsToForm(settings, form);
  this.labels_tree.ApplySettingsToForm(settings, form);
  this.nav_labels.ApplySettingsToForm(settings, form);
  this.nav_labels_collapsed.ApplySettingsToForm(settings, form);
  this.compose_button.ApplySettingsToForm(settings, form);
  this.hide_huge_blue__search_refinement__buttons.ApplySettingsToForm(settings, form);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.ApplySettingsToForm(settings, form);
  this.subject_bar_when_reading_email.ApplySettingsToForm(settings, form);
  this.email_reply_text_area__add_border.ApplySettingsToForm(settings, form);
  this.reply_form_uses_full_width.ApplySettingsToForm(settings, form);
  this.in_page_compose_window_header.ApplySettingsToForm(settings, form);
  this.absolutely_empty_space_above_chat.ApplySettingsToForm(settings, form);
  this.padding_on_the_right_of_the_chat.ApplySettingsToForm(settings, form);
  this.compact_chat_contact_list.ApplySettingsToForm(settings, form);
  this.clearer_chat_contact_list_sections_separator.ApplySettingsToForm(settings, form);
  this.top_bar.ApplySettingsToForm(settings, form);
  this.buttons_look_active_and_clickable__exclude_label_tags_.ApplySettingsToForm(settings, form);
  this.reduce_side_panel_when_it_s_collapsed.ApplySettingsToForm(settings, form);
  this.print_cleanup.ApplySettingsToForm(settings, form);
  this.color_msglist.ApplySettingsToForm(settings, form);
  this.full_dates.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = `For embedded <b>chat</b> use "chat" tab.
For "who/" <b>hover cards</b> use "contacts" tab.`;

static urls = ["*://mail.google.com/mail/*"];

} // end of global class gmail
