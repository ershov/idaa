//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class gmail {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
    -webkit-filter: invert(100%) hue-rotate(180deg) !important;
    background-color: white;
}
img:not([src^="images/"]):not([src^="//ssl.gstatic.com/ui/"]):not([src^="https://docs.google.com/"]), video, [style*="background-image:"], iframe {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
input[autocomplete=off] {
    color: #888 !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_dark_mode_enabled id=gmail_dark_mode_enabled _site=gmail _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.gmail_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.gmail_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: no
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `
  <li>
  <input type=checkbox name=gmail_no_animations_enabled id=gmail_no_animations_enabled _site=gmail _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.gmail_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.gmail_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for highlight_focused_hovered_line : Highlight focused/hovered line
// Split: big
// Params: 

static highlight_focused_hovered_line = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.highlight_focused_hovered_line._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  if (!this.IsEnabled(settings)) return "/* Disabled: Highlight focused/hovered line */\n\n";
  let {} = s;
  return `
/* Highlight focused/hovered line */
.zA:hover, .zA:focus {
    box-shadow: inset 0 0 10px 0px #808080;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_highlight_focused_hovered_line_enabled id=gmail_highlight_focused_hovered_line_enabled _site=gmail _section_id="highlight_focused_hovered_line" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_highlight_focused_hovered_line_enabled> Highlight focused/hovered line</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('highlight_focused_hovered_line')) settings.highlight_focused_hovered_line = {};
  let s = settings.highlight_focused_hovered_line;
  let e = form.elements;
  s._enabled = e.gmail_highlight_focused_hovered_line_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.highlight_focused_hovered_line;
  let e = form.elements;
  e.gmail_highlight_focused_hovered_line_enabled.checked = s._enabled;

}

};  // end of nested class highlight_focused_hovered_line


///////////////////////////////////////////////////////////
// Functions for nav_labels : Labels nav width 240 -> 200
// Split: minor
// Params: [width 1 200 Max Width]

static nav_labels = class {

static params = ["width"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  s._enabled = true;
  s.width = 200;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('width')) s.width = 200;
}

static IsEnabled(settings) {
  return settings.nav_labels._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels nav width 240 -> 200 */\n\n";
  let {width} = s;
  return `
/* Labels nav width 240 -> 200 */
div.aeN:not(.bhZ) .wT {
    max-width: ${width}px !important;    /* @1 @width */
    min-width: ${width}px !important;    /* @1=width */
}
/*-Labels nav scroll bar: 16px -> 10px */
/*-NOTE: has to add "div." in order to raise the priority */
div.aeN:not(.bhZ) {
    max-width: ${settings.nav_labels.width+10}px !important;    /* @1=settings.nav_labels.width+10 */
    min-width: ${settings.nav_labels.width+10}px !important;    /* @1=settings.nav_labels.width+10 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_nav_labels_enabled id=gmail_nav_labels_enabled _site=gmail _section_id="nav_labels" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_nav_labels_enabled> Labels nav width 240 -> 200</label>
  <ul>
    <li><input
      name=gmail_nav_labels_width_range
      type=range
      min=0
      max=1000
      value=${s.width}
      _site=gmail
      _section_id="nav_labels"
      _setting_id="width"
      _default="200"
      ><input
      name=gmail_nav_labels_width_val
      size=3
      value=${s.width}
      _site=gmail
      _section_id="nav_labels"
      _setting_id="width"
      _default="200"
      > Max Width
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('nav_labels')) settings.nav_labels = {};
  let s = settings.nav_labels;
  let e = form.elements;
  s._enabled = e.gmail_nav_labels_enabled.checked;
  if (isNaN(s.width = parseInt(e.gmail_nav_labels_width_val.value))) s.width = 200;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.nav_labels;
  let e = form.elements;
  e.gmail_nav_labels_enabled.checked = s._enabled;
  e.gmail_nav_labels_width_range.value = e.gmail_nav_labels_width_val.value = s.width;
}

};  // end of nested class nav_labels


///////////////////////////////////////////////////////////
// Functions for nav_labels_collapsed : Collapsed nav expands wider
// Split: no
// Params: [width 1 300 Max Width]

static nav_labels_collapsed = class {

static params = ["width"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  s._enabled = true;
  s.width = 300;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('width')) s.width = 300;
}

static IsEnabled(settings) {
  return settings.nav_labels_collapsed._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  if (!this.IsEnabled(settings)) return "/* Disabled: Collapsed nav expands wider */\n\n";
  let {width} = s;
  return `
/* Collapsed nav expands wider */
div.bhZ.bym div.wT {
    max-width: ${width}px !important;    /* @1 @width */
    min-width: ${width}px !important;    /* @1=width */
}
/*-Labels nav scroll bar: 16px */
/*-NOTE: has to add "div." in order to raise the priority */
div.aeN.bhZ.bym {
    max-width: ${settings.nav_labels_collapsed.width+16}px !important;    /* @1=settings.nav_labels_collapsed.width+16 */
    min-width: ${settings.nav_labels_collapsed.width+16}px !important;    /* @1=settings.nav_labels_collapsed.width+16 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  return `
  <li>
  <input type=checkbox name=gmail_nav_labels_collapsed_enabled id=gmail_nav_labels_collapsed_enabled _site=gmail _section_id="nav_labels_collapsed" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_nav_labels_collapsed_enabled> Collapsed nav expands wider</label>
  <ul>
    <li><input
      name=gmail_nav_labels_collapsed_width_range
      type=range
      min=0
      max=1000
      value=${s.width}
      _site=gmail
      _section_id="nav_labels_collapsed"
      _setting_id="width"
      _default="300"
      ><input
      name=gmail_nav_labels_collapsed_width_val
      size=3
      value=${s.width}
      _site=gmail
      _section_id="nav_labels_collapsed"
      _setting_id="width"
      _default="300"
      > Max Width
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('nav_labels_collapsed')) settings.nav_labels_collapsed = {};
  let s = settings.nav_labels_collapsed;
  let e = form.elements;
  s._enabled = e.gmail_nav_labels_collapsed_enabled.checked;
  if (isNaN(s.width = parseInt(e.gmail_nav_labels_collapsed_width_val.value))) s.width = 300;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.nav_labels_collapsed;
  let e = form.elements;
  e.gmail_nav_labels_collapsed_enabled.checked = s._enabled;
  e.gmail_nav_labels_collapsed_width_range.value = e.gmail_nav_labels_collapsed_width_val.value = s.width;
}

};  // end of nested class nav_labels_collapsed


///////////////////////////////////////////////////////////
// Functions for compose_button : Compose button
// Split: minor
// Params: 

static compose_button = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compose_button._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compose button */\n\n";
  let {} = s;
  return `
/* Compose button */
.z0>.L3 {
    height: 30px !important;
}
.z0 {
    height: 30px !important;
    margin: 4px 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_compose_button_enabled id=gmail_compose_button_enabled _site=gmail _section_id="compose_button" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_compose_button_enabled> Compose button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  let e = form.elements;
  s._enabled = e.gmail_compose_button_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  let e = form.elements;
  e.gmail_compose_button_enabled.checked = s._enabled;

}

};  // end of nested class compose_button


///////////////////////////////////////////////////////////
// Functions for hide_huge_blue__search_refinement__buttons : Hide huge blue 'search refinement' buttons
// Split: minor
// Params: 

static hide_huge_blue__search_refinement__buttons = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.hide_huge_blue__search_refinement__buttons._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  if (!this.IsEnabled(settings)) return "/* Disabled: Hide huge blue 'search refinement' buttons */\n\n";
  let {} = s;
  return `
/* Hide huge blue 'search refinement' buttons */
div[role='toolbar'][aria-label='search refinement'] {
  display:none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_hide_huge_blue__search_refinement__buttons_enabled id=gmail_hide_huge_blue__search_refinement__buttons_enabled _site=gmail _section_id="hide_huge_blue__search_refinement__buttons" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_hide_huge_blue__search_refinement__buttons_enabled> Hide huge blue 'search refinement' buttons</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('hide_huge_blue__search_refinement__buttons')) settings.hide_huge_blue__search_refinement__buttons = {};
  let s = settings.hide_huge_blue__search_refinement__buttons;
  let e = form.elements;
  s._enabled = e.gmail_hide_huge_blue__search_refinement__buttons_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.hide_huge_blue__search_refinement__buttons;
  let e = form.elements;
  e.gmail_hide_huge_blue__search_refinement__buttons_enabled.checked = s._enabled;

}

};  // end of nested class hide_huge_blue__search_refinement__buttons


///////////////////////////////////////////////////////////
// Functions for email_reply_text_area__add_border : Email reply text area: add border
// Split: minor
// Params: 

static email_reply_text_area__add_border = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.email_reply_text_area__add_border._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  if (!this.IsEnabled(settings)) return "/* Disabled: Email reply text area: add border */\n\n";
  let {} = s;
  return `
/* Email reply text area: add border */
.qz {
    border-top: 1px solid #e0e0e0 !important;
    border-bottom: 1px solid #e0e0e0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_email_reply_text_area__add_border_enabled id=gmail_email_reply_text_area__add_border_enabled _site=gmail _section_id="email_reply_text_area__add_border" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_email_reply_text_area__add_border_enabled> Email reply text area: add border</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('email_reply_text_area__add_border')) settings.email_reply_text_area__add_border = {};
  let s = settings.email_reply_text_area__add_border;
  let e = form.elements;
  s._enabled = e.gmail_email_reply_text_area__add_border_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.email_reply_text_area__add_border;
  let e = form.elements;
  e.gmail_email_reply_text_area__add_border_enabled.checked = s._enabled;

}

};  // end of nested class email_reply_text_area__add_border


///////////////////////////////////////////////////////////
// Functions for reply_form_uses_full_width : Reply form uses full width
// Split: no
// Params: [padding 1 6 Padding]

static reply_form_uses_full_width = class {

static params = ["padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  s._enabled = true;
  s.padding = 6;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding')) s.padding = 6;
}

static IsEnabled(settings) {
  return settings.reply_form_uses_full_width._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reply form uses full width */\n\n";
  let {padding} = s;
  return `
/* Reply form uses full width */
.adB .aoI {
    padding: 0 !important;
}
.HM .et {
    padding-left: ${padding}px !important;   /* @1 @padding Padding */
    padding-right: ${padding}px !important;  /* @1=padding */
}
.Ur {
    margin-left: ${padding}px !important;    /* @1=padding */
}
table.IG {
    padding: 0px ${padding}px !important;    /* @2=padding */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  return `
  <li>
  <input type=checkbox name=gmail_reply_form_uses_full_width_enabled id=gmail_reply_form_uses_full_width_enabled _site=gmail _section_id="reply_form_uses_full_width" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_reply_form_uses_full_width_enabled> Reply form uses full width</label>
  <ul>
    <li><input
      name=gmail_reply_form_uses_full_width_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail
      _section_id="reply_form_uses_full_width"
      _setting_id="padding"
      _default="6"
      ><input
      name=gmail_reply_form_uses_full_width_padding_val
      size=3
      value=${s.padding}
      _site=gmail
      _section_id="reply_form_uses_full_width"
      _setting_id="padding"
      _default="6"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reply_form_uses_full_width')) settings.reply_form_uses_full_width = {};
  let s = settings.reply_form_uses_full_width;
  let e = form.elements;
  s._enabled = e.gmail_reply_form_uses_full_width_enabled.checked;
  if (isNaN(s.padding = parseInt(e.gmail_reply_form_uses_full_width_padding_val.value))) s.padding = 6;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reply_form_uses_full_width;
  let e = form.elements;
  e.gmail_reply_form_uses_full_width_enabled.checked = s._enabled;
  e.gmail_reply_form_uses_full_width_padding_range.value = e.gmail_reply_form_uses_full_width_padding_val.value = s.padding;
}

};  // end of nested class reply_form_uses_full_width


///////////////////////////////////////////////////////////
// Functions for clearer_chat_contact_list_sections_separator : Clearer chat contact list sections separator
// Split: minor
// Params: 

static clearer_chat_contact_list_sections_separator = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.clearer_chat_contact_list_sections_separator._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  if (!this.IsEnabled(settings)) return "/* Disabled: Clearer chat contact list sections separator */\n\n";
  let {} = s;
  return `
/* Clearer chat contact list sections separator */
.WR .Xa .X9 {
  background: linear-gradient(180deg, #E0E0E0 0, #FFF 1rem) !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_clearer_chat_contact_list_sections_separator_enabled id=gmail_clearer_chat_contact_list_sections_separator_enabled _site=gmail _section_id="clearer_chat_contact_list_sections_separator" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_clearer_chat_contact_list_sections_separator_enabled> Clearer chat contact list sections separator</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('clearer_chat_contact_list_sections_separator')) settings.clearer_chat_contact_list_sections_separator = {};
  let s = settings.clearer_chat_contact_list_sections_separator;
  let e = form.elements;
  s._enabled = e.gmail_clearer_chat_contact_list_sections_separator_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.clearer_chat_contact_list_sections_separator;
  let e = form.elements;
  e.gmail_clearer_chat_contact_list_sections_separator_enabled.checked = s._enabled;

}

};  // end of nested class clearer_chat_contact_list_sections_separator


///////////////////////////////////////////////////////////
// Functions for buttons_look_active_and_clickable__exclude_label_tags_ : Buttons look active and clickable. Exclude label tags.
// Split: minor
// Params: 

static buttons_look_active_and_clickable__exclude_label_tags_ = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.buttons_look_active_and_clickable__exclude_label_tags_._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  if (!this.IsEnabled(settings)) return "/* Disabled: Buttons look active and clickable. Exclude label tags. */\n\n";
  let {} = s;
  return `
/* Buttons look active and clickable. Exclude label tags. */
div[role=button]:not(.hN) {
    box-shadow: 0 0 1px 0px #808080 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled id=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled _site=gmail _section_id="buttons_look_active_and_clickable__exclude_label_tags_" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled> Buttons look active and clickable. Exclude label tags.</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('buttons_look_active_and_clickable__exclude_label_tags_')) settings.buttons_look_active_and_clickable__exclude_label_tags_ = {};
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  let e = form.elements;
  s._enabled = e.gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.buttons_look_active_and_clickable__exclude_label_tags_;
  let e = form.elements;
  e.gmail_buttons_look_active_and_clickable__exclude_label_tags__enabled.checked = s._enabled;

}

};  // end of nested class buttons_look_active_and_clickable__exclude_label_tags_


///////////////////////////////////////////////////////////
// Functions for reduce_side_panel_when_it_s_collapsed : Reduce side panel when it's collapsed
// Split: minor
// Params: 

static reduce_side_panel_when_it_s_collapsed = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.reduce_side_panel_when_it_s_collapsed._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce side panel when it's collapsed */\n\n";
  let {} = s;
  return `
/* Reduce side panel when it's collapsed */
.bAw.it {
    min-width: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_reduce_side_panel_when_it_s_collapsed_enabled id=gmail_reduce_side_panel_when_it_s_collapsed_enabled _site=gmail _section_id="reduce_side_panel_when_it_s_collapsed" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_reduce_side_panel_when_it_s_collapsed_enabled> Reduce side panel when it's collapsed</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('reduce_side_panel_when_it_s_collapsed')) settings.reduce_side_panel_when_it_s_collapsed = {};
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  let e = form.elements;
  s._enabled = e.gmail_reduce_side_panel_when_it_s_collapsed_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.reduce_side_panel_when_it_s_collapsed;
  let e = form.elements;
  e.gmail_reduce_side_panel_when_it_s_collapsed_enabled.checked = s._enabled;

}

};  // end of nested class reduce_side_panel_when_it_s_collapsed


///////////////////////////////////////////////////////////
// Functions for print_cleanup : Print view cleanup button
// Split: big
// Params: 

static print_cleanup = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.print_cleanup._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  if (!this.IsEnabled(settings)) return "/* Disabled: Print view cleanup button */\n\n";
  let {} = s;
  return `
/* Print view cleanup button */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["print_cleanup.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
if (location.href.match(/[&?]view=pt/)) {
  document.querySelector("table td:last-child").insertAdjacentHTML("beforeBegin", `<td><button id=tidyup>Clean Up</button></td>`);
  tidyup.onclick = ()=> {
    [...document.querySelectorAll(`
body > div.bodycontainer > table,
font[color="#888888"],
font[color="#550055"],
div[data-smartmail="gmail_signature"],
.gmail_quote > .gmail_quote,
.recipient
`)].forEach(e => e.remove());

    // Remove all after hidden quote
    document.querySelectorAll(`div[style="padding:5 0"]`).forEach(e => {
      while (e.nextSibling) e.nextSibling.remove();
      e.remove();
    });

    // Remove everything after "--"
    [...(function*(){
      let next, it = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT);
      while (next = it.nextNode()) yield next;
    })()].
      filter(e => e.data === "-- ").
      forEach(e => {
        while (e.nextSibling) e.nextSibling.remove(); e.remove();
      });

    [...(function*(){
      let next, it = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT);
      while (next = it.nextNode()) yield next;
    })()].
      filter(e => e.data.indexOf("To view this discussion on the web visit") != -1).
      forEach(e => {
        e.nextSibling.remove();
        e.nextSibling.remove();
        e.remove();
      });
  };
}


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_print_cleanup_enabled id=gmail_print_cleanup_enabled _site=gmail _section_id="print_cleanup" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_print_cleanup_enabled> Print view cleanup button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('print_cleanup')) settings.print_cleanup = {};
  let s = settings.print_cleanup;
  let e = form.elements;
  s._enabled = e.gmail_print_cleanup_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.print_cleanup;
  let e = form.elements;
  e.gmail_print_cleanup_enabled.checked = s._enabled;

}

};  // end of nested class print_cleanup


///////////////////////////////////////////////////////////
// Functions for color_msglist : Color message list by recency
// Split: big
// Params: 

static color_msglist = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.color_msglist._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  if (!this.IsEnabled(settings)) return "/* Disabled: Color message list by recency */\n\n";
  let {} = s;
  return `
/* Color message list by recency */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["color_by_recency.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let isFocused = true;
let savedElement;

function doUpdate() {
    if (!isFocused) return;
    let now = new Date();
    [...document.querySelectorAll(`table[aria-readonly="true"] tr[role="row"] td[role="gridcell"] :is(span[aria-label^="Sun, "],span[aria-label^="Mon, "],span[aria-label^="Tue, "],span[aria-label^="Wed, "],span[aria-label^="Thu, "],span[aria-label^="Fri, "],span[aria-label^="Sat, "])`)].forEach(e => {
        savedElement = e;
        let d = (now - new Date(e.title))/24/3600/1000;
        let a = 0.3/(d/7+1);
        e.closest(`tr`).style.background = `hsla(${300 - d * 90 / 7}, 100% , ${Math.max(0, 50 - d/21*50)}%, ${a})`;
    });
}
function periodicUpdate() {
    if (!isFocused || (savedElement?.isConnected && savedElement?.offsetHeight)) return;
    doUpdate();
}

setInterval(periodicUpdate, 2000);

document.addEventListener("click", ()=>setTimeout(doUpdate, 150));
window.addEventListener("focus", ()=>{isFocused=true; doUpdate();});
window.addEventListener("blur", ()=>isFocused=false);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_color_msglist_enabled id=gmail_color_msglist_enabled _site=gmail _section_id="color_msglist" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_color_msglist_enabled> Color message list by recency</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('color_msglist')) settings.color_msglist = {};
  let s = settings.color_msglist;
  let e = form.elements;
  s._enabled = e.gmail_color_msglist_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.color_msglist;
  let e = form.elements;
  e.gmail_color_msglist_enabled.checked = s._enabled;

}

};  // end of nested class color_msglist


///////////////////////////////////////////////////////////
// Functions for full_dates : Display full date and time
// Split: big
// Params: 

static full_dates = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.full_dates._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  if (!this.IsEnabled(settings)) return "/* Disabled: Display full date and time */\n\n";
  let {} = s;
  return `
/* Display full date and time */

`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["full_dates.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
let isFocused = true;
let savedElement;

function doUpdate() {
    if (!isFocused) return;
    [...document.querySelectorAll(`table[aria-readonly="true"] tr[role="row"] td[role="gridcell"] :is(span[aria-label^="Sun, "],span[aria-label^="Mon, "],span[aria-label^="Tue, "],span[aria-label^="Wed, "],span[aria-label^="Thu, "],span[aria-label^="Fri, "],span[aria-label^="Sat, "])`)].forEach(e => {
        savedElement = e;
        let ee = e.querySelector("span");
        if (ee && ee.innerHTML.match(/^\d/)) {
            ee.innerText = e.title;
        }
    });
}
    function periodicUpdate() {
    if (!isFocused || (savedElement?.isConnected && savedElement?.offsetHeight)) return;
    doUpdate();
}

setInterval(periodicUpdate, 2000);

document.addEventListener("click", ()=>setTimeout(doUpdate, 150));
window.addEventListener("focus", ()=>{isFocused=true; doUpdate();});
window.addEventListener("blur", ()=>isFocused=false);

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=gmail_full_dates_enabled id=gmail_full_dates_enabled _site=gmail _section_id="full_dates" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_full_dates_enabled> Display full date and time</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('full_dates')) settings.full_dates = {};
  let s = settings.full_dates;
  let e = form.elements;
  s._enabled = e.gmail_full_dates_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.full_dates;
  let e = form.elements;
  e.gmail_full_dates_enabled.checked = s._enabled;

}

};  // end of nested class full_dates


///////////////////////////////////////////////////////////
// Interface functions

static id = "gmail";
static fields = ["dark_mode", "no_animations", "highlight_focused_hovered_line", "nav_labels", "nav_labels_collapsed", "compose_button", "hide_huge_blue__search_refinement__buttons", "email_reply_text_area__add_border", "reply_form_uses_full_width", "clearer_chat_contact_list_sections_separator", "buttons_look_active_and_clickable__exclude_label_tags_", "reduce_side_panel_when_it_s_collapsed", "print_cleanup", "color_msglist", "full_dates"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module gmail disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.highlight_focused_hovered_line.GenStyle(settings) +
  this.nav_labels.GenStyle(settings) +
  this.nav_labels_collapsed.GenStyle(settings) +
  this.compose_button.GenStyle(settings) +
  this.hide_huge_blue__search_refinement__buttons.GenStyle(settings) +
  this.email_reply_text_area__add_border.GenStyle(settings) +
  this.reply_form_uses_full_width.GenStyle(settings) +
  this.clearer_chat_contact_list_sections_separator.GenStyle(settings) +
  this.buttons_look_active_and_clickable__exclude_label_tags_.GenStyle(settings) +
  this.reduce_side_panel_when_it_s_collapsed.GenStyle(settings) +
  this.print_cleanup.GenStyle(settings) +
  this.color_msglist.GenStyle(settings) +
  this.full_dates.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.highlight_focused_hovered_line.GenScriptUrls(settings),
    ...this.nav_labels.GenScriptUrls(settings),
    ...this.nav_labels_collapsed.GenScriptUrls(settings),
    ...this.compose_button.GenScriptUrls(settings),
    ...this.hide_huge_blue__search_refinement__buttons.GenScriptUrls(settings),
    ...this.email_reply_text_area__add_border.GenScriptUrls(settings),
    ...this.reply_form_uses_full_width.GenScriptUrls(settings),
    ...this.clearer_chat_contact_list_sections_separator.GenScriptUrls(settings),
    ...this.buttons_look_active_and_clickable__exclude_label_tags_.GenScriptUrls(settings),
    ...this.reduce_side_panel_when_it_s_collapsed.GenScriptUrls(settings),
    ...this.print_cleanup.GenScriptUrls(settings),
    ...this.color_msglist.GenScriptUrls(settings),
    ...this.full_dates.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.highlight_focused_hovered_line.GetScript(settings),
    this.nav_labels.GetScript(settings),
    this.nav_labels_collapsed.GetScript(settings),
    this.compose_button.GetScript(settings),
    this.hide_huge_blue__search_refinement__buttons.GetScript(settings),
    this.email_reply_text_area__add_border.GetScript(settings),
    this.reply_form_uses_full_width.GetScript(settings),
    this.clearer_chat_contact_list_sections_separator.GetScript(settings),
    this.buttons_look_active_and_clickable__exclude_label_tags_.GetScript(settings),
    this.reduce_side_panel_when_it_s_collapsed.GetScript(settings),
    this.print_cleanup.GetScript(settings),
    this.color_msglist.GetScript(settings),
    this.full_dates.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.highlight_focused_hovered_line.SetDefaults(settings);
  this.nav_labels.SetDefaults(settings);
  this.nav_labels_collapsed.SetDefaults(settings);
  this.compose_button.SetDefaults(settings);
  this.hide_huge_blue__search_refinement__buttons.SetDefaults(settings);
  this.email_reply_text_area__add_border.SetDefaults(settings);
  this.reply_form_uses_full_width.SetDefaults(settings);
  this.clearer_chat_contact_list_sections_separator.SetDefaults(settings);
  this.buttons_look_active_and_clickable__exclude_label_tags_.SetDefaults(settings);
  this.reduce_side_panel_when_it_s_collapsed.SetDefaults(settings);
  this.print_cleanup.SetDefaults(settings);
  this.color_msglist.SetDefaults(settings);
  this.full_dates.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.highlight_focused_hovered_line.GenSettingsUi(settings) +
  this.nav_labels.GenSettingsUi(settings) +
  this.nav_labels_collapsed.GenSettingsUi(settings) +
  this.compose_button.GenSettingsUi(settings) +
  this.hide_huge_blue__search_refinement__buttons.GenSettingsUi(settings) +
  this.email_reply_text_area__add_border.GenSettingsUi(settings) +
  this.reply_form_uses_full_width.GenSettingsUi(settings) +
  this.clearer_chat_contact_list_sections_separator.GenSettingsUi(settings) +
  this.buttons_look_active_and_clickable__exclude_label_tags_.GenSettingsUi(settings) +
  this.reduce_side_panel_when_it_s_collapsed.GenSettingsUi(settings) +
  this.print_cleanup.GenSettingsUi(settings) +
  this.color_msglist.GenSettingsUi(settings) +
  this.full_dates.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.highlight_focused_hovered_line.ImportSettingsFromForm(form, settings);
  this.nav_labels.ImportSettingsFromForm(form, settings);
  this.nav_labels_collapsed.ImportSettingsFromForm(form, settings);
  this.compose_button.ImportSettingsFromForm(form, settings);
  this.hide_huge_blue__search_refinement__buttons.ImportSettingsFromForm(form, settings);
  this.email_reply_text_area__add_border.ImportSettingsFromForm(form, settings);
  this.reply_form_uses_full_width.ImportSettingsFromForm(form, settings);
  this.clearer_chat_contact_list_sections_separator.ImportSettingsFromForm(form, settings);
  this.buttons_look_active_and_clickable__exclude_label_tags_.ImportSettingsFromForm(form, settings);
  this.reduce_side_panel_when_it_s_collapsed.ImportSettingsFromForm(form, settings);
  this.print_cleanup.ImportSettingsFromForm(form, settings);
  this.color_msglist.ImportSettingsFromForm(form, settings);
  this.full_dates.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.highlight_focused_hovered_line.ApplySettingsToForm(settings, form);
  this.nav_labels.ApplySettingsToForm(settings, form);
  this.nav_labels_collapsed.ApplySettingsToForm(settings, form);
  this.compose_button.ApplySettingsToForm(settings, form);
  this.hide_huge_blue__search_refinement__buttons.ApplySettingsToForm(settings, form);
  this.email_reply_text_area__add_border.ApplySettingsToForm(settings, form);
  this.reply_form_uses_full_width.ApplySettingsToForm(settings, form);
  this.clearer_chat_contact_list_sections_separator.ApplySettingsToForm(settings, form);
  this.buttons_look_active_and_clickable__exclude_label_tags_.ApplySettingsToForm(settings, form);
  this.reduce_side_panel_when_it_s_collapsed.ApplySettingsToForm(settings, form);
  this.print_cleanup.ApplySettingsToForm(settings, form);
  this.color_msglist.ApplySettingsToForm(settings, form);
  this.full_dates.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = `For embedded <b>chat</b> use "chat" tab.
For "who/" <b>hover cards</b> use "contacts" tab.`;

static urls = ["*://mail.google.com/mail/*"];

} // end of global class gmail
