//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class gmail_condensed {
///////////////////////////////////////////////////////////
// Functions for list_of_emails : List of emails
// Split: big
// Params: [padding_top 1 0 Padding Top], [padding_bottom 1 0 Padding Bottom]

static list_of_emails = class {

static params = ["padding_top", "padding_bottom"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  s._enabled = true;
  s.padding_top = 0;
  s.padding_bottom = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 0;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
}

static IsEnabled(settings) {
  return settings.list_of_emails._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  if (!this.IsEnabled(settings)) return "/* Disabled: List of emails */\n\n";
  let {padding_top, padding_bottom} = s;
  return `
/* List of emails */
.zA {
    padding-top: ${padding_top}px !important;      /* @1 */
    padding-bottom: ${padding_bottom}px !important;   /* @1 */
    overflow: hidden;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_condensed_list_of_emails_enabled id=gmail_condensed_list_of_emails_enabled _site=gmail_condensed _section_id="list_of_emails" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_list_of_emails_enabled> List of emails</label>
  <ul>
    <li><input
      name=gmail_condensed_list_of_emails_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=gmail_condensed
      _section_id="list_of_emails"
      _setting_id="padding_top"
      _default="0"
      ><input
      name=gmail_condensed_list_of_emails_padding_top_val
      size=3
      value=${s.padding_top}
      _site=gmail_condensed
      _section_id="list_of_emails"
      _setting_id="padding_top"
      _default="0"
      > Padding Top
    <li><input
      name=gmail_condensed_list_of_emails_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=gmail_condensed
      _section_id="list_of_emails"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=gmail_condensed_list_of_emails_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=gmail_condensed
      _section_id="list_of_emails"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('list_of_emails')) settings.list_of_emails = {};
  let s = settings.list_of_emails;
  let e = form.elements;
  s._enabled = e.gmail_condensed_list_of_emails_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.gmail_condensed_list_of_emails_padding_top_val.value))) s.padding_top = 0;
  if (isNaN(s.padding_bottom = parseInt(e.gmail_condensed_list_of_emails_padding_bottom_val.value))) s.padding_bottom = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.list_of_emails;
  let e = form.elements;
  e.gmail_condensed_list_of_emails_enabled.checked = s._enabled;
  e.gmail_condensed_list_of_emails_padding_top_range.value = e.gmail_condensed_list_of_emails_padding_top_val.value = s.padding_top;
  e.gmail_condensed_list_of_emails_padding_bottom_range.value = e.gmail_condensed_list_of_emails_padding_bottom_val.value = s.padding_bottom;
}

};  // end of nested class list_of_emails


///////////////////////////////////////////////////////////
// Functions for horizontal_cell_paddings_in_grid_cells : Horizontal cell paddings in grid cells
// Split: no
// Params: 

static horizontal_cell_paddings_in_grid_cells = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.horizontal_cell_paddings_in_grid_cells._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  if (!this.IsEnabled(settings)) return "/* Disabled: Horizontal cell paddings in grid cells */\n\n";
  let {} = s;
  return `
/* Horizontal cell paddings in grid cells */
table[role=grid] td {
    padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_horizontal_cell_paddings_in_grid_cells_enabled id=gmail_condensed_horizontal_cell_paddings_in_grid_cells_enabled _site=gmail_condensed _section_id="horizontal_cell_paddings_in_grid_cells" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_horizontal_cell_paddings_in_grid_cells_enabled> Horizontal cell paddings in grid cells</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('horizontal_cell_paddings_in_grid_cells')) settings.horizontal_cell_paddings_in_grid_cells = {};
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  let e = form.elements;
  s._enabled = e.gmail_condensed_horizontal_cell_paddings_in_grid_cells_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.horizontal_cell_paddings_in_grid_cells;
  let e = form.elements;
  e.gmail_condensed_horizontal_cell_paddings_in_grid_cells_enabled.checked = s._enabled;

}

};  // end of nested class horizontal_cell_paddings_in_grid_cells


///////////////////////////////////////////////////////////
// Functions for spacing_between_emails_in_thread_view : Spacing between emails in thread view
// Split: minor
// Params: [pBot 3 10 Padding After], [h 1 44 Height], [pTop 1 5 Padding Before]

static spacing_between_emails_in_thread_view = class {

static params = ["pBot", "h", "pTop"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  s._enabled = true;
  s.pBot = 10;
  s.h = 44;
  s.pTop = 5;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('pBot')) s.pBot = 10;
  if (!s.hasOwnProperty('h')) s.h = 44;
  if (!s.hasOwnProperty('pTop')) s.pTop = 5;
}

static IsEnabled(settings) {
  return settings.spacing_between_emails_in_thread_view._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  if (!this.IsEnabled(settings)) return "/* Disabled: Spacing between emails in thread view */\n\n";
  let {pBot, h, pTop} = s;
  return `
/* Spacing between emails in thread view */
.hx .gs {
    padding: 0 0 ${pBot}px 0 !important;   /* @3 @pBot Padding After */
}
.aju {
    height: ${h}px !important;          /* @1 @h */
    padding: 0 6px 0 0 !important;    /* Padding after the user icon */
}
.gE {
    padding: ${pTop}px 0 0 0 !important;    /* @1 @pTop Padding Before */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_condensed_spacing_between_emails_in_thread_view_enabled id=gmail_condensed_spacing_between_emails_in_thread_view_enabled _site=gmail_condensed _section_id="spacing_between_emails_in_thread_view" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_spacing_between_emails_in_thread_view_enabled> Spacing between emails in thread view</label>
  <ul>
    <li><input
      name=gmail_condensed_spacing_between_emails_in_thread_view_pBot_range
      type=range
      min=0
      max=50
      value=${s.pBot}
      _site=gmail_condensed
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pBot"
      _default="10"
      ><input
      name=gmail_condensed_spacing_between_emails_in_thread_view_pBot_val
      size=3
      value=${s.pBot}
      _site=gmail_condensed
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pBot"
      _default="10"
      > Padding After
    <li><input
      name=gmail_condensed_spacing_between_emails_in_thread_view_h_range
      type=range
      min=0
      max=200
      value=${s.h}
      _site=gmail_condensed
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="h"
      _default="44"
      ><input
      name=gmail_condensed_spacing_between_emails_in_thread_view_h_val
      size=3
      value=${s.h}
      _site=gmail_condensed
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="h"
      _default="44"
      > Height
    <li><input
      name=gmail_condensed_spacing_between_emails_in_thread_view_pTop_range
      type=range
      min=0
      max=50
      value=${s.pTop}
      _site=gmail_condensed
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pTop"
      _default="5"
      ><input
      name=gmail_condensed_spacing_between_emails_in_thread_view_pTop_val
      size=3
      value=${s.pTop}
      _site=gmail_condensed
      _section_id="spacing_between_emails_in_thread_view"
      _setting_id="pTop"
      _default="5"
      > Padding Before
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('spacing_between_emails_in_thread_view')) settings.spacing_between_emails_in_thread_view = {};
  let s = settings.spacing_between_emails_in_thread_view;
  let e = form.elements;
  s._enabled = e.gmail_condensed_spacing_between_emails_in_thread_view_enabled.checked;
  if (isNaN(s.pBot = parseInt(e.gmail_condensed_spacing_between_emails_in_thread_view_pBot_val.value))) s.pBot = 10;
  if (isNaN(s.h = parseInt(e.gmail_condensed_spacing_between_emails_in_thread_view_h_val.value))) s.h = 44;
  if (isNaN(s.pTop = parseInt(e.gmail_condensed_spacing_between_emails_in_thread_view_pTop_val.value))) s.pTop = 5;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.spacing_between_emails_in_thread_view;
  let e = form.elements;
  e.gmail_condensed_spacing_between_emails_in_thread_view_enabled.checked = s._enabled;
  e.gmail_condensed_spacing_between_emails_in_thread_view_pBot_range.value = e.gmail_condensed_spacing_between_emails_in_thread_view_pBot_val.value = s.pBot;
  e.gmail_condensed_spacing_between_emails_in_thread_view_h_range.value = e.gmail_condensed_spacing_between_emails_in_thread_view_h_val.value = s.h;
  e.gmail_condensed_spacing_between_emails_in_thread_view_pTop_range.value = e.gmail_condensed_spacing_between_emails_in_thread_view_pTop_val.value = s.pTop;
}

};  // end of nested class spacing_between_emails_in_thread_view


///////////////////////////////////////////////////////////
// Functions for labels_in_emails_list : Labels in emails list
// Split: big
// Params: [margin_right 1 1 Horizontal spacing]

static labels_in_emails_list = class {

static params = ["margin_right"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  s._enabled = true;
  s.margin_right = 1;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('margin_right')) s.margin_right = 1;
}

static IsEnabled(settings) {
  return settings.labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels in emails list */\n\n";
  let {margin_right} = s;
  return `
/* Labels in emails list */
.ar {
    margin-right: ${margin_right}px !important;     /* @1 Horizontal spacing */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_condensed_labels_in_emails_list_enabled id=gmail_condensed_labels_in_emails_list_enabled _site=gmail_condensed _section_id="labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_labels_in_emails_list_enabled> Labels in emails list</label>
  <ul>
    <li><input
      name=gmail_condensed_labels_in_emails_list_margin_right_range
      type=range
      min=0
      max=50
      value=${s.margin_right}
      _site=gmail_condensed
      _section_id="labels_in_emails_list"
      _setting_id="margin_right"
      _default="1"
      ><input
      name=gmail_condensed_labels_in_emails_list_margin_right_val
      size=3
      value=${s.margin_right}
      _site=gmail_condensed
      _section_id="labels_in_emails_list"
      _setting_id="margin_right"
      _default="1"
      > Horizontal spacing
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('labels_in_emails_list')) settings.labels_in_emails_list = {};
  let s = settings.labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_condensed_labels_in_emails_list_enabled.checked;
  if (isNaN(s.margin_right = parseInt(e.gmail_condensed_labels_in_emails_list_margin_right_val.value))) s.margin_right = 1;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.labels_in_emails_list;
  let e = form.elements;
  e.gmail_condensed_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_condensed_labels_in_emails_list_margin_right_range.value = e.gmail_condensed_labels_in_emails_list_margin_right_val.value = s.margin_right;
}

};  // end of nested class labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for smaller_font_for_labels_in_emails_list : Smaller font for labels in emails list
// Split: no
// Params: [font_size 1 70 Font size %]

static smaller_font_for_labels_in_emails_list = class {

static params = ["font_size"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  s._enabled = true;
  s.font_size = 70;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('font_size')) s.font_size = 70;
}

static IsEnabled(settings) {
  return settings.smaller_font_for_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Smaller font for labels in emails list */\n\n";
  let {font_size} = s;
  return `
/* Smaller font for labels in emails list */
.ar {
    font-size: ${font_size}% !important;       /* @1 Font size % */
    height: 16px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_smaller_font_for_labels_in_emails_list_enabled id=gmail_condensed_smaller_font_for_labels_in_emails_list_enabled _site=gmail_condensed _section_id="smaller_font_for_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_smaller_font_for_labels_in_emails_list_enabled> Smaller font for labels in emails list</label>
  <ul>
    <li><input
      name=gmail_condensed_smaller_font_for_labels_in_emails_list_font_size_range
      type=range
      min=0
      max=200
      value=${s.font_size}
      _site=gmail_condensed
      _section_id="smaller_font_for_labels_in_emails_list"
      _setting_id="font_size"
      _default="70"
      ><input
      name=gmail_condensed_smaller_font_for_labels_in_emails_list_font_size_val
      size=3
      value=${s.font_size}
      _site=gmail_condensed
      _section_id="smaller_font_for_labels_in_emails_list"
      _setting_id="font_size"
      _default="70"
      > Font size %
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('smaller_font_for_labels_in_emails_list')) settings.smaller_font_for_labels_in_emails_list = {};
  let s = settings.smaller_font_for_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_condensed_smaller_font_for_labels_in_emails_list_enabled.checked;
  if (isNaN(s.font_size = parseInt(e.gmail_condensed_smaller_font_for_labels_in_emails_list_font_size_val.value))) s.font_size = 70;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.smaller_font_for_labels_in_emails_list;
  let e = form.elements;
  e.gmail_condensed_smaller_font_for_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_condensed_smaller_font_for_labels_in_emails_list_font_size_range.value = e.gmail_condensed_smaller_font_for_labels_in_emails_list_font_size_val.value = s.font_size;
}

};  // end of nested class smaller_font_for_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for limit_the_width_of_labels_in_emails_list : Limit the width of labels in emails list
// Split: no
// Params: [max_width 1 70 Max Width], [padding 2 3 Padding]

static limit_the_width_of_labels_in_emails_list = class {

static params = ["max_width", "padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  s._enabled = true;
  s.max_width = 70;
  s.padding = 3;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('max_width')) s.max_width = 70;
  if (!s.hasOwnProperty('padding')) s.padding = 3;
}

static IsEnabled(settings) {
  return settings.limit_the_width_of_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Limit the width of labels in emails list */\n\n";
  let {max_width, padding} = s;
  return `
/* Limit the width of labels in emails list */
tr:not(:hover) td div.ar > div.at > .au > .av
{
    max-width: ${max_width}px !important;       /* @1 */
}
div.ar > div.at > .au > .av
{
    padding: 0 ${padding}px !important;        /* @2 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_limit_the_width_of_labels_in_emails_list_enabled id=gmail_condensed_limit_the_width_of_labels_in_emails_list_enabled _site=gmail_condensed _section_id="limit_the_width_of_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_limit_the_width_of_labels_in_emails_list_enabled> Limit the width of labels in emails list</label>
  <ul>
    <li><input
      name=gmail_condensed_limit_the_width_of_labels_in_emails_list_max_width_range
      type=range
      min=0
      max=200
      value=${s.max_width}
      _site=gmail_condensed
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="max_width"
      _default="70"
      ><input
      name=gmail_condensed_limit_the_width_of_labels_in_emails_list_max_width_val
      size=3
      value=${s.max_width}
      _site=gmail_condensed
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="max_width"
      _default="70"
      > Max Width
    <li><input
      name=gmail_condensed_limit_the_width_of_labels_in_emails_list_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail_condensed
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="padding"
      _default="3"
      ><input
      name=gmail_condensed_limit_the_width_of_labels_in_emails_list_padding_val
      size=3
      value=${s.padding}
      _site=gmail_condensed
      _section_id="limit_the_width_of_labels_in_emails_list"
      _setting_id="padding"
      _default="3"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('limit_the_width_of_labels_in_emails_list')) settings.limit_the_width_of_labels_in_emails_list = {};
  let s = settings.limit_the_width_of_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_condensed_limit_the_width_of_labels_in_emails_list_enabled.checked;
  if (isNaN(s.max_width = parseInt(e.gmail_condensed_limit_the_width_of_labels_in_emails_list_max_width_val.value))) s.max_width = 70;
  if (isNaN(s.padding = parseInt(e.gmail_condensed_limit_the_width_of_labels_in_emails_list_padding_val.value))) s.padding = 3;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.limit_the_width_of_labels_in_emails_list;
  let e = form.elements;
  e.gmail_condensed_limit_the_width_of_labels_in_emails_list_enabled.checked = s._enabled;
  e.gmail_condensed_limit_the_width_of_labels_in_emails_list_max_width_range.value = e.gmail_condensed_limit_the_width_of_labels_in_emails_list_max_width_val.value = s.max_width;
  e.gmail_condensed_limit_the_width_of_labels_in_emails_list_padding_range.value = e.gmail_condensed_limit_the_width_of_labels_in_emails_list_padding_val.value = s.padding;
}

};  // end of nested class limit_the_width_of_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for extra_width_for_special_labels_in_emails_list : Extra width for special labels in emails list
// Split: no
// Params: 

static extra_width_for_special_labels_in_emails_list = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.extra_width_for_special_labels_in_emails_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Extra width for special labels in emails list */\n\n";
  let {} = s;
  return `
/* Extra width for special labels in emails list */
.aRK:before {
    content: none !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_extra_width_for_special_labels_in_emails_list_enabled id=gmail_condensed_extra_width_for_special_labels_in_emails_list_enabled _site=gmail_condensed _section_id="extra_width_for_special_labels_in_emails_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_extra_width_for_special_labels_in_emails_list_enabled> Extra width for special labels in emails list</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('extra_width_for_special_labels_in_emails_list')) settings.extra_width_for_special_labels_in_emails_list = {};
  let s = settings.extra_width_for_special_labels_in_emails_list;
  let e = form.elements;
  s._enabled = e.gmail_condensed_extra_width_for_special_labels_in_emails_list_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.extra_width_for_special_labels_in_emails_list;
  let e = form.elements;
  e.gmail_condensed_extra_width_for_special_labels_in_emails_list_enabled.checked = s._enabled;

}

};  // end of nested class extra_width_for_special_labels_in_emails_list


///////////////////////////////////////////////////////////
// Functions for shrink_general_labels_in_emails_list__like_inbox : Shrink general labels in emails list, like Inbox
// Split: no
// Params: [max_width 1 21 Max Width], [padding 2 1 Padding]

static shrink_general_labels_in_emails_list__like_inbox = class {

static params = ["max_width", "padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  s._enabled = true;
  s.max_width = 21;
  s.padding = 1;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('max_width')) s.max_width = 21;
  if (!s.hasOwnProperty('padding')) s.padding = 1;
}

static IsEnabled(settings) {
  return settings.shrink_general_labels_in_emails_list__like_inbox._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  if (!this.IsEnabled(settings)) return "/* Disabled: Shrink general labels in emails list, like Inbox */\n\n";
  let {max_width, padding} = s;
  return `
/* Shrink general labels in emails list, like Inbox */
tr:not(:hover) td div.ar > div.at[title='Vault "Indef"'] > .au > .av,
tr:not(:hover) td div.ar > div.at[title='Inbox'] > .au > .av,
tr:not(:hover) td div.ar > div.at[title='automatically-processed'] > .au > .av
{
    max-width: ${max_width}px !important;       /* @1 */
    padding: 0 ${padding}px !important;        /* @2 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_enabled id=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_enabled _site=gmail_condensed _section_id="shrink_general_labels_in_emails_list__like_inbox" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_enabled> Shrink general labels in emails list, like Inbox</label>
  <ul>
    <li><input
      name=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_max_width_range
      type=range
      min=0
      max=200
      value=${s.max_width}
      _site=gmail_condensed
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="max_width"
      _default="21"
      ><input
      name=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_max_width_val
      size=3
      value=${s.max_width}
      _site=gmail_condensed
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="max_width"
      _default="21"
      > Max Width
    <li><input
      name=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail_condensed
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="padding"
      _default="1"
      ><input
      name=gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_padding_val
      size=3
      value=${s.padding}
      _site=gmail_condensed
      _section_id="shrink_general_labels_in_emails_list__like_inbox"
      _setting_id="padding"
      _default="1"
      > Padding
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('shrink_general_labels_in_emails_list__like_inbox')) settings.shrink_general_labels_in_emails_list__like_inbox = {};
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  let e = form.elements;
  s._enabled = e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_enabled.checked;
  if (isNaN(s.max_width = parseInt(e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_max_width_val.value))) s.max_width = 21;
  if (isNaN(s.padding = parseInt(e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_padding_val.value))) s.padding = 1;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.shrink_general_labels_in_emails_list__like_inbox;
  let e = form.elements;
  e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_enabled.checked = s._enabled;
  e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_max_width_range.value = e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_max_width_val.value = s.max_width;
  e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_padding_range.value = e.gmail_condensed_shrink_general_labels_in_emails_list__like_inbox_padding_val.value = s.padding;
}

};  // end of nested class shrink_general_labels_in_emails_list__like_inbox


///////////////////////////////////////////////////////////
// Functions for sections_splitter : Sections splitter
// Split: big
// Params: [height 1 26 Height]

static sections_splitter = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  s._enabled = true;
  s.height = 26;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 26;
}

static IsEnabled(settings) {
  return settings.sections_splitter._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  if (!this.IsEnabled(settings)) return "/* Disabled: Sections splitter */\n\n";
  let {height} = s;
  return `
/* Sections splitter */
.Wg {
    height: ${height}px !important;          /* @1 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_condensed_sections_splitter_enabled id=gmail_condensed_sections_splitter_enabled _site=gmail_condensed _section_id="sections_splitter" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_sections_splitter_enabled> Sections splitter</label>
  <ul>
    <li><input
      name=gmail_condensed_sections_splitter_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=gmail_condensed
      _section_id="sections_splitter"
      _setting_id="height"
      _default="26"
      ><input
      name=gmail_condensed_sections_splitter_height_val
      size=3
      value=${s.height}
      _site=gmail_condensed
      _section_id="sections_splitter"
      _setting_id="height"
      _default="26"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('sections_splitter')) settings.sections_splitter = {};
  let s = settings.sections_splitter;
  let e = form.elements;
  s._enabled = e.gmail_condensed_sections_splitter_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_condensed_sections_splitter_height_val.value))) s.height = 26;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.sections_splitter;
  let e = form.elements;
  e.gmail_condensed_sections_splitter_enabled.checked = s._enabled;
  e.gmail_condensed_sections_splitter_height_range.value = e.gmail_condensed_sections_splitter_height_val.value = s.height;
}

};  // end of nested class sections_splitter


///////////////////////////////////////////////////////////
// Functions for multiple_inbox_sections : Multiple inbox sections
// Split: no
// Params: [row_height 1 29 row: Height], [title_padding_bottom 1 4 title: Padding Bottom], [title_padding_top 1 4 title: Padding Top], [title_height 1 16 title: Height], [title_padding_left 1 80 title: Label shift towards the middle], [right_button_padding_bottom 1 2 right button: Padding Bottom], [right_button_padding_top 1 2 right button: Padding Top], [right_button_height 1 15 right button: Height], [right_button_line_height 1 15 right button: Line Height]

static multiple_inbox_sections = class {

static params = ["row_height", "title_padding_bottom", "title_padding_top", "title_height", "title_padding_left", "right_button_padding_bottom", "right_button_padding_top", "right_button_height", "right_button_line_height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  s._enabled = true;
  s.row_height = 29;
  s.title_padding_bottom = 4;
  s.title_padding_top = 4;
  s.title_height = 16;
  s.title_padding_left = 80;
  s.right_button_padding_bottom = 2;
  s.right_button_padding_top = 2;
  s.right_button_height = 15;
  s.right_button_line_height = 15;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('row_height')) s.row_height = 29;
  if (!s.hasOwnProperty('title_padding_bottom')) s.title_padding_bottom = 4;
  if (!s.hasOwnProperty('title_padding_top')) s.title_padding_top = 4;
  if (!s.hasOwnProperty('title_height')) s.title_height = 16;
  if (!s.hasOwnProperty('title_padding_left')) s.title_padding_left = 80;
  if (!s.hasOwnProperty('right_button_padding_bottom')) s.right_button_padding_bottom = 2;
  if (!s.hasOwnProperty('right_button_padding_top')) s.right_button_padding_top = 2;
  if (!s.hasOwnProperty('right_button_height')) s.right_button_height = 15;
  if (!s.hasOwnProperty('right_button_line_height')) s.right_button_line_height = 15;
}

static IsEnabled(settings) {
  return settings.multiple_inbox_sections._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  if (!this.IsEnabled(settings)) return "/* Disabled: Multiple inbox sections */\n\n";
  let {row_height, title_padding_bottom, title_padding_top, title_height, title_padding_left, right_button_padding_bottom, right_button_padding_top, right_button_height, right_button_line_height} = s;
  return `
/* Multiple inbox sections */
.nK .byN { /* row */
    height: ${row_height}px !important;          /* @1 */
    background-color: rgba(128, 128, 128, 0.1);
}
.Cq .nJ.A2 { /* title */
    padding-bottom: ${title_padding_bottom}px !important;   /* @1 */
    padding-top: ${title_padding_top}px !important;      /* @1 */
    height: ${title_height}px !important;          /* @1 */
    padding-left: ${title_padding_left}px !important; /* @1 Label shift towards the middle */
}
.Cr .yj { /* right button */
    padding-bottom: ${right_button_padding_bottom}px !important;   /* @1 */
    padding-top: ${right_button_padding_top}px !important;      /* @1 */
    height: ${right_button_height}px !important;          /* @1 */
    line-height: ${right_button_line_height}px !important;     /* @1 */
}
.Di>.amH { /* "1-50 of ..." */
    height: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_multiple_inbox_sections_enabled id=gmail_condensed_multiple_inbox_sections_enabled _site=gmail_condensed _section_id="multiple_inbox_sections" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_multiple_inbox_sections_enabled> Multiple inbox sections</label>
  <ul>
    <li><input
      name=gmail_condensed_multiple_inbox_sections_row_height_range
      type=range
      min=0
      max=200
      value=${s.row_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="row_height"
      _default="29"
      ><input
      name=gmail_condensed_multiple_inbox_sections_row_height_val
      size=3
      value=${s.row_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="row_height"
      _default="29"
      > row: Height
    <li><input
      name=gmail_condensed_multiple_inbox_sections_title_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.title_padding_bottom}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_bottom"
      _default="4"
      ><input
      name=gmail_condensed_multiple_inbox_sections_title_padding_bottom_val
      size=3
      value=${s.title_padding_bottom}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_bottom"
      _default="4"
      > title: Padding Bottom
    <li><input
      name=gmail_condensed_multiple_inbox_sections_title_padding_top_range
      type=range
      min=0
      max=50
      value=${s.title_padding_top}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_top"
      _default="4"
      ><input
      name=gmail_condensed_multiple_inbox_sections_title_padding_top_val
      size=3
      value=${s.title_padding_top}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_top"
      _default="4"
      > title: Padding Top
    <li><input
      name=gmail_condensed_multiple_inbox_sections_title_height_range
      type=range
      min=0
      max=50
      value=${s.title_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_height"
      _default="16"
      ><input
      name=gmail_condensed_multiple_inbox_sections_title_height_val
      size=3
      value=${s.title_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_height"
      _default="16"
      > title: Height
    <li><input
      name=gmail_condensed_multiple_inbox_sections_title_padding_left_range
      type=range
      min=0
      max=200
      value=${s.title_padding_left}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_left"
      _default="80"
      ><input
      name=gmail_condensed_multiple_inbox_sections_title_padding_left_val
      size=3
      value=${s.title_padding_left}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="title_padding_left"
      _default="80"
      > title: Label shift towards the middle
    <li><input
      name=gmail_condensed_multiple_inbox_sections_right_button_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.right_button_padding_bottom}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_bottom"
      _default="2"
      ><input
      name=gmail_condensed_multiple_inbox_sections_right_button_padding_bottom_val
      size=3
      value=${s.right_button_padding_bottom}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_bottom"
      _default="2"
      > right button: Padding Bottom
    <li><input
      name=gmail_condensed_multiple_inbox_sections_right_button_padding_top_range
      type=range
      min=0
      max=50
      value=${s.right_button_padding_top}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_top"
      _default="2"
      ><input
      name=gmail_condensed_multiple_inbox_sections_right_button_padding_top_val
      size=3
      value=${s.right_button_padding_top}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_padding_top"
      _default="2"
      > right button: Padding Top
    <li><input
      name=gmail_condensed_multiple_inbox_sections_right_button_height_range
      type=range
      min=0
      max=50
      value=${s.right_button_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_height"
      _default="15"
      ><input
      name=gmail_condensed_multiple_inbox_sections_right_button_height_val
      size=3
      value=${s.right_button_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_height"
      _default="15"
      > right button: Height
    <li><input
      name=gmail_condensed_multiple_inbox_sections_right_button_line_height_range
      type=range
      min=0
      max=50
      value=${s.right_button_line_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_line_height"
      _default="15"
      ><input
      name=gmail_condensed_multiple_inbox_sections_right_button_line_height_val
      size=3
      value=${s.right_button_line_height}
      _site=gmail_condensed
      _section_id="multiple_inbox_sections"
      _setting_id="right_button_line_height"
      _default="15"
      > right button: Line Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('multiple_inbox_sections')) settings.multiple_inbox_sections = {};
  let s = settings.multiple_inbox_sections;
  let e = form.elements;
  s._enabled = e.gmail_condensed_multiple_inbox_sections_enabled.checked;
  if (isNaN(s.row_height = parseInt(e.gmail_condensed_multiple_inbox_sections_row_height_val.value))) s.row_height = 29;
  if (isNaN(s.title_padding_bottom = parseInt(e.gmail_condensed_multiple_inbox_sections_title_padding_bottom_val.value))) s.title_padding_bottom = 4;
  if (isNaN(s.title_padding_top = parseInt(e.gmail_condensed_multiple_inbox_sections_title_padding_top_val.value))) s.title_padding_top = 4;
  if (isNaN(s.title_height = parseInt(e.gmail_condensed_multiple_inbox_sections_title_height_val.value))) s.title_height = 16;
  if (isNaN(s.title_padding_left = parseInt(e.gmail_condensed_multiple_inbox_sections_title_padding_left_val.value))) s.title_padding_left = 80;
  if (isNaN(s.right_button_padding_bottom = parseInt(e.gmail_condensed_multiple_inbox_sections_right_button_padding_bottom_val.value))) s.right_button_padding_bottom = 2;
  if (isNaN(s.right_button_padding_top = parseInt(e.gmail_condensed_multiple_inbox_sections_right_button_padding_top_val.value))) s.right_button_padding_top = 2;
  if (isNaN(s.right_button_height = parseInt(e.gmail_condensed_multiple_inbox_sections_right_button_height_val.value))) s.right_button_height = 15;
  if (isNaN(s.right_button_line_height = parseInt(e.gmail_condensed_multiple_inbox_sections_right_button_line_height_val.value))) s.right_button_line_height = 15;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.multiple_inbox_sections;
  let e = form.elements;
  e.gmail_condensed_multiple_inbox_sections_enabled.checked = s._enabled;
  e.gmail_condensed_multiple_inbox_sections_row_height_range.value = e.gmail_condensed_multiple_inbox_sections_row_height_val.value = s.row_height;
  e.gmail_condensed_multiple_inbox_sections_title_padding_bottom_range.value = e.gmail_condensed_multiple_inbox_sections_title_padding_bottom_val.value = s.title_padding_bottom;
  e.gmail_condensed_multiple_inbox_sections_title_padding_top_range.value = e.gmail_condensed_multiple_inbox_sections_title_padding_top_val.value = s.title_padding_top;
  e.gmail_condensed_multiple_inbox_sections_title_height_range.value = e.gmail_condensed_multiple_inbox_sections_title_height_val.value = s.title_height;
  e.gmail_condensed_multiple_inbox_sections_title_padding_left_range.value = e.gmail_condensed_multiple_inbox_sections_title_padding_left_val.value = s.title_padding_left;
  e.gmail_condensed_multiple_inbox_sections_right_button_padding_bottom_range.value = e.gmail_condensed_multiple_inbox_sections_right_button_padding_bottom_val.value = s.right_button_padding_bottom;
  e.gmail_condensed_multiple_inbox_sections_right_button_padding_top_range.value = e.gmail_condensed_multiple_inbox_sections_right_button_padding_top_val.value = s.right_button_padding_top;
  e.gmail_condensed_multiple_inbox_sections_right_button_height_range.value = e.gmail_condensed_multiple_inbox_sections_right_button_height_val.value = s.right_button_height;
  e.gmail_condensed_multiple_inbox_sections_right_button_line_height_range.value = e.gmail_condensed_multiple_inbox_sections_right_button_line_height_val.value = s.right_button_line_height;
}

};  // end of nested class multiple_inbox_sections


///////////////////////////////////////////////////////////
// Functions for fix_too_large_hitboxes_for_email_selection_marks : Fix too large hitboxes for email selection marks
// Split: big
// Params: 

static fix_too_large_hitboxes_for_email_selection_marks = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.fix_too_large_hitboxes_for_email_selection_marks._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  if (!this.IsEnabled(settings)) return "/* Disabled: Fix too large hitboxes for email selection marks */\n\n";
  let {} = s;
  return `
/* Fix too large hitboxes for email selection marks */
.xY>.T-Jo::before {
    content: '';
    display: block;
    opacity: 0;
    position: absolute;
    transition-duration: 0s !important;
    z-index: -1;
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
    background: none;
    border-radius: 50%;
    box-sizing: border-box;
    transform: scale(0);
    transition-property: '';
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
}

.T-Jo::before {
    content: '' !important;
    display: block;
    opacity: 0;
    position: absolute;
    transition-duration: 0s !important;
    z-index: -1;
    bottom: 0px !important;
    left: 0px !important;
    right: 0px !important;
    top: 0px !important;
    background: none;
    border-radius: 50%;
    box-sizing: border-box;
    transform: scale(0);
    transition-property: '';
}

.xY>.T-Jo::after, .xY>.T-Jo-Jp::after {
    height: 0px !important;
    width: 0px !important;
}

.T-Jo::after {
    content: "";
    height: 100% !important;
    position: static !important;
    top: 0px !important;
    left: 0px !important;
    width: 100% !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_condensed_fix_too_large_hitboxes_for_email_selection_marks_enabled id=gmail_condensed_fix_too_large_hitboxes_for_email_selection_marks_enabled _site=gmail_condensed _section_id="fix_too_large_hitboxes_for_email_selection_marks" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_fix_too_large_hitboxes_for_email_selection_marks_enabled> Fix too large hitboxes for email selection marks</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('fix_too_large_hitboxes_for_email_selection_marks')) settings.fix_too_large_hitboxes_for_email_selection_marks = {};
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  let e = form.elements;
  s._enabled = e.gmail_condensed_fix_too_large_hitboxes_for_email_selection_marks_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.fix_too_large_hitboxes_for_email_selection_marks;
  let e = form.elements;
  e.gmail_condensed_fix_too_large_hitboxes_for_email_selection_marks_enabled.checked = s._enabled;

}

};  // end of nested class fix_too_large_hitboxes_for_email_selection_marks


///////////////////////////////////////////////////////////
// Functions for labels_tree : Labels tree
// Split: minor
// Params: [height 1 18 Height]

static labels_tree = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  s._enabled = true;
  s.height = 18;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 18;
}

static IsEnabled(settings) {
  return settings.labels_tree._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  if (!this.IsEnabled(settings)) return "/* Disabled: Labels tree */\n\n";
  let {height} = s;
  return `
/* Labels tree */
.TN {
    height: ${height}px !important;        /* @1 */
    overflow: hidden;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_condensed_labels_tree_enabled id=gmail_condensed_labels_tree_enabled _site=gmail_condensed _section_id="labels_tree" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_labels_tree_enabled> Labels tree</label>
  <ul>
    <li><input
      name=gmail_condensed_labels_tree_height_range
      type=range
      min=0
      max=50
      value=${s.height}
      _site=gmail_condensed
      _section_id="labels_tree"
      _setting_id="height"
      _default="18"
      ><input
      name=gmail_condensed_labels_tree_height_val
      size=3
      value=${s.height}
      _site=gmail_condensed
      _section_id="labels_tree"
      _setting_id="height"
      _default="18"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('labels_tree')) settings.labels_tree = {};
  let s = settings.labels_tree;
  let e = form.elements;
  s._enabled = e.gmail_condensed_labels_tree_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_condensed_labels_tree_height_val.value))) s.height = 18;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.labels_tree;
  let e = form.elements;
  e.gmail_condensed_labels_tree_enabled.checked = s._enabled;
  e.gmail_condensed_labels_tree_height_range.value = e.gmail_condensed_labels_tree_height_val.value = s.height;
}

};  // end of nested class labels_tree


///////////////////////////////////////////////////////////
// Functions for compose_button : Compose button
// Split: minor
// Params: 

static compose_button = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compose_button._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compose button */\n\n";
  let {} = s;
  return `
/* Compose button */
.z0>.L3 {
    height: 30px !important;
}
.z0 {
    height: 30px !important;
    margin: 4px 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_condensed_compose_button_enabled id=gmail_condensed_compose_button_enabled _site=gmail_condensed _section_id="compose_button" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_compose_button_enabled> Compose button</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compose_button')) settings.compose_button = {};
  let s = settings.compose_button;
  let e = form.elements;
  s._enabled = e.gmail_condensed_compose_button_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compose_button;
  let e = form.elements;
  e.gmail_condensed_compose_button_enabled.checked = s._enabled;

}

};  // end of nested class compose_button


///////////////////////////////////////////////////////////
// Functions for area_right_to_the_compose_button_and_above_the_list_of_emails : Area right to the compose button and above the list of emails
// Split: no
// Params: [height 1 26 Height]

static area_right_to_the_compose_button_and_above_the_list_of_emails = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  s._enabled = true;
  s.height = 26;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 26;
}

static IsEnabled(settings) {
  return settings.area_right_to_the_compose_button_and_above_the_list_of_emails._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  if (!this.IsEnabled(settings)) return "/* Disabled: Area right to the compose button and above the list of emails */\n\n";
  let {height} = s;
  return `
/* Area right to the compose button and above the list of emails */
.G-atb {
    height: ${height}px !important;          /* @1 */
    overflow: hidden;
}
/*-Absolutely empty invisible hren hiding buttons */
header[role=banner] > :nth-child(3) {
    display:none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled id=gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled _site=gmail_condensed _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled> Area right to the compose button and above the list of emails</label>
  <ul>
    <li><input
      name=gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=gmail_condensed
      _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails"
      _setting_id="height"
      _default="26"
      ><input
      name=gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val
      size=3
      value=${s.height}
      _site=gmail_condensed
      _section_id="area_right_to_the_compose_button_and_above_the_list_of_emails"
      _setting_id="height"
      _default="26"
      > Height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('area_right_to_the_compose_button_and_above_the_list_of_emails')) settings.area_right_to_the_compose_button_and_above_the_list_of_emails = {};
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  let e = form.elements;
  s._enabled = e.gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled.checked;
  if (isNaN(s.height = parseInt(e.gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val.value))) s.height = 26;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.area_right_to_the_compose_button_and_above_the_list_of_emails;
  let e = form.elements;
  e.gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_enabled.checked = s._enabled;
  e.gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_height_range.value = e.gmail_condensed_area_right_to_the_compose_button_and_above_the_list_of_emails_height_val.value = s.height;
}

};  // end of nested class area_right_to_the_compose_button_and_above_the_list_of_emails


///////////////////////////////////////////////////////////
// Functions for subject_bar_when_reading_email : Subject bar when reading email
// Split: minor
// Params: [padding_top 1 8 Padding Top], [padding_bottom 1 0 Padding Bottom], [padding_left 1 10 Padding Left]

static subject_bar_when_reading_email = class {

static params = ["padding_top", "padding_bottom", "padding_left"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  s._enabled = true;
  s.padding_top = 8;
  s.padding_bottom = 0;
  s.padding_left = 10;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding_top')) s.padding_top = 8;
  if (!s.hasOwnProperty('padding_bottom')) s.padding_bottom = 0;
  if (!s.hasOwnProperty('padding_left')) s.padding_left = 10;
}

static IsEnabled(settings) {
  return settings.subject_bar_when_reading_email._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  if (!this.IsEnabled(settings)) return "/* Disabled: Subject bar when reading email */\n\n";
  let {padding_top, padding_bottom, padding_left} = s;
  return `
/* Subject bar when reading email */
.if>.byY, .iC .byY {
    padding-top: ${padding_top}px !important;      /* @1 */
    padding-bottom: ${padding_bottom}px !important;   /* @1 */
    padding-left: ${padding_left}px !important;    /* @1 */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_condensed_subject_bar_when_reading_email_enabled id=gmail_condensed_subject_bar_when_reading_email_enabled _site=gmail_condensed _section_id="subject_bar_when_reading_email" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_subject_bar_when_reading_email_enabled> Subject bar when reading email</label>
  <ul>
    <li><input
      name=gmail_condensed_subject_bar_when_reading_email_padding_top_range
      type=range
      min=0
      max=50
      value=${s.padding_top}
      _site=gmail_condensed
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_top"
      _default="8"
      ><input
      name=gmail_condensed_subject_bar_when_reading_email_padding_top_val
      size=3
      value=${s.padding_top}
      _site=gmail_condensed
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_top"
      _default="8"
      > Padding Top
    <li><input
      name=gmail_condensed_subject_bar_when_reading_email_padding_bottom_range
      type=range
      min=0
      max=50
      value=${s.padding_bottom}
      _site=gmail_condensed
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_bottom"
      _default="0"
      ><input
      name=gmail_condensed_subject_bar_when_reading_email_padding_bottom_val
      size=3
      value=${s.padding_bottom}
      _site=gmail_condensed
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_bottom"
      _default="0"
      > Padding Bottom
    <li><input
      name=gmail_condensed_subject_bar_when_reading_email_padding_left_range
      type=range
      min=0
      max=50
      value=${s.padding_left}
      _site=gmail_condensed
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_left"
      _default="10"
      ><input
      name=gmail_condensed_subject_bar_when_reading_email_padding_left_val
      size=3
      value=${s.padding_left}
      _site=gmail_condensed
      _section_id="subject_bar_when_reading_email"
      _setting_id="padding_left"
      _default="10"
      > Padding Left
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('subject_bar_when_reading_email')) settings.subject_bar_when_reading_email = {};
  let s = settings.subject_bar_when_reading_email;
  let e = form.elements;
  s._enabled = e.gmail_condensed_subject_bar_when_reading_email_enabled.checked;
  if (isNaN(s.padding_top = parseInt(e.gmail_condensed_subject_bar_when_reading_email_padding_top_val.value))) s.padding_top = 8;
  if (isNaN(s.padding_bottom = parseInt(e.gmail_condensed_subject_bar_when_reading_email_padding_bottom_val.value))) s.padding_bottom = 0;
  if (isNaN(s.padding_left = parseInt(e.gmail_condensed_subject_bar_when_reading_email_padding_left_val.value))) s.padding_left = 10;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.subject_bar_when_reading_email;
  let e = form.elements;
  e.gmail_condensed_subject_bar_when_reading_email_enabled.checked = s._enabled;
  e.gmail_condensed_subject_bar_when_reading_email_padding_top_range.value = e.gmail_condensed_subject_bar_when_reading_email_padding_top_val.value = s.padding_top;
  e.gmail_condensed_subject_bar_when_reading_email_padding_bottom_range.value = e.gmail_condensed_subject_bar_when_reading_email_padding_bottom_val.value = s.padding_bottom;
  e.gmail_condensed_subject_bar_when_reading_email_padding_left_range.value = e.gmail_condensed_subject_bar_when_reading_email_padding_left_val.value = s.padding_left;
}

};  // end of nested class subject_bar_when_reading_email


///////////////////////////////////////////////////////////
// Functions for in_page_compose_window_header : In-page compose window header
// Split: minor
// Params: [padding 1 0 Padding Top]

static in_page_compose_window_header = class {

static params = ["padding"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  s._enabled = true;
  s.padding = 0;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('padding')) s.padding = 0;
}

static IsEnabled(settings) {
  return settings.in_page_compose_window_header._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  if (!this.IsEnabled(settings)) return "/* Disabled: In-page compose window header */\n\n";
  let {padding} = s;
  return `
/* In-page compose window header */
.Hp {
  margin-left: 6px;
  padding: 0 !important;
  padding-top: ${padding} !important;       /* @1 @padding */
  padding-bottom: ${padding} !important;    /* @1=padding */
}
.Hm {
  padding: 0 !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_condensed_in_page_compose_window_header_enabled id=gmail_condensed_in_page_compose_window_header_enabled _site=gmail_condensed _section_id="in_page_compose_window_header" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_in_page_compose_window_header_enabled> In-page compose window header</label>
  <ul>
    <li><input
      name=gmail_condensed_in_page_compose_window_header_padding_range
      type=range
      min=0
      max=50
      value=${s.padding}
      _site=gmail_condensed
      _section_id="in_page_compose_window_header"
      _setting_id="padding"
      _default="0"
      ><input
      name=gmail_condensed_in_page_compose_window_header_padding_val
      size=3
      value=${s.padding}
      _site=gmail_condensed
      _section_id="in_page_compose_window_header"
      _setting_id="padding"
      _default="0"
      > Padding Top
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('in_page_compose_window_header')) settings.in_page_compose_window_header = {};
  let s = settings.in_page_compose_window_header;
  let e = form.elements;
  s._enabled = e.gmail_condensed_in_page_compose_window_header_enabled.checked;
  if (isNaN(s.padding = parseInt(e.gmail_condensed_in_page_compose_window_header_padding_val.value))) s.padding = 0;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.in_page_compose_window_header;
  let e = form.elements;
  e.gmail_condensed_in_page_compose_window_header_enabled.checked = s._enabled;
  e.gmail_condensed_in_page_compose_window_header_padding_range.value = e.gmail_condensed_in_page_compose_window_header_padding_val.value = s.padding;
}

};  // end of nested class in_page_compose_window_header


///////////////////////////////////////////////////////////
// Functions for absolutely_empty_space_above_chat : Absolutely empty space above chat
// Split: minor
// Params: 

static absolutely_empty_space_above_chat = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.absolutely_empty_space_above_chat._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  if (!this.IsEnabled(settings)) return "/* Disabled: Absolutely empty space above chat */\n\n";
  let {} = s;
  return `
/* Absolutely empty space above chat */
.akj {
    margin-top: 10px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=gmail_condensed_absolutely_empty_space_above_chat_enabled id=gmail_condensed_absolutely_empty_space_above_chat_enabled _site=gmail_condensed _section_id="absolutely_empty_space_above_chat" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_absolutely_empty_space_above_chat_enabled> Absolutely empty space above chat</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('absolutely_empty_space_above_chat')) settings.absolutely_empty_space_above_chat = {};
  let s = settings.absolutely_empty_space_above_chat;
  let e = form.elements;
  s._enabled = e.gmail_condensed_absolutely_empty_space_above_chat_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.absolutely_empty_space_above_chat;
  let e = form.elements;
  e.gmail_condensed_absolutely_empty_space_above_chat_enabled.checked = s._enabled;

}

};  // end of nested class absolutely_empty_space_above_chat


///////////////////////////////////////////////////////////
// Functions for padding_on_the_right_of_the_chat : Padding on the right of the chat
// Split: no
// Params: 

static padding_on_the_right_of_the_chat = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.padding_on_the_right_of_the_chat._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  if (!this.IsEnabled(settings)) return "/* Disabled: Padding on the right of the chat */\n\n";
  let {} = s;
  return `
/* Padding on the right of the chat */
div.aCl div.akj {
    padding-right: 0px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_padding_on_the_right_of_the_chat_enabled id=gmail_condensed_padding_on_the_right_of_the_chat_enabled _site=gmail_condensed _section_id="padding_on_the_right_of_the_chat" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_padding_on_the_right_of_the_chat_enabled> Padding on the right of the chat</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('padding_on_the_right_of_the_chat')) settings.padding_on_the_right_of_the_chat = {};
  let s = settings.padding_on_the_right_of_the_chat;
  let e = form.elements;
  s._enabled = e.gmail_condensed_padding_on_the_right_of_the_chat_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.padding_on_the_right_of_the_chat;
  let e = form.elements;
  e.gmail_condensed_padding_on_the_right_of_the_chat_enabled.checked = s._enabled;

}

};  // end of nested class padding_on_the_right_of_the_chat


///////////////////////////////////////////////////////////
// Functions for compact_chat_contact_list : Compact chat contact list
// Split: no
// Params: 

static compact_chat_contact_list = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.compact_chat_contact_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact chat contact list */\n\n";
  let {} = s;
  return `
/* Compact chat contact list */
.V6.CL { /*--contact list headings--*/
  height: unset !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  return `
  <li>
  <input type=checkbox name=gmail_condensed_compact_chat_contact_list_enabled id=gmail_condensed_compact_chat_contact_list_enabled _site=gmail_condensed _section_id="compact_chat_contact_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_compact_chat_contact_list_enabled> Compact chat contact list</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_chat_contact_list')) settings.compact_chat_contact_list = {};
  let s = settings.compact_chat_contact_list;
  let e = form.elements;
  s._enabled = e.gmail_condensed_compact_chat_contact_list_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_chat_contact_list;
  let e = form.elements;
  e.gmail_condensed_compact_chat_contact_list_enabled.checked = s._enabled;

}

};  // end of nested class compact_chat_contact_list


///////////////////////////////////////////////////////////
// Functions for top_bar : Top bar width, height, paddings
// Split: big
// Params: 

static top_bar = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.top_bar._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  if (!this.IsEnabled(settings)) return "/* Disabled: Top bar width, height, paddings */\n\n";
  let {} = s;
  return `
/* Top bar width, height, paddings */
/*-Top bar paddings */
.gb_Va:not(.gb_Wa) .gb_Ld ,
.gb_Va:not(.gb_Wa) .gb_Md {
    padding: 0px !important;
}

/*-Top bar height */
.gb_Dc , .gb_Ec , .gb_Mc , [data-ogsr-up] {
    height: 34px !important;
}
header[role=banner] > div {
    padding: 0px !important;
}
div.gb_ce {
    height: 36px !important;
}
header[role=banner] > div:nth-child(2) > div:first-child ,
header[role=banner] > div:nth-child(2) > div:nth-child(2) ,
header[role=banner] > div:nth-child(2) > div:nth-child(2) > div
{
    height: 36px !important;
}
/*-search bar */
.gb_jf , .gb_kf, .gb_0d, .gb_6d {
    height: 36px !important;
}
.gb_Bf , .gb_Cf , form#aso_search_form_anchor > div[gh=sb] {
    height: 32px !important;
}
form#aso_search_form_anchor > div[gh=sb] > table[role=presentation] > tbody > tr {
    height: 0px !important;
}
form#aso_search_form_anchor > div[gh=sb] > table[role=presentation] table td {
    padding: 0px !important;
}
form.bas {
    border-radius: unset !important;
    min-height: unset !important;
}
/*-Parent td of input[name=q] */
td.gsib_a {
    vertical-align: top !important;
}
/*-search bar icons and buttons */
.gb_1e button svg, .gb_1e button img,
.gb_2e button svg, .gb_2e button img,
form#aso_search_form_anchor button svg, form#aso_search_form_anchor button img
{
    padding: 2px !important;
    margin: 2px !important;
}
/*-top bar right icons */
.gb_Pe {
    background: inherit !important;
    background-color: inherit !important;
}
/*-Smaller sandwitch menu button */
.gb_ic , .gb_jc , .gb_pc , div[aria-label="Main menu"] {
    -webkit-border-radius: 25% !important;
    border-radius: 25% !important;
    padding: 4px !important;
}

/*-Top bar, account access */
div.gb_Va.gb_Mg.gb_R,
div.gb_Va.gb_Pg.gb_R {
    max-height: 41px !important;
    margin-top: -8px !important;
}
/*-Account dropdown */
div.gb_aa {
    top: 36px !important;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  return `  <li><hr>
  <li>
  <input type=checkbox name=gmail_condensed_top_bar_enabled id=gmail_condensed_top_bar_enabled _site=gmail_condensed _section_id="top_bar" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=gmail_condensed_top_bar_enabled> Top bar width, height, paddings</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('top_bar')) settings.top_bar = {};
  let s = settings.top_bar;
  let e = form.elements;
  s._enabled = e.gmail_condensed_top_bar_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.top_bar;
  let e = form.elements;
  e.gmail_condensed_top_bar_enabled.checked = s._enabled;

}

};  // end of nested class top_bar


///////////////////////////////////////////////////////////
// Interface functions

static id = "gmail_condensed";
static fields = ["list_of_emails", "horizontal_cell_paddings_in_grid_cells", "spacing_between_emails_in_thread_view", "labels_in_emails_list", "smaller_font_for_labels_in_emails_list", "limit_the_width_of_labels_in_emails_list", "extra_width_for_special_labels_in_emails_list", "shrink_general_labels_in_emails_list__like_inbox", "sections_splitter", "multiple_inbox_sections", "fix_too_large_hitboxes_for_email_selection_marks", "labels_tree", "compose_button", "area_right_to_the_compose_button_and_above_the_list_of_emails", "subject_bar_when_reading_email", "in_page_compose_window_header", "absolutely_empty_space_above_chat", "padding_on_the_right_of_the_chat", "compact_chat_contact_list", "top_bar"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module gmail_condensed disabled */";
  return ""+
  this.list_of_emails.GenStyle(settings) +
  this.horizontal_cell_paddings_in_grid_cells.GenStyle(settings) +
  this.spacing_between_emails_in_thread_view.GenStyle(settings) +
  this.labels_in_emails_list.GenStyle(settings) +
  this.smaller_font_for_labels_in_emails_list.GenStyle(settings) +
  this.limit_the_width_of_labels_in_emails_list.GenStyle(settings) +
  this.extra_width_for_special_labels_in_emails_list.GenStyle(settings) +
  this.shrink_general_labels_in_emails_list__like_inbox.GenStyle(settings) +
  this.sections_splitter.GenStyle(settings) +
  this.multiple_inbox_sections.GenStyle(settings) +
  this.fix_too_large_hitboxes_for_email_selection_marks.GenStyle(settings) +
  this.labels_tree.GenStyle(settings) +
  this.compose_button.GenStyle(settings) +
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenStyle(settings) +
  this.subject_bar_when_reading_email.GenStyle(settings) +
  this.in_page_compose_window_header.GenStyle(settings) +
  this.absolutely_empty_space_above_chat.GenStyle(settings) +
  this.padding_on_the_right_of_the_chat.GenStyle(settings) +
  this.compact_chat_contact_list.GenStyle(settings) +
  this.top_bar.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.list_of_emails.GenScriptUrls(settings),
    ...this.horizontal_cell_paddings_in_grid_cells.GenScriptUrls(settings),
    ...this.spacing_between_emails_in_thread_view.GenScriptUrls(settings),
    ...this.labels_in_emails_list.GenScriptUrls(settings),
    ...this.smaller_font_for_labels_in_emails_list.GenScriptUrls(settings),
    ...this.limit_the_width_of_labels_in_emails_list.GenScriptUrls(settings),
    ...this.extra_width_for_special_labels_in_emails_list.GenScriptUrls(settings),
    ...this.shrink_general_labels_in_emails_list__like_inbox.GenScriptUrls(settings),
    ...this.sections_splitter.GenScriptUrls(settings),
    ...this.multiple_inbox_sections.GenScriptUrls(settings),
    ...this.fix_too_large_hitboxes_for_email_selection_marks.GenScriptUrls(settings),
    ...this.labels_tree.GenScriptUrls(settings),
    ...this.compose_button.GenScriptUrls(settings),
    ...this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenScriptUrls(settings),
    ...this.subject_bar_when_reading_email.GenScriptUrls(settings),
    ...this.in_page_compose_window_header.GenScriptUrls(settings),
    ...this.absolutely_empty_space_above_chat.GenScriptUrls(settings),
    ...this.padding_on_the_right_of_the_chat.GenScriptUrls(settings),
    ...this.compact_chat_contact_list.GenScriptUrls(settings),
    ...this.top_bar.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.list_of_emails.GetScript(settings),
    this.horizontal_cell_paddings_in_grid_cells.GetScript(settings),
    this.spacing_between_emails_in_thread_view.GetScript(settings),
    this.labels_in_emails_list.GetScript(settings),
    this.smaller_font_for_labels_in_emails_list.GetScript(settings),
    this.limit_the_width_of_labels_in_emails_list.GetScript(settings),
    this.extra_width_for_special_labels_in_emails_list.GetScript(settings),
    this.shrink_general_labels_in_emails_list__like_inbox.GetScript(settings),
    this.sections_splitter.GetScript(settings),
    this.multiple_inbox_sections.GetScript(settings),
    this.fix_too_large_hitboxes_for_email_selection_marks.GetScript(settings),
    this.labels_tree.GetScript(settings),
    this.compose_button.GetScript(settings),
    this.area_right_to_the_compose_button_and_above_the_list_of_emails.GetScript(settings),
    this.subject_bar_when_reading_email.GetScript(settings),
    this.in_page_compose_window_header.GetScript(settings),
    this.absolutely_empty_space_above_chat.GetScript(settings),
    this.padding_on_the_right_of_the_chat.GetScript(settings),
    this.compact_chat_contact_list.GetScript(settings),
    this.top_bar.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.list_of_emails.SetDefaults(settings);
  this.horizontal_cell_paddings_in_grid_cells.SetDefaults(settings);
  this.spacing_between_emails_in_thread_view.SetDefaults(settings);
  this.labels_in_emails_list.SetDefaults(settings);
  this.smaller_font_for_labels_in_emails_list.SetDefaults(settings);
  this.limit_the_width_of_labels_in_emails_list.SetDefaults(settings);
  this.extra_width_for_special_labels_in_emails_list.SetDefaults(settings);
  this.shrink_general_labels_in_emails_list__like_inbox.SetDefaults(settings);
  this.sections_splitter.SetDefaults(settings);
  this.multiple_inbox_sections.SetDefaults(settings);
  this.fix_too_large_hitboxes_for_email_selection_marks.SetDefaults(settings);
  this.labels_tree.SetDefaults(settings);
  this.compose_button.SetDefaults(settings);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.SetDefaults(settings);
  this.subject_bar_when_reading_email.SetDefaults(settings);
  this.in_page_compose_window_header.SetDefaults(settings);
  this.absolutely_empty_space_above_chat.SetDefaults(settings);
  this.padding_on_the_right_of_the_chat.SetDefaults(settings);
  this.compact_chat_contact_list.SetDefaults(settings);
  this.top_bar.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.list_of_emails.GenSettingsUi(settings) +
  this.horizontal_cell_paddings_in_grid_cells.GenSettingsUi(settings) +
  this.spacing_between_emails_in_thread_view.GenSettingsUi(settings) +
  this.labels_in_emails_list.GenSettingsUi(settings) +
  this.smaller_font_for_labels_in_emails_list.GenSettingsUi(settings) +
  this.limit_the_width_of_labels_in_emails_list.GenSettingsUi(settings) +
  this.extra_width_for_special_labels_in_emails_list.GenSettingsUi(settings) +
  this.shrink_general_labels_in_emails_list__like_inbox.GenSettingsUi(settings) +
  this.sections_splitter.GenSettingsUi(settings) +
  this.multiple_inbox_sections.GenSettingsUi(settings) +
  this.fix_too_large_hitboxes_for_email_selection_marks.GenSettingsUi(settings) +
  this.labels_tree.GenSettingsUi(settings) +
  this.compose_button.GenSettingsUi(settings) +
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.GenSettingsUi(settings) +
  this.subject_bar_when_reading_email.GenSettingsUi(settings) +
  this.in_page_compose_window_header.GenSettingsUi(settings) +
  this.absolutely_empty_space_above_chat.GenSettingsUi(settings) +
  this.padding_on_the_right_of_the_chat.GenSettingsUi(settings) +
  this.compact_chat_contact_list.GenSettingsUi(settings) +
  this.top_bar.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.list_of_emails.ImportSettingsFromForm(form, settings);
  this.horizontal_cell_paddings_in_grid_cells.ImportSettingsFromForm(form, settings);
  this.spacing_between_emails_in_thread_view.ImportSettingsFromForm(form, settings);
  this.labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.smaller_font_for_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.limit_the_width_of_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.extra_width_for_special_labels_in_emails_list.ImportSettingsFromForm(form, settings);
  this.shrink_general_labels_in_emails_list__like_inbox.ImportSettingsFromForm(form, settings);
  this.sections_splitter.ImportSettingsFromForm(form, settings);
  this.multiple_inbox_sections.ImportSettingsFromForm(form, settings);
  this.fix_too_large_hitboxes_for_email_selection_marks.ImportSettingsFromForm(form, settings);
  this.labels_tree.ImportSettingsFromForm(form, settings);
  this.compose_button.ImportSettingsFromForm(form, settings);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.ImportSettingsFromForm(form, settings);
  this.subject_bar_when_reading_email.ImportSettingsFromForm(form, settings);
  this.in_page_compose_window_header.ImportSettingsFromForm(form, settings);
  this.absolutely_empty_space_above_chat.ImportSettingsFromForm(form, settings);
  this.padding_on_the_right_of_the_chat.ImportSettingsFromForm(form, settings);
  this.compact_chat_contact_list.ImportSettingsFromForm(form, settings);
  this.top_bar.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.list_of_emails.ApplySettingsToForm(settings, form);
  this.horizontal_cell_paddings_in_grid_cells.ApplySettingsToForm(settings, form);
  this.spacing_between_emails_in_thread_view.ApplySettingsToForm(settings, form);
  this.labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.smaller_font_for_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.limit_the_width_of_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.extra_width_for_special_labels_in_emails_list.ApplySettingsToForm(settings, form);
  this.shrink_general_labels_in_emails_list__like_inbox.ApplySettingsToForm(settings, form);
  this.sections_splitter.ApplySettingsToForm(settings, form);
  this.multiple_inbox_sections.ApplySettingsToForm(settings, form);
  this.fix_too_large_hitboxes_for_email_selection_marks.ApplySettingsToForm(settings, form);
  this.labels_tree.ApplySettingsToForm(settings, form);
  this.compose_button.ApplySettingsToForm(settings, form);
  this.area_right_to_the_compose_button_and_above_the_list_of_emails.ApplySettingsToForm(settings, form);
  this.subject_bar_when_reading_email.ApplySettingsToForm(settings, form);
  this.in_page_compose_window_header.ApplySettingsToForm(settings, form);
  this.absolutely_empty_space_above_chat.ApplySettingsToForm(settings, form);
  this.padding_on_the_right_of_the_chat.ApplySettingsToForm(settings, form);
  this.compact_chat_contact_list.ApplySettingsToForm(settings, form);
  this.top_bar.ApplySettingsToForm(settings, form);
}


static has_scripts = 0;

static descr = `For embedded <b>chat</b> use "chat" tab.
For "who/" <b>hover cards</b> use "contacts" tab.`;

static urls = ["*://mail.google.com/mail/*"];

} // end of global class gmail_condensed
