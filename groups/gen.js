//
// THIS IS A GENERATED FILE, DO NOT EDIT
//
// Generated by gen.sh
//

class groups {
///////////////////////////////////////////////////////////
// Functions for dark_mode : Dark mode
// Split: big
// Params: 

static dark_mode = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  s._enabled = false;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  if (!s.hasOwnProperty('_enabled')) s._enabled = false;

}

static IsEnabled(settings) {
  return settings.dark_mode._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  if (!this.IsEnabled(settings)) return "/* Disabled: Dark mode */\n\n";
  let {} = s;
  return `
/* Dark mode */
@media screen {
html {
  -webkit-filter: invert(100%) hue-rotate(180deg) !important;
  background-color: white;
}
video {
  -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  return `  <li><hr>
  <li>
  <input type=checkbox name=groups_dark_mode_enabled id=groups_dark_mode_enabled _site=groups _section_id="dark_mode" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_dark_mode_enabled> Dark mode</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode')) settings.dark_mode = {};
  let s = settings.dark_mode;
  let e = form.elements;
  s._enabled = e.groups_dark_mode_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode;
  let e = form.elements;
  e.groups_dark_mode_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode


///////////////////////////////////////////////////////////
// Functions for dark_mode_img : ... but keep images uninverted
// Split: no
// Params: 

static dark_mode_img = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('dark_mode_img')) settings.dark_mode_img = {};
  let s = settings.dark_mode_img;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('dark_mode_img')) settings.dark_mode_img = {};
  let s = settings.dark_mode_img;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  // Dependant on Dark Mode
  if (!settings.dark_mode_img._enabled) return false;
  if (settings.dark_mode && !settings.dark_mode._enabled) return false;
  return true;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode_img;
  if (!this.IsEnabled(settings)) return "/* Disabled: ... but keep images uninverted */\n\n";
  let {} = s;
  return `
/* ... but keep images uninverted */
@media screen {
img:not([src^="https://fonts.gstatic.com/"]), [style*="background-image:"] {
    -webkit-filter: hue-rotate(-180deg) invert(100%) !important;
}
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.dark_mode_img;
  return `
  <li>
  <input type=checkbox name=groups_dark_mode_img_enabled id=groups_dark_mode_img_enabled _site=groups _section_id="dark_mode_img" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_dark_mode_img_enabled> ... but keep images uninverted</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('dark_mode_img')) settings.dark_mode_img = {};
  let s = settings.dark_mode_img;
  let e = form.elements;
  s._enabled = e.groups_dark_mode_img_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.dark_mode_img;
  let e = form.elements;
  e.groups_dark_mode_img_enabled.checked = s._enabled;

}

};  // end of nested class dark_mode_img


///////////////////////////////////////////////////////////
// Functions for no_animations : Reduce animations
// Split: minor
// Params: 

static no_animations = class {

static params = [];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  s._enabled = true;

}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;

}

static IsEnabled(settings) {
  return settings.no_animations._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  if (!this.IsEnabled(settings)) return "/* Disabled: Reduce animations */\n\n";
  let {} = s;
  return `
/* Reduce animations */
* {
  transition: none !important;
  overscroll-behavior: none;
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  return `  <li style=height:0.5em ><BR>
  <li>
  <input type=checkbox name=groups_no_animations_enabled id=groups_no_animations_enabled _site=groups _section_id="no_animations" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_no_animations_enabled> Reduce animations</label>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('no_animations')) settings.no_animations = {};
  let s = settings.no_animations;
  let e = form.elements;
  s._enabled = e.groups_no_animations_enabled.checked;

}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.no_animations;
  let e = form.elements;
  e.groups_no_animations_enabled.checked = s._enabled;

}

};  // end of nested class no_animations


///////////////////////////////////////////////////////////
// Functions for compact_conversations_list : Compact conversations list
// Split: big
// Params: [height 1 22 Line height]

static compact_conversations_list = class {

static params = ["height"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('compact_conversations_list')) settings.compact_conversations_list = {};
  let s = settings.compact_conversations_list;
  s._enabled = true;
  s.height = 22;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('compact_conversations_list')) settings.compact_conversations_list = {};
  let s = settings.compact_conversations_list;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('height')) s.height = 22;
}

static IsEnabled(settings) {
  return settings.compact_conversations_list._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.compact_conversations_list;
  if (!this.IsEnabled(settings)) return "/* Disabled: Compact conversations list */\n\n";
  let {height} = s;
  return `
/* Compact conversations list */
[aria-label="Conversations List"] [jsshadow] [jsslot] [data-rowid] {
  min-height: 0 !important;
  height: ${height}px;  /* @1 Line height */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? [] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{

  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.compact_conversations_list;
  return `  <li><hr>
  <li>
  <input type=checkbox name=groups_compact_conversations_list_enabled id=groups_compact_conversations_list_enabled _site=groups _section_id="compact_conversations_list" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_compact_conversations_list_enabled> Compact conversations list</label>
  <ul>
    <li><input
      name=groups_compact_conversations_list_height_range
      type=range
      min=0
      max=200
      value=${s.height}
      _site=groups
      _section_id="compact_conversations_list"
      _setting_id="height"
      _default="22"
      ><input
      name=groups_compact_conversations_list_height_val
      size=3
      value=${s.height}
      _site=groups
      _section_id="compact_conversations_list"
      _setting_id="height"
      _default="22"
      > Line height
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('compact_conversations_list')) settings.compact_conversations_list = {};
  let s = settings.compact_conversations_list;
  let e = form.elements;
  s._enabled = e.groups_compact_conversations_list_enabled.checked;
  if (isNaN(s.height = parseInt(e.groups_compact_conversations_list_height_val.value))) s.height = 22;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.compact_conversations_list;
  let e = form.elements;
  e.groups_compact_conversations_list_enabled.checked = s._enabled;
  e.groups_compact_conversations_list_height_range.value = e.groups_compact_conversations_list_height_val.value = s.height;
}

};  // end of nested class compact_conversations_list


///////////////////////////////////////////////////////////
// Functions for print_layout : Print / Conversaion layout button <img src=groups/print-24px.svg width=20>
// Split: big
// Params: [font_size 1 14 Print view font size]

static print_layout = class {

static params = ["font_size"];

static SetDefaults(settings) {
  if (!settings.hasOwnProperty('print_layout')) settings.print_layout = {};
  let s = settings.print_layout;
  s._enabled = true;
  s.font_size = 14;
}

static SetMissing(settings) {
  if (!settings.hasOwnProperty('print_layout')) settings.print_layout = {};
  let s = settings.print_layout;
  if (!s.hasOwnProperty('_enabled')) s._enabled = true;
  if (!s.hasOwnProperty('font_size')) s.font_size = 14;
}

static IsEnabled(settings) {
  return settings.print_layout._enabled;
}

static GenStyle(settings) {
  this.SetMissing(settings);
  let s = settings.print_layout;
  if (!this.IsEnabled(settings)) return "/* Disabled: Print / Conversaion layout button <img src=groups/print-24px.svg width=20> */\n\n";
  let {font_size} = s;
  return `
/* Print / Conversaion layout button <img src=groups/print-24px.svg width=20> */
:root {
  --print-font-size: ${font_size}px;  /* @1 @font_size Print view font size */
}
`;
}

static GenScriptUrls(settings) {
  return this.IsEnabled(settings) ? ["script.js"] : [];
}

static GetScript(settings) {
  return this.IsEnabled(settings) ? ()=>{
function AddPrintPutton() {
  let e = document.querySelector(`[aria-label="Settings"]`).parentElement.parentElement;
  let e2 = e.cloneNode();
  let button = document.createElement("button");
  button.style.border = "none";
  button.setAttribute("print-layout", "");
  button.setAttribute("title", "Conversation view / Print layout");
  let img = document.createElement("img"); img.src = "https://fonts.gstatic.com/s/i/googlematerialicons/print/v11/24px.svg";
  e2.appendChild(button);
  button.appendChild(img);
  e.insertAdjacentElement("beforeBegin", e2);
  button.onclick = () => {
    ExpandConversation();
    Print();
  };
}

function ExpandConversation() {
  document.querySelector(`div[aria-label="Expand all"]`)?.click();
}

function Print() {
  if (!document.querySelector(`c-wiz:not([style*="display: none"]) > c-wiz [role=list] > section`)) {
    alert("Go to a conversation view for a print view");
    return;
  }

  var myPolicy = trustedTypes.createPolicy('myPolicy', {createHTML: (string, sink) => string});
  function HTML(txt) { return myPolicy.createHTML(txt); }

  let w = window.open("about:blank", "_blank", "toolbar=no,scrollbars=yes,menubar=no");

  let list = document.querySelector(`c-wiz:not([style*="display: none"]) > c-wiz [role=list]`);
  let heading = list.parentElement.parentElement.querySelector("h1");

  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<base href="${location.href}">`));
  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<title>${heading.innerText}</title>`));
  window.modsettings.dark_mode._enabled && w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<style>
@media screen {
html {
  filter: invert(100%) hue-rotate(180deg) !important;
  background-color: white;
}
img {
  filter: hue-rotate(-180deg) invert(100%) !important;
}
}
</style>`));
  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<style>
* {
  overscroll-behavior: none;
}
body {
  font-family: Roboto, sans-serif;
  font-size: ${window?.modsettings?.print_layout?.font_size || 14}px;
}
</style>`));

  w.document.body.insertAdjacentHTML("beforeEnd", HTML(`<a href="${location.href}">${location.href}</a>`));
  w.document.body.append(heading.cloneNode(true));

  let e = list.cloneNode(true);
  // Remove "to"
  [...e.querySelectorAll("section[role=listitem] > div > div > div > div > div > span")].forEach(e => e.remove());
  // Remove per-message buttons
  [...e.querySelectorAll(`div[role=button][aria-label="Reply all"]`)].forEach(e => { e.previousSibling.remove(); e.nextSibling.remove(); e.remove(); });
  // Remove replies and signatures
  [...e.querySelectorAll("section[role=listitem] > * > * > * > * > html-blob:first-of-type")].forEach(e => {while (e.nextSibling) e.nextSibling.remove();});
  [...e.querySelectorAll("[data-smartmail=gmail_signature]")].forEach(e => {
    // Avoid removing all of it in case there is nothing else. Don't leave empty message.
    let blob = e.closest("html-blob");
    blob && blob.innerText.replace(/[\r\n\t ]/g, "") !== e.innerText.replace(/[\r\n\t ]/g, "") && e.remove();
  });

  let style = `
/* Author avatar on the left */
.${e.querySelector("section > div > div").classList[0]} {
  display: flex;
}
/* Author name inline */
.${e.querySelector("section h3").classList[0]} {
  display: inline;
}
/* Name and date in line */
.${e.querySelector("section h3").parentElement.parentElement.classList[0]} {
  display: flex;
  justify-content: space-between;  /* Date sticks to the right */
}
/* Date sticks to the right */
.${e.querySelector("section > div > div").children[1].classList[0]} {
  flex-grow: 1;
}
/* Hide "short date" */
.${e.querySelector("section h3").parentElement.nextElementSibling.children[1].classList[0]} {
  display: none;
}
/* Space before date */
.${e.querySelector("section h3").parentElement.nextElementSibling.children[0].classList[0]} {
  margin-left: 1em;
}
/* Messages separator */
section {
  border-bottom: 1px solid #e8eaed;
  padding: 0.5em 0.3em;
}
`;

  w.document.head.insertAdjacentHTML("beforeEnd", HTML(`<style>${style}</style>`));

  w.document.body.append(e);
}

AddPrintPutton();


  } : ()=>{};
}

static GenSettingsUi(settings) {
  this.SetMissing(settings);
  let s = settings.print_layout;
  return `  <li><hr>
  <li has_script>
  <input type=checkbox name=groups_print_layout_enabled id=groups_print_layout_enabled _site=groups _section_id="print_layout" _setting_id="_enabled" ${s._enabled ? "checked" : ""}>
  <label for=groups_print_layout_enabled> Print / Conversaion layout button <img src=groups/print-24px.svg width=20></label>
  <ul>
    <li><input
      name=groups_print_layout_font_size_range
      type=range
      min=0
      max=50
      value=${s.font_size}
      _site=groups
      _section_id="print_layout"
      _setting_id="font_size"
      _default="14"
      ><input
      name=groups_print_layout_font_size_val
      size=3
      value=${s.font_size}
      _site=groups
      _section_id="print_layout"
      _setting_id="font_size"
      _default="14"
      > Print view font size
  </ul>

`;
}

static ImportSettingsFromForm(form, settings) {
  if (!settings.hasOwnProperty('print_layout')) settings.print_layout = {};
  let s = settings.print_layout;
  let e = form.elements;
  s._enabled = e.groups_print_layout_enabled.checked;
  if (isNaN(s.font_size = parseInt(e.groups_print_layout_font_size_val.value))) s.font_size = 14;
}

static ApplySettingsToForm(settings, form) {
  this.SetMissing(settings);
  let s = settings.print_layout;
  let e = form.elements;
  e.groups_print_layout_enabled.checked = s._enabled;
  e.groups_print_layout_font_size_range.value = e.groups_print_layout_font_size_val.value = s.font_size;
}

};  // end of nested class print_layout


///////////////////////////////////////////////////////////
// Interface functions

static id = "groups";
static fields = ["dark_mode", "dark_mode_img", "no_animations", "compact_conversations_list", "print_layout"];

static GenStyle(settings) {
  if (settings._module_enabled === false) return "/* Module groups disabled */";
  return ""+
  this.dark_mode.GenStyle(settings) +
  this.dark_mode_img.GenStyle(settings) +
  this.no_animations.GenStyle(settings) +
  this.compact_conversations_list.GenStyle(settings) +
  this.print_layout.GenStyle(settings);
}

static GenScriptUrls(settings) {
  if (settings._module_enabled === false) return [];
  return [
    ...this.dark_mode.GenScriptUrls(settings),
    ...this.dark_mode_img.GenScriptUrls(settings),
    ...this.no_animations.GenScriptUrls(settings),
    ...this.compact_conversations_list.GenScriptUrls(settings),
    ...this.print_layout.GenScriptUrls(settings)
  ];
}

static GetScript(settings) {
  if (settings._module_enabled === false) return ()=>{};
  let scripts = [
    this.dark_mode.GetScript(settings),
    this.dark_mode_img.GetScript(settings),
    this.no_animations.GetScript(settings),
    this.compact_conversations_list.GetScript(settings),
    this.print_layout.GetScript(settings)
  ];
  return ()=>scripts.forEach(script => {
    let ex;
    try {
      script();
    } catch(ex) {
      console.error(ex);
    }
  });
}

static SetDefaults(settings) {
  this.dark_mode.SetDefaults(settings);
  this.dark_mode_img.SetDefaults(settings);
  this.no_animations.SetDefaults(settings);
  this.compact_conversations_list.SetDefaults(settings);
  this.print_layout.SetDefaults(settings);
}

static GenSettingsUi(settings) {
  return ""+
  this.dark_mode.GenSettingsUi(settings) +
  this.dark_mode_img.GenSettingsUi(settings) +
  this.no_animations.GenSettingsUi(settings) +
  this.compact_conversations_list.GenSettingsUi(settings) +
  this.print_layout.GenSettingsUi(settings);
}

static ImportSettingsFromForm(form, settings) {
  this.dark_mode.ImportSettingsFromForm(form, settings);
  this.dark_mode_img.ImportSettingsFromForm(form, settings);
  this.no_animations.ImportSettingsFromForm(form, settings);
  this.compact_conversations_list.ImportSettingsFromForm(form, settings);
  this.print_layout.ImportSettingsFromForm(form, settings);
}

static ApplySettingsToForm(settings, form) {
  this.dark_mode.ApplySettingsToForm(settings, form);
  this.dark_mode_img.ApplySettingsToForm(settings, form);
  this.no_animations.ApplySettingsToForm(settings, form);
  this.compact_conversations_list.ApplySettingsToForm(settings, form);
  this.print_layout.ApplySettingsToForm(settings, form);
}


static has_scripts = 1;

static descr = ``;

static urls = ["*://groups.google.com/*"];

} // end of global class groups
